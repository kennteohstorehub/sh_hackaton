# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

StoreHub Queue Management System - An AI-powered queue management platform that reduces customer friction during peak hours by allowing customers to join virtual queues via WebChat, with real-time WebSocket notifications and comprehensive queue management features.

## Key Technologies

- **Backend**: Node.js with Express.js
- **Databases**: MongoDB (primary) + PostgreSQL via Prisma (production-ready)
- **Frontend**: Server-side rendered EJS templates with real-time updates
- **Real-time**: Socket.IO for live updates and WebSocket notifications
- **Authentication**: Session-based auth with bcryptjs for password hashing
- **Testing**: Playwright for E2E tests, custom test utilities

## Development Commands

### Standard Operations
```bash
npm run dev          # Start development server with nodemon (hot reload)
npm start            # Start production server
npm test             # Run test suite
```

### Server Management
```bash
./scripts/server-manager.sh status    # Check server status
./scripts/server-manager.sh start     # Start server (handles port conflicts)
./scripts/server-manager.sh stop      # Stop server
./scripts/server-manager.sh restart   # Restart server
./scripts/server-manager.sh cleanup   # Clean up old processes
./scripts/server-manager.sh logs      # Show server logs
```

### Database Operations
```bash
npx prisma migrate dev    # Run database migrations (development)
npx prisma migrate deploy # Run database migrations (production)
npx prisma generate       # Regenerate Prisma client
npx prisma studio         # Open Prisma Studio GUI
```

### Testing Scripts
```bash
node test-auth-security.js        # Test authentication security
node test-cancellation-flow.js    # Test queue cancellation
node test-rejoin-flow.js          # Test rejoin functionality
node test-logout-fix.js           # Test logout functionality
npm run test:e2e                  # Run Playwright E2E tests
```

## High-Level Architecture

### Request Flow
```
Customer → Web Interface → API Routes → Services → Database
                               ↓
                         Socket.IO → Real-time Updates
                               ↓
                    WebSocket Notifications → Client
```

### Directory Structure
```
server/
├── routes/              # API and page routes
│   ├── frontend/       # Server-rendered pages
│   │   ├── auth.js    # Authentication pages
│   │   └── *.js       # Other frontend routes
│   ├── auth.js        # Auth API endpoints
│   ├── queue.js       # Queue management APIs
│   └── webchat.js     # WebChat notification APIs
├── services/           # Business logic
│   ├── queueService.js          # Core queue operations
│   ├── queueNotificationService.js  # Notification handling
│   └── authService.js           # Authentication logic
├── models/             # MongoDB models
│   ├── User.js        # User authentication model
│   ├── Merchant.js    # Business entities
│   └── Queue.js       # Queue configurations
├── middleware/         # Express middleware
│   ├── auth.js        # Authentication middleware
│   └── auth-bypass.js # Testing bypass
└── utils/             # Shared utilities
```

### Database Schema

**MongoDB Models:**
- **User**: Authentication and profile data
  - username, email, password (hashed)
  - role, isActive, merchantId
- **Merchant**: Business entities
  - name, settings, features
- **Queue**: Service queue configurations
  - name, capacity, serviceTypes
  - businessHours, estimatedServiceTime

**Queue System:**
- Real-time queue tracking with position updates
- Multi-service type support
- Business hours validation
- Capacity management

### Key Features

1. **WebChat System**: Real-time chat with queue notifications
2. **Authentication**: Secure login/register with session management
3. **Queue Management**: 
   - Join/leave queue
   - Real-time position updates
   - Service completion tracking
   - Rejoin functionality for missed calls
4. **Real-time Updates**: WebSocket-based live status
5. **Security Features**:
   - Password hashing with bcryptjs
   - Session-based authentication
   - CSRF protection considerations
   - Secure logout implementation

## Development Practices

### Environment Setup
1. Copy `.env.example` to `.env`
2. Configure MongoDB URL and session secret
3. Set appropriate ports (default: 3838)
4. Run `npm install` to install dependencies

### Authentication Flow
```javascript
// Login endpoint
POST /auth/login
- Validates credentials
- Creates session
- Returns user data

// Protected routes use auth middleware
router.get('/protected', ensureAuthenticated, (req, res) => {
    // Access req.user
});
```

### Queue Operations Pattern
```javascript
// Join queue
POST /api/queue/:queueId/join
- Validates queue availability
- Checks business hours
- Adds entry with WebSocket notification

// Real-time updates
io.to(queueId).emit('queue-update', {
    entries: updatedEntries,
    timestamp: new Date()
});
```

### Security Considerations
- Always hash passwords with bcryptjs
- Use session middleware for auth state
- Validate all input data
- Implement proper error handling
- Environment variables for secrets
- Secure cookie settings in production

### Testing Approach
- Unit tests for services
- Integration tests for API endpoints
- E2E tests with Playwright
- Manual testing scripts for specific flows
- Auth bypass middleware for testing

### Common Issues & Solutions

**Port Conflicts**: 
```bash
./scripts/server-manager.sh cleanup  # Kill orphaned processes
```

**Session Issues**: 
- Check session secret configuration
- Verify cookie settings
- Clear browser cookies for fresh start

**Queue State Sync**: 
- Socket.IO handles reconnection
- Client-side state management
- Refresh to resync if needed

**Authentication Errors**:
- Verify bcrypt rounds configuration
- Check session middleware order
- Ensure database connectivity

### Recent Updates
- Migrated from WhatsApp to WebChat system
- Enhanced authentication with proper logout
- Added comprehensive E2E test suite
- Implemented queue rejoin functionality
- Improved real-time notification system

### Deployment Notes
- Production uses PM2 for process management
- MongoDB Atlas for production database
- Environment-specific configurations
- Logs stored in `logs/` directory
- Consider reverse proxy for WebSocket support