<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Queue Status - <%= merchant.businessName %></title>
    
    <!-- Google Fonts - Open Sans -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- StoreHub Design System CSS -->
    <style>
        /* Design System Variables */
        :root {
            /* Primary Colors */
            --primary-orange: #FA8C16;
            --primary-hover: #FFA940;
            --primary-pressed: #D46B08;
            
            /* Base Colors */
            --base-black: #1C1C1C;
            --base-white: #FFFFFC;
            --base-gray: #828282;
            
            /* Semantic Colors */
            --success-green: #52C41A;
            --warning-yellow: #FADB14;
            --error-red: #CF1322;
            --info-blue: #1890FF;
            
            /* Grayscale */
            --gray-900: #262626;
            --gray-800: #434343;
            --gray-700: #595959;
            --gray-600: #6B6B6B;
            --gray-500: #8C8C8C;
            --gray-400: #BFBFBF;
            --gray-300: #D9D9D9;
            --gray-200: #F0F0F0;
            --gray-100: #FAFAFA;
            
            /* Typography */
            --font-primary: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            --weight-regular: 400;
            --weight-medium: 500;
            --weight-semibold: 600;
            --weight-bold: 700;
            
            /* Type Scale */
            --heading-1: 32px;
            --heading-2: 28px;
            --heading-3: 24px;
            --heading-4: 20px;
            --body-large: 18px;
            --body: 16px;
            --small: 14px;
            --tiny: 12px;
            
            /* Spacing */
            --space-1: 4px;
            --space-2: 8px;
            --space-3: 12px;
            --space-4: 16px;
            --space-5: 20px;
            --space-6: 24px;
            --space-8: 32px;
            --space-10: 40px;
            --space-12: 48px;
            --space-16: 64px;
            
            /* Shadows */
            --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);
            --shadow-md: 0 2px 4px rgba(0, 0, 0, 0.08);
            --shadow-lg: 0 4px 8px rgba(0, 0, 0, 0.10);
            --shadow-xl: 0 8px 16px rgba(0, 0, 0, 0.12);
            
            /* Border Radius */
            --radius-sm: 4px;
            --radius-md: 8px;
            --radius-lg: 12px;
            --radius-xl: 16px;
            --radius-full: 9999px;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: var(--font-primary);
            background: var(--gray-100);
            color: var(--gray-900);
            min-height: 100vh;
            font-size: var(--body);
            line-height: 1.6;
        }
        
        /* Hero Section */
        .status-hero {
            background: linear-gradient(135deg, var(--primary-orange) 0%, var(--primary-hover) 100%);
            padding: var(--space-8) 0;
            color: white;
            text-align: center;
        }
        
        .status-hero h1 {
            font-size: var(--heading-2);
            font-weight: var(--weight-bold);
            margin-bottom: var(--space-2);
        }
        
        .status-hero p {
            font-size: var(--body-large);
            opacity: 0.95;
        }
        
        /* Container */
        .status-container {
            max-width: 800px;
            margin: calc(var(--space-8) * -1) auto var(--space-8);
            padding: 0 var(--space-6);
        }
        
        /* Main Status Card */
        .main-status-card {
            background: white;
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-xl);
            padding: var(--space-8);
            text-align: center;
            margin-bottom: var(--space-6);
        }
        
        /* Queue Number Display */
        .queue-number-huge {
            width: 160px;
            height: 160px;
            background: var(--primary-orange);
            color: white;
            border-radius: var(--radius-full);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto var(--space-6);
            font-size: 60px;
            font-weight: var(--weight-bold);
            box-shadow: var(--shadow-lg);
            position: relative;
            transition: all 0.3s ease;
        }
        
        .queue-number-huge.called {
            background: var(--success-green);
            animation: pulse 2s infinite;
        }
        
        .queue-number-huge.called::before {
            content: 'âœ“';
            position: absolute;
            top: -10px;
            right: -10px;
            background: white;
            color: var(--success-green);
            width: 40px;
            height: 40px;
            border-radius: var(--radius-full);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            box-shadow: var(--shadow-lg);
        }
        
        @keyframes pulse {
            0% { 
                transform: scale(1); 
                box-shadow: 0 0 0 0 rgba(82, 196, 26, 0.7);
            }
            50% { 
                transform: scale(1.05); 
                box-shadow: 0 0 0 20px rgba(82, 196, 26, 0);
            }
            100% { 
                transform: scale(1); 
                box-shadow: 0 0 0 0 rgba(82, 196, 26, 0);
            }
        }
        
        @keyframes flashScreen {
            0% { opacity: 0; }
            50% { opacity: 0.3; }
            100% { opacity: 0; }
        }
        
        @keyframes slideDown {
            from {
                transform: translateY(-20px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }
        
        @keyframes ring {
            0% { transform: rotate(0); }
            10% { transform: rotate(14deg); }
            20% { transform: rotate(-8deg); }
            30% { transform: rotate(14deg); }
            40% { transform: rotate(-4deg); }
            50% { transform: rotate(10deg); }
            60% { transform: rotate(0); }
            100% { transform: rotate(0); }
        }
        
        /* Status Message */
        .status-message {
            font-size: var(--heading-3);
            font-weight: var(--weight-semibold);
            color: var(--gray-900);
            margin-bottom: var(--space-3);
        }
        
        .status-message.called {
            color: var(--success-green);
        }
        
        .status-details {
            font-size: var(--body-large);
            color: var(--gray-600);
            margin-bottom: var(--space-6);
        }
        
        /* Status Grid */
        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: var(--space-4);
            margin-bottom: var(--space-6);
        }
        
        .status-item {
            background: var(--gray-100);
            border-radius: var(--radius-md);
            padding: var(--space-4);
            text-align: center;
        }
        
        .status-item-value {
            font-size: var(--heading-3);
            font-weight: var(--weight-bold);
            color: var(--primary-orange);
            display: block;
            margin-bottom: var(--space-1);
        }
        
        .status-item-label {
            font-size: var(--small);
            color: var(--gray-600);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        /* Notification Card */
        .notification-card {
            background: var(--info-blue);
            color: white;
            border-radius: var(--radius-md);
            padding: var(--space-4);
            margin-bottom: var(--space-4);
            display: flex;
            align-items: center;
            gap: var(--space-3);
            animation: slideDown 0.5s ease-out;
        }
        
        .notification-card.success {
            background: var(--success-green);
        }
        
        .notification-card svg {
            flex-shrink: 0;
            animation: ring 2s ease-in-out infinite;
        }
        
        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: var(--space-3) var(--space-6);
            font-size: var(--body);
            font-weight: var(--weight-medium);
            font-family: var(--font-primary);
            border-radius: var(--radius-md);
            border: none;
            cursor: pointer;
            transition: all 0.25s ease;
            min-height: 44px;
            min-width: 120px;
            text-decoration: none;
        }
        
        .btn-primary {
            background: var(--primary-orange);
            color: white;
            box-shadow: var(--shadow-sm);
        }
        
        .btn-primary:hover {
            background: var(--primary-hover);
            box-shadow: var(--shadow-md);
        }
        
        .btn-secondary {
            background: white;
            color: var(--primary-orange);
            border: 1px solid var(--primary-orange);
        }
        
        .btn-secondary:hover {
            background: var(--gray-100);
        }
        
        .btn-text {
            background: transparent;
            color: var(--primary-orange);
            padding: var(--space-2) var(--space-4);
            min-width: auto;
        }
        
        .btn-text:hover {
            text-decoration: underline;
        }
        
        .btn-text.text-danger {
            color: var(--error-red);
        }
        
        /* Action Buttons */
        .action-buttons {
            display: flex;
            gap: var(--space-3);
            justify-content: center;
            flex-wrap: wrap;
        }
        
        /* Timeline */
        .progress-section {
            background: white;
            border-radius: var(--radius-lg);
            padding: var(--space-6);
            box-shadow: var(--shadow-sm);
            margin-bottom: var(--space-6);
        }
        
        .progress-title {
            font-size: var(--heading-4);
            font-weight: var(--weight-semibold);
            color: var(--gray-900);
            margin-bottom: var(--space-4);
        }
        
        .queue-timeline {
            position: relative;
            padding: var(--space-4) 0;
        }
        
        .timeline-item {
            display: flex;
            align-items: center;
            margin-bottom: var(--space-4);
            position: relative;
        }
        
        .timeline-dot {
            width: 16px;
            height: 16px;
            border-radius: var(--radius-full);
            background: var(--gray-300);
            margin-right: var(--space-3);
            position: relative;
            z-index: 2;
        }
        
        .timeline-dot.active {
            background: var(--primary-orange);
            box-shadow: 0 0 0 4px rgba(250, 140, 22, 0.2);
        }
        
        .timeline-dot.completed {
            background: var(--success-green);
        }
        
        .timeline-content {
            flex: 1;
        }
        
        .timeline-line {
            position: absolute;
            left: 7px;
            top: 24px;
            bottom: 0;
            width: 2px;
            background: var(--gray-300);
            z-index: 1;
        }
        
        .text-muted {
            color: var(--gray-600);
            font-size: var(--small);
        }
        
        /* Info Grid */
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: var(--space-4);
            margin-top: var(--space-6);
        }
        
        .info-card {
            background: white;
            border-radius: var(--radius-md);
            padding: var(--space-4);
            display: flex;
            align-items: center;
            gap: var(--space-3);
            box-shadow: var(--shadow-sm);
        }
        
        .info-icon {
            width: 40px;
            height: 40px;
            color: var(--primary-orange);
            flex-shrink: 0;
        }
        
        .info-title {
            font-size: var(--small);
            font-weight: var(--weight-semibold);
            color: var(--gray-700);
            margin-bottom: var(--space-1);
        }
        
        .info-text {
            font-size: var(--body);
            color: var(--gray-900);
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .status-container {
                margin-top: calc(var(--space-6) * -1);
                padding: 0 var(--space-4);
            }
            
            .main-status-card {
                padding: var(--space-6);
            }
            
            .queue-number-huge {
                width: 120px;
                height: 120px;
                font-size: 48px;
            }
            
            .status-grid {
                grid-template-columns: 1fr;
            }
            
            .action-buttons {
                flex-direction: column;
            }
            
            .action-buttons .btn {
                width: 100%;
            }
            
            .info-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Status Hero -->
    <div class="status-hero">
        <h1><%= merchant.businessName %></h1>
        <p>Your Queue Status</p>
    </div>
    
    <!-- Main Container -->
    <div class="status-container">
        <!-- Notification Cards -->
        <% if (customer.status === 'called') { %>
        <div class="notification-card success">
            <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
            </svg>
            <div>
                <strong>ðŸ”” It's your turn!</strong> Please proceed to the counter now.
            </div>
        </div>
        <% } else if (customer.status === 'serving') { %>
        <div class="notification-card success">
            <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <div>
                <strong>You're being served!</strong> Thank you for your patience.
            </div>
        </div>
        <% } %>
        
        <!-- Main Status Card -->
        <div class="main-status-card">
            <div class="queue-number-huge <%= ['called', 'serving'].includes(customer.status) ? 'called' : '' %>">
                <%= customer.position %>
            </div>
            
            <h2 class="status-message <%= ['called', 'serving'].includes(customer.status) ? 'called' : '' %>">
                <% if (customer.status === 'waiting') { %>
                    You're in the queue!
                <% } else if (customer.status === 'called') { %>
                    Your turn has arrived!
                <% } else if (customer.status === 'serving') { %>
                    You're being served
                <% } else if (customer.status === 'completed') { %>
                    Service completed
                <% } else { %>
                    <%= customer.status %>
                <% } %>
            </h2>
            
            <p class="status-details">
                <% if (customer.status === 'waiting') { %>
                    <% if (currentPosition > 1) { %>
                        There are <strong><%= currentPosition - 1 %></strong> people ahead of you
                    <% } else { %>
                        You're next in line!
                    <% } %>
                <% } else if (customer.status === 'called') { %>
                    Please proceed to the service counter
                <% } else if (customer.status === 'serving') { %>
                    Thank you for your patience
                <% } %>
            </p>
            
            <!-- Status Grid -->
            <div class="status-grid">
                <div class="status-item">
                    <span class="status-item-value"><%= customer.estimatedWaitTime || 15 %> min</span>
                    <span class="status-item-label">Estimated Wait</span>
                </div>
                <div class="status-item">
                    <span class="status-item-value"><%= currentPosition %></span>
                    <span class="status-item-label">Your Position</span>
                </div>
                <div class="status-item">
                    <span class="status-item-value"><%= new Date(customer.joinedAt).toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' }) %></span>
                    <span class="status-item-label">Joined At</span>
                </div>
            </div>
            
            <!-- Verification Code Display -->
            <% if (customer.verificationCode) { %>
            <div style="background: var(--gray-100); border-radius: var(--radius-md); padding: var(--space-4); margin-top: var(--space-6); text-align: center;">
                <p style="font-size: var(--small); color: var(--gray-600); margin-bottom: var(--space-2);">Your Verification Code:</p>
                <p style="font-size: var(--heading-2); font-weight: var(--weight-bold); color: var(--primary-orange); letter-spacing: 3px;"><%= customer.verificationCode %></p>
                <p style="font-size: var(--tiny); color: var(--gray-500); margin-top: var(--space-2);">Please show this code when you arrive at the counter</p>
            </div>
            <% } %>
            
            <!-- Action Buttons -->
            <div class="action-buttons">
                <button class="btn btn-secondary" onclick="refreshStatus()">
                    Refresh Status
                </button>
                
                <% if (customer.status === 'waiting') { %>
                <button class="btn btn-text text-danger" onclick="confirmLeaveQueue()">
                    Leave Queue
                </button>
                <% } %>
            </div>
        </div>
        
        <!-- Progress Timeline -->
        <div class="progress-section">
            <h3 class="progress-title">Your Journey</h3>
            <div class="queue-timeline">
                <div class="timeline-line"></div>
                
                <div class="timeline-item">
                    <div class="timeline-dot completed"></div>
                    <div class="timeline-content">
                        <strong>Joined Queue</strong><br>
                        <span class="text-muted"><%= new Date(customer.joinedAt).toLocaleTimeString() %></span>
                    </div>
                </div>
                
                <div class="timeline-item">
                    <div class="timeline-dot <%= customer.status !== 'waiting' ? 'completed' : 'active' %>"></div>
                    <div class="timeline-content">
                        <strong>Waiting</strong><br>
                        <span class="text-muted">
                            <% if (customer.status === 'waiting') { %>
                                Currently waiting
                            <% } else if (customer.calledAt) { %>
                                <%= new Date(customer.calledAt).toLocaleTimeString() %>
                            <% } %>
                        </span>
                    </div>
                </div>
                
                <div class="timeline-item">
                    <div class="timeline-dot <%= ['serving', 'completed'].includes(customer.status) ? 'completed' : (customer.status === 'called' ? 'active' : '') %>"></div>
                    <div class="timeline-content">
                        <strong>Called</strong><br>
                        <span class="text-muted">
                            <% if (customer.calledAt) { %>
                                <%= new Date(customer.calledAt).toLocaleTimeString() %>
                            <% } else { %>
                                Pending
                            <% } %>
                        </span>
                    </div>
                </div>
                
                <div class="timeline-item">
                    <div class="timeline-dot <%= customer.status === 'completed' ? 'completed' : (customer.status === 'serving' ? 'active' : '') %>"></div>
                    <div class="timeline-content">
                        <strong>Serving</strong><br>
                        <span class="text-muted">
                            <% if (customer.servedAt) { %>
                                <%= new Date(customer.servedAt).toLocaleTimeString() %>
                            <% } else { %>
                                Pending
                            <% } %>
                        </span>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Info Cards -->
        <div class="info-grid">
            <div class="info-card">
                <svg class="info-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <div>
                    <div class="info-title">Business Hours</div>
                    <div class="info-text">9:00 AM - 10:00 PM</div>
                </div>
            </div>
            
            <div class="info-card">
                <svg class="info-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                </svg>
                <div>
                    <div class="info-title">Contact</div>
                    <div class="info-text"><%= merchant.phone || 'Not available' %></div>
                </div>
            </div>
            
            <div class="info-card">
                <svg class="info-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                </svg>
                <div>
                    <div class="info-title">Location</div>
                    <div class="info-text">Main Branch</div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Get CSRF token from cookie
        function getCsrfToken() {
            const cookies = document.cookie.split(';');
            for (let cookie of cookies) {
                const [name, value] = cookie.trim().split('=');
                if (name === 'csrf-token') {
                    return value;
                }
            }
            return '';
        }
        
        // Track if notification has been played
        let notificationPlayed = localStorage.getItem('notificationPlayed_<%= customer.id %>') === 'true';
        let previousStatus = '<%= customer.status %>';
        
        // Auto-refresh every 10 seconds if waiting or called
        <% if (['waiting', 'called'].includes(customer.status)) { %>
        setInterval(() => {
            checkStatusUpdate();
        }, 10000);
        <% } %>
        
        // Play notification sound when called or serving
        <% if (['called', 'serving'].includes(customer.status)) { %>
        if (!notificationPlayed) {
            playNotificationSound();
            localStorage.setItem('notificationPlayed_<%= customer.id %>', 'true');
        }
        <% } %>
        
        function playNotificationSound() {
            // Try multiple sound formats for compatibility
            const audioFormats = [
                { file: '/sounds/table-ready.mp3', type: 'audio/mpeg' },
                { file: '/sounds/table-ready.ogg', type: 'audio/ogg' },
                { file: '/sounds/notification.mp3', type: 'audio/mpeg' },
                { file: '/sounds/notification.ogg', type: 'audio/ogg' }
            ];
            
            let played = false;
            
            for (const format of audioFormats) {
                if (!played) {
                    const audio = new Audio(format.file);
                    audio.volume = 0.7;
                    
                    // Play sound with user interaction fallback
                    const playPromise = audio.play();
                    
                    if (playPromise !== undefined) {
                        playPromise
                            .then(() => {
                                played = true;
                                console.log('Notification sound played:', format.file);
                                
                                // Repeat sound 3 times with delay
                                let count = 0;
                                const repeatInterval = setInterval(() => {
                                    count++;
                                    if (count < 3) {
                                        audio.currentTime = 0;
                                        audio.play();
                                    } else {
                                        clearInterval(repeatInterval);
                                    }
                                }, 2000);
                            })
                            .catch(error => {
                                console.log('Audio play failed for', format.file, ':', error);
                                
                                // Show visual notification as fallback
                                if (!played) {
                                    showVisualNotification();
                                }
                            });
                    }
                }
            }
        }
        
        function showVisualNotification() {
            // Flash the screen with animation
            const flashOverlay = document.createElement('div');
            flashOverlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: var(--success-green);
                opacity: 0;
                z-index: 9999;
                pointer-events: none;
                animation: flashScreen 0.5s ease-in-out 3;
            `;
            
            document.body.appendChild(flashOverlay);
            
            setTimeout(() => {
                flashOverlay.remove();
            }, 1500);
        }
        
        // Check for status updates via API
        async function checkStatusUpdate() {
            try {
                const response = await fetch('/api/queue/<%= queue.id %>/status/<%= customer.id %>');
                const data = await response.json();
                
                if (data.status !== previousStatus) {
                    if (['called', 'serving'].includes(data.status) && !notificationPlayed) {
                        playNotificationSound();
                        localStorage.setItem('notificationPlayed_<%= customer.id %>', 'true');
                        notificationPlayed = true;
                    }
                    
                    // Reload page to show updated status
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                }
            } catch (error) {
                console.log('Status check failed:', error);
            }
        }
        
        function refreshStatus() {
            window.location.reload();
        }
        
        function confirmLeaveQueue() {
            if (confirm('Are you sure you want to leave the queue? You will lose your position.')) {
                leaveQueue();
            }
        }
        
        async function leaveQueue() {
            try {
                const response = await fetch('/api/queue/<%= queue.id %>/leave/<%= customer.id %>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    alert('You have left the queue');
                    window.location.href = '/queue/<%= queue.id %>';
                } else {
                    alert('Failed to leave queue');
                }
            } catch (error) {
                alert('Network error');
            }
        }
        
        // Enable notifications
        if ('Notification' in window && Notification.permission === 'default') {
            Notification.requestPermission();
        }
        
        // Show browser notification when called
        <% if (customer.status === 'called') { %>
        if (typeof window !== 'undefined' && 'Notification' in window) {
            if (Notification.permission === 'granted') {
                new Notification('Your turn!', {
                    body: 'Please proceed to the counter at <%= merchant.businessName %>',
                    icon: '/images/logo.png',
                    badge: '/images/badge.png',
                    vibrate: [200, 100, 200]
                });
            }
        }
        <% } %>
        
        // Show confirmation modal when customer is called
        <% if (customer.status === 'called') { %>
        function showConfirmationModal() {
            // Create modal overlay
            const modalOverlay = document.createElement('div');
            modalOverlay.id = 'notificationModal';
            modalOverlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.7);
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
                animation: fadeIn 0.3s ease-in-out;
            `;
            
            // Create modal content
            const modalContent = document.createElement('div');
            modalContent.style.cssText = `
                background: white;
                border-radius: 16px;
                padding: 32px;
                max-width: 400px;
                width: 90%;
                text-align: center;
                box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
                animation: slideUp 0.3s ease-out;
            `;
            
            modalContent.innerHTML = `
                <div style="margin-bottom: 24px;">
                    <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#52C41A" style="margin: 0 auto;">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
                    </svg>
                </div>
                <h2 style="color: #262626; margin-bottom: 12px; font-size: 24px;">Your Table is Ready!</h2>
                <p style="color: #6B6B6B; margin-bottom: 32px; font-size: 16px;">
                    Please proceed to the counter at <strong><%= merchant.businessName %></strong>
                </p>
                <p style="color: #8C8C8C; margin-bottom: 24px; font-size: 14px;">
                    Verification Code: <strong style="font-size: 20px; color: #FA8C16;"><%= customer.verificationCode || 'N/A' %></strong>
                </p>
                <div style="display: flex; gap: 12px; justify-content: center; flex-wrap: wrap;">
                    <button onclick="confirmOnTheWay()" style="
                        background: #52C41A;
                        color: white;
                        border: none;
                        padding: 12px 24px;
                        border-radius: 8px;
                        font-size: 16px;
                        font-weight: 600;
                        cursor: pointer;
                        flex: 1;
                        min-width: 120px;
                    ">On My Way</button>
                    <button onclick="withdrawFromQueue()" style="
                        background: #CF1322;
                        color: white;
                        border: none;
                        padding: 12px 24px;
                        border-radius: 8px;
                        font-size: 16px;
                        font-weight: 600;
                        cursor: pointer;
                        flex: 1;
                        min-width: 120px;
                    ">Withdraw</button>
                </div>
                <p style="color: #8C8C8C; margin-top: 16px; font-size: 12px;">
                    Please respond within 5 minutes or you may lose your spot
                </p>
            `;
            
            modalOverlay.appendChild(modalContent);
            document.body.appendChild(modalOverlay);
            
            // Auto-close after 5 minutes
            setTimeout(() => {
                if (document.body.contains(modalOverlay)) {
                    modalOverlay.remove();
                }
            }, 300000); // 5 minutes
        }
        
        async function confirmOnTheWay() {
            try {
                // Send acknowledgment to backend (using credentials for session)
                const response = await fetch('/api/queue/acknowledge', {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: {
                        'Content-Type': 'application/json',
                        'x-csrf-token': getCsrfToken()
                    },
                    body: JSON.stringify({ 
                        entryId: '<%= customer.id %>',
                        type: 'on_way',
                        acknowledged: true
                    })
                });
                
                if (response.ok) {
                    // Close modal and show success
                    document.getElementById('notificationModal')?.remove();
                    showSuccessMessage('âœ“ Merchant has been notified that you are on your way!');
                    
                    // Update UI to show on the way status
                    const statusMessage = document.querySelector('.status-message');
                    if (statusMessage) {
                        statusMessage.textContent = "On your way";
                        statusMessage.classList.add('called');
                    }
                    
                    // Don't reload immediately, let user see the confirmation
                    setTimeout(() => {
                        window.location.reload();
                    }, 3000);
                } else {
                    const error = await response.json();
                    alert('Failed to confirm: ' + (error.error || 'Please try again'));
                }
            } catch (error) {
                console.error('Error confirming on the way:', error);
                alert('Network error. Please try again.');
            }
        }
        
        async function withdrawFromQueue() {
            if (confirm('Are you sure you want to withdraw from the queue? You will lose your position.')) {
                try {
                    const response = await fetch('/api/queue/<%= queue.id %>/cancel/<%= customer.id %>', {
                        method: 'POST',
                        credentials: 'same-origin',
                        headers: {
                            'Content-Type': 'application/json',
                            'x-csrf-token': getCsrfToken()
                        },
                        body: JSON.stringify({ 
                            verificationCode: '<%= customer.verificationCode || "" %>'
                        })
                    });
                    
                    if (response.ok) {
                        // Close modal and redirect
                        document.getElementById('notificationModal')?.remove();
                        showSuccessMessage('You have withdrawn from the queue.');
                        setTimeout(() => {
                            window.location.href = '/queue/<%= queue.id %>';
                        }, 2000);
                    } else {
                        const error = await response.json();
                        alert('Failed to withdraw: ' + (error.error || 'Please try again'));
                    }
                } catch (error) {
                    console.error('Error withdrawing from queue:', error);
                    alert('Network error. Please try again.');
                }
            }
        }
        
        function showSuccessMessage(message) {
            const toast = document.createElement('div');
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #52C41A;
                color: white;
                padding: 16px 24px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                z-index: 10001;
                animation: slideInRight 0.3s ease-out;
            `;
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }
        
        // Show modal immediately if not already shown
        if (!localStorage.getItem('confirmationShown_<%= customer.id %>')) {
            setTimeout(() => {
                showConfirmationModal();
                localStorage.setItem('confirmationShown_<%= customer.id %>', 'true');
            }, 1000);
        }
        <% } %>
        
        // Add required CSS animations
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }
            @keyframes slideUp {
                from { transform: translateY(20px); opacity: 0; }
                to { transform: translateY(0); opacity: 1; }
            }
            @keyframes slideInRight {
                from { transform: translateX(100%); }
                to { transform: translateX(0); }
            }
            @keyframes flashScreen {
                0%, 100% { opacity: 0; }
                50% { opacity: 0.3; }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>