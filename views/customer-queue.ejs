<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Join Queue - <%= merchant.businessName %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        :root {
            --primary-color: <%= merchant.primaryColor || '#0d6efd' %>;
            --secondary-color: <%= merchant.secondaryColor || '#6c757d' %>;
        }
        
        .brand-header {
            background-color: var(--primary-color);
            color: white;
            padding: 2rem 0;
            text-align: center;
        }
        
        .queue-status {
            background-color: #f8f9fa;
            border-radius: 10px;
            padding: 2rem;
            margin: 2rem 0;
            text-align: center;
        }
        
        .queue-number {
            font-size: 3rem;
            font-weight: bold;
            color: var(--primary-color);
        }
        
        .wait-time {
            font-size: 1.5rem;
            color: var(--secondary-color);
        }
        
        .status-update {
            animation: slideIn 0.5s ease-out;
        }
        
        @keyframes slideIn {
            from {
                transform: translateY(-20px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        .btn-primary:hover {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            filter: brightness(90%);
        }
    </style>
</head>
<body>
    <!-- Brand Header -->
    <div class="brand-header">
        <div class="container">
            <% if (merchant.logoUrl) { %>
                <img src="<%= merchant.logoUrl %>" alt="<%= merchant.businessName %>" style="max-height: 80px; margin-bottom: 1rem;">
            <% } %>
            <h1><%= merchant.businessName %></h1>
            <p class="mb-0">Virtual Queue System</p>
        </div>
    </div>

    <div class="container mt-4">
        <!-- Join Queue Form -->
        <div id="joinForm" class="card shadow-sm">
            <div class="card-body">
                <h2 class="card-title mb-4">Join Our Queue</h2>
                
                <% if (merchant.currentWaitTime) { %>
                    <div class="alert alert-info">
                        <i class="bi bi-clock"></i> Current estimated wait time: <strong><%= merchant.currentWaitTime %> minutes</strong>
                    </div>
                <% } %>
                
                <form id="queueForm">
                    <div class="mb-3">
                        <label for="customerName" class="form-label">Your Name *</label>
                        <input type="text" class="form-control" id="customerName" name="customerName" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="customerPhone" class="form-label">Phone Number *</label>
                        <input type="tel" class="form-control" id="customerPhone" name="customerPhone" 
                               placeholder="0123456789 or +60123456789" required>
                        <small class="text-muted">Enter your phone number (we'll add country code if needed). We'll notify you when your table is ready</small>
                    </div>
                    
                    <div class="mb-3">
                        <label for="partySize" class="form-label">Party Size *</label>
                        <select class="form-select" id="partySize" name="partySize" required>
                            <% for(let i = 1; i <= 12; i++) { %>
                                <option value="<%= i %>"><%= i %> <%= i === 1 ? 'Person' : 'People' %></option>
                            <% } %>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label for="specialRequests" class="form-label">Special Requests (Optional)</label>
                        <textarea class="form-control" id="specialRequests" name="specialRequests" rows="2"
                                  placeholder="e.g., High chair needed, wheelchair accessible"></textarea>
                    </div>
                    
                    <button type="submit" class="btn btn-primary btn-lg w-100">Join Queue</button>
                </form>
            </div>
        </div>

        <!-- Queue Status (Hidden initially) -->
        <div id="queueStatus" class="d-none">
            <div class="queue-status">
                <h2>You're in the queue!</h2>
                <div class="queue-number" id="queueNumber">-</div>
                <p class="mb-0">Your Queue Number</p>
            </div>
            
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6">
                            <h3 id="position">-</h3>
                            <p class="text-muted mb-0">Position in Queue</p>
                        </div>
                        <div class="col-6">
                            <h3 id="waitTime">-</h3>
                            <p class="text-muted mb-0">Estimated Wait</p>
                        </div>
                    </div>
                    
                    <hr>
                    
                    <div id="statusMessage" class="alert alert-info">
                        <i class="bi bi-info-circle"></i> We'll notify you when your table is ready!
                    </div>
                    
                    <button class="btn btn-outline-danger w-100" onclick="cancelQueue()">Leave Queue</button>
                </div>
            </div>
        </div>

        <!-- Notifications -->
        <div id="notifications" class="position-fixed top-0 end-0 p-3" style="z-index: 11">
            <!-- Toast notifications will appear here -->
        </div>
    </div>

    <script>
        let socket = null;
        let currentQueueEntry = null;
        const merchantId = '<%= merchant.id || merchant._id %>';
        
        // Generate or get sessionId for webchat integration
        function getOrCreateSessionId() {
            let sessionId = localStorage.getItem('queueChatSessionId');
            if (!sessionId) {
                sessionId = 'qc_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
                localStorage.setItem('queueChatSessionId', sessionId);
            }
            return sessionId;
        }
        
        const sessionId = getOrCreateSessionId();

        // Initialize Socket.IO connection
        function initializeSocket() {
            socket = io();
            
            socket.on('connect', () => {
                console.log('Connected to server');
                if (currentQueueEntry) {
                    socket.emit('join-customer-room', currentQueueEntry.id || currentQueueEntry._id);
                }
            });
            
            socket.on('queue-position-update', (data) => {
                updateQueueStatus(data);
                showNotification('Queue Update', `You are now position ${data.position} in the queue`);
            });
            
            socket.on('customer-called', (data) => {
                document.getElementById('statusMessage').innerHTML = `
                    <div class="alert alert-success">
                        <h4>ðŸŽ‰ Your table is ready!</h4>
                        <p>${data.message}</p>
                    </div>
                `;
                showNotification('Table Ready!', 'Please proceed to the host desk', 'success');
                
                // Play notification sound if available
                playNotificationSound();
            });
        }

        // Handle form submission
        document.getElementById('queueForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            // Format phone number - remove spaces and ensure it starts with country code
            let phoneNumber = document.getElementById('customerPhone').value.trim();
            
            // Remove all non-numeric characters except + at the beginning
            phoneNumber = phoneNumber.replace(/[^\d+]/g, '');
            
            // If phone doesn't start with + and looks like a local number, add Malaysia country code
            if (!phoneNumber.startsWith('+') && !phoneNumber.startsWith('60')) {
                // Check if it starts with 0 (common local format)
                if (phoneNumber.startsWith('0')) {
                    phoneNumber = '60' + phoneNumber.substring(1);
                } else if (phoneNumber.length <= 10) {
                    // Assume it's a local number without country code
                    phoneNumber = '60' + phoneNumber;
                }
            }
            
            // Ensure + prefix for international format
            if (!phoneNumber.startsWith('+') && phoneNumber.length > 10) {
                phoneNumber = '+' + phoneNumber;
            }
            
            const formData = {
                customerName: document.getElementById('customerName').value,
                customerPhone: phoneNumber,
                partySize: parseInt(document.getElementById('partySize').value),
                specialRequests: document.getElementById('specialRequests').value,
                merchantId: merchantId,
                sessionId: sessionId
            };
            
            try {
                const response = await fetch('/api/webchat/join', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    console.error('Server error response:', error);
                    const errorMessage = error.message || error.error || 'Failed to join queue';
                    throw new Error(errorMessage);
                }
                
                const data = await response.json();
                currentQueueEntry = data.queueEntry;
                
                // Store queue info for queue-chat.html
                sessionStorage.setItem('queueJoined', 'true');
                sessionStorage.setItem('queueInfo', JSON.stringify({
                    queueId: currentQueueEntry.queueId,
                    queueNumber: data.queueNumber,
                    position: data.position,
                    estimatedWait: data.estimatedWaitTime,
                    verificationCode: data.verificationCode,
                    customerName: formData.customerName,
                    merchantId: merchantId,
                    entryId: currentQueueEntry.id,
                    businessPhone: '<%= merchant.phone || "+60123456789" %>',
                    sessionId: sessionId  // Include the sessionId
                }));
                
                // Redirect to queue-chat.html for full chat experience
                window.location.href = '/queue-chat.html';
                
            } catch (error) {
                console.error('Join queue error:', error);
                console.error('Form data sent:', formData);
                showNotification('Error', error.message, 'danger');
            }
        });

        // Update queue status display
        function updateQueueStatus(data) {
            document.getElementById('position').textContent = data.position || '-';
            document.getElementById('waitTime').textContent = 
                data.estimatedWait ? `~${data.estimatedWait} min` : '-';
        }

        // Cancel queue
        async function cancelQueue() {
            if (!currentQueueEntry || !confirm('Are you sure you want to leave the queue?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/queues/${currentQueueEntry.id || currentQueueEntry._id}/cancel`, {
                    method: 'POST'
                });
                
                if (!response.ok) {
                    throw new Error('Failed to cancel queue entry');
                }
                
                // Reset UI
                document.getElementById('queueStatus').classList.add('d-none');
                document.getElementById('joinForm').classList.remove('d-none');
                document.getElementById('queueForm').reset();
                
                // Disconnect from socket room
                if (socket) {
                    socket.emit('leave-customer-room', currentQueueEntry.id || currentQueueEntry._id);
                }
                
                currentQueueEntry = null;
                showNotification('Queue Cancelled', 'You have left the queue', 'info');
                
            } catch (error) {
                showNotification('Error', error.message, 'danger');
            }
        }

        // Show toast notification
        function showNotification(title, message, type = 'info') {
            const toastId = 'toast-' + Date.now();
            const toastHtml = `
                <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header bg-${type} text-white">
                        <strong class="me-auto">${title}</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            `;
            
            document.getElementById('notifications').insertAdjacentHTML('beforeend', toastHtml);
            
            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement, { autohide: true, delay: 5000 });
            toast.show();
            
            // Remove element after hidden
            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }

        // Play notification sound
        function playNotificationSound() {
            // You can add an audio element and play it here
            // For now, we'll use the browser notification API if available
            if ('Notification' in window && Notification.permission === 'granted') {
                new Notification('Your table is ready!', {
                    body: `Please proceed to ${merchantName}`,
                    icon: '/images/notification-icon.png'
                });
            }
        }

        // Request notification permission on load
        if ('Notification' in window && Notification.permission === 'default') {
            Notification.requestPermission();
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', () => {
            // Check if returning to page with existing queue entry
            const savedEntry = sessionStorage.getItem('currentQueueEntry');
            if (savedEntry) {
                currentQueueEntry = JSON.parse(savedEntry);
                // Restore queue status view
                document.getElementById('joinForm').classList.add('d-none');
                document.getElementById('queueStatus').classList.remove('d-none');
                initializeSocket();
            }
        });

        // Save queue entry to session storage
        window.addEventListener('beforeunload', () => {
            if (currentQueueEntry) {
                sessionStorage.setItem('currentQueueEntry', JSON.stringify(currentQueueEntry));
            }
        });
    </script>
</body>
</html>