<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <% if (process.env.NODE_ENV === 'production') { %>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <% } %>
  <link rel="stylesheet" href="/css/main.css?v=<%= Date.now() %>">
  <link rel="stylesheet" href="/css/auth-improvements.css?v=<%= Date.now() %>">
  <% if (typeof csrfMeta === 'function') { %>
    <%- csrfMeta() %>
  <% } %>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Inter', sans-serif;
      background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
      background-size: 400% 400%;
      animation: gradientShift 20s ease infinite;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #ffffff;
      position: relative;
    }
    
    @keyframes gradientShift {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }
    
    .login-container {
      background: rgba(255, 255, 255, 0.08);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(74, 144, 226, 0.3);
      padding: 3rem;
      border-radius: 24px;
      box-shadow: 0 25px 60px rgba(16, 33, 62, 0.6);
      width: 100%;
      max-width: 420px;
      margin: 1rem;
      position: relative;
      overflow: hidden;
    }
    
    .login-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 2px;
      background: linear-gradient(90deg, #4a90e2, #7b68ee);
      border-radius: 24px 24px 0 0;
    }
    
    .portal-identifier {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(0, 0, 0, 0.5);
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-size: 0.75rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(74, 144, 226, 0.3);
      color: #4a90e2;
    }
    
    .login-header {
      text-align: center;
      margin-bottom: 2.5rem;
    }
    
    .admin-badge {
      display: inline-block;
      background: linear-gradient(135deg, #4a90e2, #7b68ee);
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-size: 0.75rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      margin-bottom: 1rem;
      box-shadow: 0 4px 15px rgba(74, 144, 226, 0.3);
    }
    
    .login-header h1 {
      background: linear-gradient(135deg, #4a90e2, #7b68ee);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      font-size: 2.2rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
      letter-spacing: -1px;
    }
    
    .login-header p {
      color: rgba(255, 255, 255, 0.75);
      font-size: 1rem;
      font-weight: 400;
    }
    
    .form-group {
      margin-bottom: 1.75rem;
      position: relative;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 0.75rem;
      font-weight: 500;
      color: rgba(255, 255, 255, 0.9);
      font-size: 0.95rem;
    }
    
    .form-group input {
      width: 100%;
      padding: 1rem 1.25rem;
      background: rgba(255, 255, 255, 0.12);
      border: 1px solid rgba(74, 144, 226, 0.25);
      border-radius: 12px;
      font-size: 1rem;
      color: white;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      box-sizing: border-box;
    }
    
    .form-group input::placeholder {
      color: rgba(255, 255, 255, 0.45);
    }
    
    .form-group input:focus {
      outline: none;
      border-color: rgba(74, 144, 226, 0.6);
      background: rgba(255, 255, 255, 0.16);
      box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.12);
      transform: translateY(-1px);
    }
    
    .password-field {
      position: relative;
    }
    
    .password-toggle {
      position: absolute;
      right: 0.75rem;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: rgba(255, 255, 255, 0.6);
      cursor: pointer;
      padding: 0.25rem;
      border-radius: 4px;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }
    
    .password-toggle:hover {
      color: rgba(255, 255, 255, 0.9);
      background: rgba(255, 255, 255, 0.1);
    }
    
    .forgot-password {
      text-align: right;
      margin-top: 0.5rem;
      margin-bottom: 1rem;
    }
    
    .forgot-password a {
      color: rgba(74, 144, 226, 0.8);
      text-decoration: none;
      font-size: 0.85rem;
      transition: all 0.3s ease;
    }
    
    .forgot-password a:hover {
      color: #4a90e2;
      text-decoration: underline;
    }
    
    .btn-login {
      width: 100%;
      padding: 1rem;
      background: linear-gradient(135deg, #4a90e2, #7b68ee);
      color: white;
      border: none;
      border-radius: 12px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: 0 6px 20px rgba(74, 144, 226, 0.35);
      text-transform: uppercase;
      letter-spacing: 0.5px;
      position: relative;
      overflow: hidden;
    }
    
    .btn-login:hover:not(.loading) {
      background: linear-gradient(135deg, #7b68ee, #4a90e2);
      transform: translateY(-2px);
      box-shadow: 0 10px 30px rgba(74, 144, 226, 0.45);
    }
    
    .btn-login:active {
      transform: translateY(0);
    }
    
    .btn-login.loading {
      color: transparent;
      pointer-events: none;
    }
    
    .btn-login.loading::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 20px;
      height: 20px;
      margin: -10px 0 0 -10px;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-top: 2px solid white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .auth-links {
      text-align: center;
      margin-top: 2rem;
      padding-top: 2rem;
      border-top: 1px solid rgba(74, 144, 226, 0.2);
    }
    
    .auth-links a {
      color: #4a90e2;
      text-decoration: none;
      font-size: 0.9rem;
      transition: all 0.3s;
      font-weight: 500;
    }
    
    .auth-links a:hover {
      color: #7b68ee;
      text-decoration: underline;
    }
    
    .auth-links p {
      color: rgba(255, 255, 255, 0.65);
      margin-bottom: 0.75rem;
    }
    
    .logo {
      display: block;
      margin: 0 auto 1.5rem;
      width: 70px;
      height: 70px;
      background: linear-gradient(135deg, #4a90e2, #7b68ee);
      border-radius: 18px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1.75rem;
      font-weight: bold;
      box-shadow: 0 6px 20px rgba(74, 144, 226, 0.35);
      position: relative;
    }
    
    .logo::after {
      content: '⚡';
      position: absolute;
      font-size: 0.8rem;
      top: -5px;
      right: -5px;
      background: #7b68ee;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .security-notice {
      background: rgba(74, 144, 226, 0.1);
      border: 1px solid rgba(74, 144, 226, 0.2);
      border-radius: 10px;
      padding: 1rem;
      margin-bottom: 2rem;
      font-size: 0.85rem;
      color: rgba(255, 255, 255, 0.8);
      text-align: center;
    }
    
    .security-notice strong {
      color: #4a90e2;
    }
    
    /* Enhanced Field Validation */
    .field-feedback {
      position: absolute;
      bottom: -1.25rem;
      left: 0;
      font-size: 0.8rem;
      color: #ef4444;
      opacity: 0;
      transform: translateY(-5px);
      transition: all 0.3s ease;
    }
    
    .field-feedback.show {
      opacity: 1;
      transform: translateY(0);
    }
    
    .field-feedback.success {
      color: #22c55e;
    }
    
    .form-group.has-error input {
      border-color: rgba(239, 68, 68, 0.5);
      background: rgba(239, 68, 68, 0.05);
    }
    
    .form-group.has-success input {
      border-color: rgba(34, 197, 94, 0.5);
      background: rgba(34, 197, 94, 0.05);
    }
    
    /* Mobile responsiveness */
    @media (max-width: 480px) {
      .login-container {
        padding: 2rem 1.5rem;
        margin: 0.5rem;
      }
      
      .login-header h1 {
        font-size: 1.8rem;
      }
      
      .form-group input {
        padding: 0.875rem 1rem;
        font-size: 16px; /* Prevents zoom on iOS */
      }
      
      .btn-login {
        padding: 0.875rem;
      }
      
      .portal-identifier {
        position: static;
        margin-bottom: 1rem;
        text-align: center;
      }
    }
    
    /* Accessibility improvements */
    @media (prefers-reduced-motion: reduce) {
      * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
      }
    }
    
    .btn-login:focus-visible {
      outline: 2px solid #ffffff;
      outline-offset: 2px;
    }
  </style>
</head>
<body>
  <div class="login-container backoffice">
    <div class="portal-identifier backoffice">System Admin</div>
    
    <div class="login-header">
      <div class="logo">BO</div>
      <div class="admin-badge">System Administrator</div>
      <h1>QMS BackOffice</h1>
      <p>Secure access to system management</p>
    </div>
    
    <div class="security-notice">
      <strong>🔒 Secure Zone:</strong> This area is restricted to authorized system administrators only. All access is logged and monitored.
    </div>
    
    <% if (messages.error) { %>
      <div class="alert alert-error">
        <div class="alert-icon">🚨</div>
        <div class="alert-content">
          <div class="alert-title">Access Denied</div>
          <div class="alert-message">
            <% if (messages.error.includes('Invalid credentials')) { %>
              Invalid administrator credentials. Please verify your email and password. Contact your system administrator if you need assistance.
            <% } else if (messages.error.includes('Account not found')) { %>
              Administrator account not found. Please contact your system administrator for access.
            <% } else if (messages.error.includes('Too many attempts')) { %>
              Multiple failed login attempts detected. Access temporarily restricted for security. Please wait before trying again.
            <% } else if (messages.error.includes('Account locked')) { %>
              Your administrator account has been locked for security reasons. Please contact your system administrator.
            <% } else { %>
              <%= messages.error %>
            <% } %>
          </div>
        </div>
      </div>
    <% } %>
    
    <% if (messages.success) { %>
      <div class="alert alert-success">
        <div class="alert-icon">✅</div>
        <div class="alert-content">
          <div class="alert-title">Success</div>
          <div class="alert-message"><%= messages.success %></div>
        </div>
      </div>
    <% } %>
    
    <form action="/backoffice/auth/login" method="POST" id="loginForm" novalidate>
      <% if (typeof csrfInput === 'function') { %>
        <%- csrfInput() %>
      <% } else if (locals.csrfToken) { %>
        <input type="hidden" name="_csrf" value="<%= locals.csrfToken %>">
      <% } %>
      <% if (locals.redirect) { %>
        <input type="hidden" name="redirect" value="<%= redirect %>">
      <% } %>
      
      <div class="form-group" id="emailGroup">
        <label for="email">Administrator Email <span class="sr-only">(required)</span></label>
        <input 
          type="email" 
          id="email" 
          name="email" 
          required 
          placeholder="admin@company.com"
          autocomplete="email"
          aria-describedby="emailFeedback"
        >
        <div class="field-feedback" id="emailFeedback" role="alert" aria-live="polite"></div>
      </div>
      
      <div class="form-group password-field" id="passwordGroup">
        <label for="password">Secure Password <span class="sr-only">(required)</span></label>
        <input 
          type="password" 
          id="password" 
          name="password" 
          required 
          placeholder="Enter your secure password"
          autocomplete="current-password"
          aria-describedby="passwordFeedback"
        >
        <button type="button" class="password-toggle" onclick="togglePassword()" aria-label="Show password">
          👁️
        </button>
        <div class="field-feedback" id="passwordFeedback" role="alert" aria-live="polite"></div>
      </div>
      
      <div class="forgot-password">
        <a href="/backoffice/auth/forgot-password">Forgot your password?</a>
      </div>
      
      <button type="submit" class="btn-login" id="loginButton">
        <span class="btn-text">Access System</span>
      </button>
    </form>
    
    <div class="auth-links">
      <% if (locals.isFirstBackOfficeUser === undefined) { %>
        <p><a href="/backoffice/auth/setup-check">🔧 Check System Setup</a></p>
      <% } %>
      <p style="margin-top: 1rem;"><a href="/">← Back to Main Site</a></p>
    </div>
  </div>

  <script>
    // Enhanced form validation and UX for BackOffice
    const form = document.getElementById('loginForm');
    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    const loginButton = document.getElementById('loginButton');
    
    // Email validation with stricter rules for admin
    function validateEmail(email) {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(email);
    }
    
    // Enhanced validation for admin passwords
    function validatePassword(password) {
      return password.length >= 8; // Stricter requirement for admin
    }
    
    // Show field feedback
    function showFieldFeedback(fieldId, message, isSuccess = false) {
      const group = document.getElementById(fieldId + 'Group');
      const feedback = document.getElementById(fieldId + 'Feedback');
      
      group.classList.remove('has-error', 'has-success');
      group.classList.add(isSuccess ? 'has-success' : 'has-error');
      
      feedback.textContent = message;
      feedback.classList.remove('success');
      if (isSuccess) feedback.classList.add('success');
      feedback.classList.add('show');
    }
    
    // Hide field feedback
    function hideFieldFeedback(fieldId) {
      const group = document.getElementById(fieldId + 'Group');
      const feedback = document.getElementById(fieldId + 'Feedback');
      
      group.classList.remove('has-error', 'has-success');
      feedback.classList.remove('show');
    }
    
    // Real-time email validation
    emailInput.addEventListener('blur', function() {
      const email = this.value.trim();
      if (email && !validateEmail(email)) {
        showFieldFeedback('email', 'Please enter a valid administrator email address');
      } else if (email) {
        hideFieldFeedback('email');
      }
    });
    
    emailInput.addEventListener('input', function() {
      if (this.value.trim() && validateEmail(this.value.trim())) {
        hideFieldFeedback('email');
      }
    });
    
    // Enhanced password validation for admin
    passwordInput.addEventListener('blur', function() {
      const password = this.value;
      if (password && !validatePassword(password)) {
        showFieldFeedback('password', 'Administrator password must be at least 8 characters long');
      } else if (password) {
        hideFieldFeedback('password');
      }
    });
    
    passwordInput.addEventListener('input', function() {
      if (validatePassword(this.value)) {
        hideFieldFeedback('password');
      }
    });
    
    // Form submission with enhanced validation
    form.addEventListener('submit', function(e) {
      const email = emailInput.value.trim();
      const password = passwordInput.value;
      
      let hasErrors = false;
      
      // Validate email
      if (!email) {
        showFieldFeedback('email', 'Administrator email is required');
        hasErrors = true;
      } else if (!validateEmail(email)) {
        showFieldFeedback('email', 'Please enter a valid administrator email address');
        hasErrors = true;
      }
      
      // Validate password
      if (!password) {
        showFieldFeedback('password', 'Password is required');
        hasErrors = true;
      } else if (!validatePassword(password)) {
        showFieldFeedback('password', 'Administrator password must be at least 8 characters long');
        hasErrors = true;
      }
      
      if (hasErrors) {
        e.preventDefault();
        return;
      }
      
      // Show loading state
      loginButton.classList.add('loading');
      loginButton.disabled = true;
      
      // Set timeout to handle slow responses
      setTimeout(() => {
        if (loginButton.classList.contains('loading')) {
          loginButton.classList.remove('loading');
          loginButton.disabled = false;
        }
      }, 15000); // 15 second timeout for admin login
    });
    
    // Password toggle functionality
    function togglePassword() {
      const passwordField = document.getElementById('password');
      const toggleButton = document.querySelector('.password-toggle');
      
      if (passwordField.type === 'password') {
        passwordField.type = 'text';
        toggleButton.innerHTML = '🙈';
        toggleButton.setAttribute('aria-label', 'Hide password');
      } else {
        passwordField.type = 'password';
        toggleButton.innerHTML = '👁️';
        toggleButton.setAttribute('aria-label', 'Show password');
      }
    }
    
    // Auto-focus first input
    document.addEventListener('DOMContentLoaded', function() {
      emailInput.focus();
    });
    
    // Handle browser back button
    window.addEventListener('pageshow', function(event) {
      if (event.persisted) {
        loginButton.classList.remove('loading');
        loginButton.disabled = false;
      }
    });
    
    // Security logging simulation (would be server-side in production)
    form.addEventListener('submit', function() {
      console.log('Admin login attempt logged:', {
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent,
        email: emailInput.value.trim()
      });
    });
  </script>
</body>
</html>