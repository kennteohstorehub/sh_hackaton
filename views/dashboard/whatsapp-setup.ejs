<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #000000 100%);
            min-height: 100vh;
            color: #ffffff;
            line-height: 1.6;
        }
        
        .header {
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 140, 0, 0.3);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header h1 {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-size: 1.5rem;
            font-weight: 700;
            min-width: 200px;
        }
        
        /* Fixed Navigation */
        .nav {
            display: flex;
            gap: 0;
            background: rgba(0, 0, 0, 0.5);
            border-radius: 12px;
            padding: 0.25rem;
            border: 1px solid rgba(255, 140, 0, 0.2);
        }
        
        .nav a {
            text-decoration: none;
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-size: 0.85rem;
            white-space: nowrap;
            text-align: center;
            min-width: 100px; /* Fixed minimum width for all nav items */
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            z-index: 1;
        }
        
        .nav a:hover {
            background: rgba(255, 140, 0, 0.15);
            color: white;
            transform: translateY(-1px);
        }
        
        .nav a.active {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            box-shadow: 0 2px 8px rgba(255, 140, 0, 0.3);
        }
        
        /* User Section */
        .user-section {
            display: flex;
            align-items: center;
            gap: 1rem;
            min-width: 120px; /* Prevent user section from shifting */
        }
        
        .user-menu {
            position: relative;
        }
        
        .user-button {
            background: rgba(255, 140, 0, 0.1);
            border: 1px solid rgba(255, 140, 0, 0.3);
            color: rgba(255, 255, 255, 0.9);
            padding: 0.6rem 1rem;
            border-radius: 8px;
            font-size: 0.85rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .user-button:hover {
            background: rgba(255, 140, 0, 0.2);
            border-color: rgba(255, 140, 0, 0.5);
        }
        
        /* Mobile Responsive */
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 1rem;
                padding: 1rem;
            }
            
            .nav {
                order: 2;
                width: 100%;
                justify-content: center;
                flex-wrap: wrap;
                gap: 0.25rem;
            }
            
            .nav a {
                min-width: auto;
                flex: 1;
                font-size: 0.8rem;
                padding: 0.6rem 0.5rem;
            }
            
            .user-section {
                order: 3;
                justify-content: center;
            }
        }
        
        @media (max-width: 480px) {
            .nav a {
                font-size: 0.75rem;
                padding: 0.5rem 0.25rem;
            }
        }
        
        /* Container */
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        /* Section */
        .section {
            background: rgba(255, 140, 0, 0.1);
            border: 1px solid rgba(255, 140, 0, 0.3);
            padding: 2rem;
            border-radius: 12px;
            margin-bottom: 2rem;
        }
        
        .section h2 {
            margin-bottom: 1.5rem;
            color: rgba(255, 255, 255, 0.9);
            font-weight: 600;
            font-size: 1.3rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .section h2 i {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        /* Status Banner */
        .status-banner {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1.5rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            border: 1px solid;
            backdrop-filter: blur(10px);
        }
        
        .status-banner.connected {
            background: rgba(37, 211, 102, 0.1);
            border-color: rgba(37, 211, 102, 0.3);
            color: #25D366;
        }
        
        .status-banner.waiting {
            background: rgba(255, 193, 7, 0.1);
            border-color: rgba(255, 193, 7, 0.3);
            color: #FFC107;
        }
        
        .status-banner.disconnected {
            background: rgba(244, 67, 54, 0.1);
            border-color: rgba(244, 67, 54, 0.3);
            color: #F44336;
        }
        
        .status-content {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .status-icon {
            font-size: 1.5rem;
        }
        
        .status-text h3 {
            margin: 0;
            font-size: 1.1rem;
            font-weight: 600;
        }
        
        .status-text p {
            margin: 0;
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.7);
        }
        
        /* Buttons */
        .btn {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            text-decoration: none;
            display: inline-block;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            font-size: 0.9rem;
        }
        
        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(255, 140, 0, 0.3);
        }
        
        .btn-secondary {
            background: linear-gradient(135deg, #6c757d, #495057);
        }
        
        .btn-secondary:hover {
            box-shadow: 0 4px 12px rgba(108, 117, 125, 0.3);
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #dc3545, #c82333);
        }
        
        .btn-danger:hover {
            box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
        }
        
        .btn:disabled {
            background: rgba(108, 117, 125, 0.5);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        /* Connection Grid */
        .connection-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }
        
        @media (max-width: 768px) {
            .connection-grid {
                grid-template-columns: 1fr;
            }
        }
        
        /* QR Container */
        .qr-container {
            text-align: center;
            padding: 2rem;
            background: rgba(0, 0, 0, 0.3);
            border: 2px dashed rgba(255, 140, 0, 0.3);
            border-radius: 12px;
            transition: all 0.3s ease;
        }
        
        .qr-container:hover {
            border-color: rgba(255, 140, 0, 0.5);
            background: rgba(0, 0, 0, 0.4);
        }
        
        .qr-code {
            max-width: 220px;
            width: 100%;
            height: auto;
            border-radius: 8px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            background: white;
            padding: 10px;
        }
        
        .qr-placeholder {
            width: 220px;
            height: 220px;
            border: 2px dashed rgba(255, 140, 0, 0.3);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto;
            background: rgba(255, 140, 0, 0.05);
        }
        
        .qr-placeholder i {
            font-size: 3rem;
            color: rgba(255, 140, 0, 0.3);
        }
        
        /* Instructions */
        .instructions {
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 140, 0, 0.2);
            padding: 1.5rem;
            border-radius: 12px;
        }
        
        .instructions h3 {
            margin-bottom: 1rem;
            color: rgba(255, 255, 255, 0.9);
            font-weight: 600;
        }
        
        .instructions ol {
            padding-left: 1.5rem;
            color: rgba(255, 255, 255, 0.8);
        }
        
        .instructions li {
            margin-bottom: 0.5rem;
            line-height: 1.5;
        }
        
        /* Device Info */
        .device-info {
            background: rgba(37, 211, 102, 0.1);
            border: 1px solid rgba(37, 211, 102, 0.2);
            padding: 1.5rem;
            border-radius: 12px;
            margin-top: 1rem;
        }
        
        .device-info h4 {
            margin-bottom: 1rem;
            color: #25D366;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .device-detail {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
            padding: 0.5rem 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .device-detail:last-child {
            border-bottom: none;
        }
        
        .device-detail span:first-child {
            font-weight: 500;
            color: rgba(255, 255, 255, 0.8);
        }
        
        .device-detail span:last-child {
            color: rgba(255, 255, 255, 0.9);
        }
        
        /* Security Warning */
        .security-warning {
            background: rgba(255, 193, 7, 0.1);
            border: 1px solid rgba(255, 193, 7, 0.3);
            padding: 1.5rem;
            border-radius: 12px;
            margin-bottom: 2rem;
        }
        
        .security-warning h4 {
            color: #FFC107;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .security-warning p {
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 0.5rem;
        }
        
        .security-warning ul {
            color: rgba(255, 255, 255, 0.7);
            padding-left: 1.5rem;
        }
        
        .security-warning li {
            margin-bottom: 0.3rem;
        }
        
        /* Loading Animation */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 140, 0, 0.3);
            border-radius: 50%;
            border-top-color: #ff8c00;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* Pulse Animation */
        .pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        
        @keyframes pulse {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: .5;
            }
        }
        
        /* Success Animation */
        .success-animation {
            animation: successPulse 0.6s ease-out;
        }
        
        @keyframes successPulse {
            0% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.05);
            }
            100% {
                transform: scale(1);
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header">
        <div class="header-content">
            <h1>StoreHub Queue Management System</h1>
            <nav class="nav">
                <a href="/dashboard">Dashboard</a>
                <a href="/dashboard/analytics">Analytics</a>
                <a href="/dashboard/whatsapp-setup" class="active">WhatsApp</a>
                <a href="/dashboard/settings">Settings</a>
                <a href="/dashboard/help">Help</a>
            </nav>
            <div class="user-section">
                <div class="user-menu">
                    <a href="/auth/logout" class="user-button">
                        <i class="bi bi-box-arrow-right"></i>
                        Logout
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Page Header -->
        <div class="section">
            <h2><i class="bi bi-whatsapp"></i> WhatsApp Integration Setup</h2>
            <p style="color: rgba(255, 255, 255, 0.7); margin-bottom: 0;">
                Connect your WhatsApp Business account to enable automated customer notifications and queue management.
            </p>
        </div>

        <!-- Security Warning -->
        <div class="security-warning">
            <h4><i class="bi bi-shield-check"></i> Production Ready</h4>
            <p>WhatsApp integration is now in <strong>production mode</strong> and ready for customers:</p>
            <ul>
                <li>✅ Production Mode: All customers who join the queue can receive messages</li>
                <li>📱 WhatsApp only sends to active queue participants</li>
                <li>📊 All message attempts are logged for monitoring</li>
                <li>🔒 Optional: Whitelist feature available for testing or VIP-only events</li>
            </ul>
        </div>

        <!-- WhatsApp Status -->
        <div class="status-banner" id="statusBanner">
            <div class="status-content">
                <div class="status-icon" id="statusIcon">
                    <i class="bi bi-phone-vibrate loading"></i>
                </div>
                <div class="status-text">
                    <h3 id="statusTitle">Connecting to WhatsApp...</h3>
                    <p id="statusMessage">Initializing WhatsApp client and generating QR code</p>
                </div>
            </div>
            <div>
                <button class="btn btn-secondary" onclick="refreshConnection()">
                    <i class="bi bi-arrow-clockwise"></i> Refresh
                </button>
            </div>
        </div>

        <!-- Connection Grid -->
        <div class="connection-grid">
            <!-- QR Code Section -->
            <div class="section">
                <h2><i class="bi bi-qr-code"></i> QR Code Scanner</h2>
                <div class="qr-container" id="qrContainer">
                    <div class="qr-placeholder pulse" id="qrPlaceholder">
                        <i class="bi bi-qr-code"></i>
                    </div>
                    <div id="qrCode" style="display: none;"></div>
                </div>
                <p style="text-align: center; margin-top: 1rem; color: rgba(255, 255, 255, 0.7); font-size: 0.9rem;">
                    QR code will appear here once WhatsApp client is ready
                </p>
            </div>

            <!-- Instructions Section -->
            <div class="section">
                <h2><i class="bi bi-list-ol"></i> Setup Instructions</h2>
                <div class="instructions">
                    <h3>How to Connect:</h3>
                    <ol>
                        <li><strong>Open WhatsApp</strong> on your phone</li>
                        <li><strong>Go to Settings</strong> → <strong>Linked Devices</strong></li>
                        <li><strong>Tap "Link a Device"</strong></li>
                        <li><strong>Scan the QR code</strong> displayed on the left</li>
                        <li><strong>Wait for connection</strong> confirmation</li>
                    </ol>
                </div>
                
                <div style="margin-top: 1.5rem; padding: 1rem; background: rgba(255, 140, 0, 0.1); border-radius: 8px; border: 1px solid rgba(255, 140, 0, 0.2);">
                    <h4 style="margin-bottom: 0.5rem; color: #ff8c00;"><i class="bi bi-lightbulb"></i> Tips:</h4>
                    <ul style="color: rgba(255, 255, 255, 0.8); padding-left: 1.5rem; margin: 0;">
                        <li>Keep your phone connected to the internet</li>
                        <li>Use WhatsApp Business for better features</li>
                        <li>QR code refreshes every 20 seconds for security</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Device Information (Hidden by default) -->
        <div class="device-info" id="deviceInfo" style="display: none;">
            <h4><i class="bi bi-phone"></i> Connected Device Information</h4>
            <div class="device-detail">
                <span>Phone Number:</span>
                <span id="devicePhone">-</span>
            </div>
            <div class="device-detail">
                <span>Device Name:</span>
                <span id="deviceName">-</span>
            </div>
            <div class="device-detail">
                <span>Platform:</span>
                <span id="devicePlatform">-</span>
            </div>
            <div class="device-detail">
                <span>Connected At:</span>
                <span id="deviceConnectedAt">-</span>
            </div>
        </div>

        <!-- Connection Actions -->
        <div class="section">
            <h2><i class="bi bi-gear"></i> Connection Management</h2>
            <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                <button class="btn btn-secondary" onclick="testConnection()" id="testBtn">
                    <i class="bi bi-wifi"></i> Test Connection
                </button>
                <button class="btn btn-danger" onclick="disconnectWhatsApp()" id="disconnectBtn" disabled>
                    <i class="bi bi-power"></i> Disconnect
                </button>
                <button class="btn" onclick="sendTestMessage()" id="testMessageBtn" disabled>
                    <i class="bi bi-chat-dots"></i> Send Test Message
                </button>
            </div>
        </div>
    </div>

    <!-- Socket.IO for real-time updates -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Initialize Socket.IO connection
        const socket = io();
        
        // WhatsApp status management
        let currentStatus = 'connecting';
        
        // Status banner elements
        const statusBanner = document.getElementById('statusBanner');
        const statusIcon = document.getElementById('statusIcon');
        const statusTitle = document.getElementById('statusTitle');
        const statusMessage = document.getElementById('statusMessage');
        
        // QR code elements
        const qrContainer = document.getElementById('qrContainer');
        const qrPlaceholder = document.getElementById('qrPlaceholder');
        const qrCode = document.getElementById('qrCode');
        
        // Device info elements
        const deviceInfo = document.getElementById('deviceInfo');
        const devicePhone = document.getElementById('devicePhone');
        const deviceName = document.getElementById('deviceName');
        const devicePlatform = document.getElementById('devicePlatform');
        const deviceConnectedAt = document.getElementById('deviceConnectedAt');
        
        // Button elements
        const testBtn = document.getElementById('testBtn');
        const disconnectBtn = document.getElementById('disconnectBtn');
        const testMessageBtn = document.getElementById('testMessageBtn');
        
        // Socket event listeners
        socket.on('whatsapp-qr', (data) => {
            console.log('QR code received:', data);
            updateStatus('waiting', 'Scan QR Code', 'Use your phone to scan the QR code below');
            displayQRCode(data.qrDataURL);
        });
        
        socket.on('whatsapp-ready', (data) => {
            console.log('WhatsApp ready:', data);
            updateStatus('connected', 'Connected Successfully!', 'WhatsApp is now connected and ready to send messages');
            hideQRCode();
            showDeviceInfo(data.deviceInfo);
            enableButtons();
        });
        
        socket.on('whatsapp-disconnected', (data) => {
            console.log('WhatsApp disconnected:', data);
            updateStatus('disconnected', 'Disconnected', 'WhatsApp connection has been lost. Please reconnect.');
            hideQRCode();
            hideDeviceInfo();
            disableButtons();
        });
        
        // Update status banner
        function updateStatus(status, title, message) {
            currentStatus = status;
            
            // Remove all status classes
            statusBanner.classList.remove('connected', 'waiting', 'disconnected');
            statusBanner.classList.add(status);
            
            // Update icon
            statusIcon.innerHTML = getStatusIcon(status);
            
            // Update text
            statusTitle.textContent = title;
            statusMessage.textContent = message;
            
            // Add animation
            statusBanner.classList.add('success-animation');
            setTimeout(() => {
                statusBanner.classList.remove('success-animation');
            }, 600);
        }
        
        // Get status icon
        function getStatusIcon(status) {
            switch(status) {
                case 'connected':
                    return '<i class="bi bi-check-circle-fill"></i>';
                case 'waiting':
                    return '<i class="bi bi-qr-code pulse"></i>';
                case 'disconnected':
                    return '<i class="bi bi-x-circle-fill"></i>';
                default:
                    return '<i class="bi bi-phone-vibrate loading"></i>';
            }
        }
        
        // Display QR code
        function displayQRCode(qrDataURL) {
            qrPlaceholder.style.display = 'none';
            qrCode.style.display = 'block';
            qrCode.innerHTML = `<img src="${qrDataURL}" alt="WhatsApp QR Code" class="qr-code">`;
        }
        
        // Hide QR code
        function hideQRCode() {
            qrPlaceholder.style.display = 'flex';
            qrCode.style.display = 'none';
            qrCode.innerHTML = '';
        }
        
        // Show device information
        function showDeviceInfo(info) {
            devicePhone.textContent = info.phoneNumber || 'Unknown';
            deviceName.textContent = info.deviceName || 'Unknown';
            devicePlatform.textContent = info.platform || 'Unknown';
            deviceConnectedAt.textContent = new Date(info.connectedAt).toLocaleString();
            deviceInfo.style.display = 'block';
        }
        
        // Hide device information
        function hideDeviceInfo() {
            deviceInfo.style.display = 'none';
        }
        
        // Enable action buttons
        function enableButtons() {
            disconnectBtn.disabled = false;
            testMessageBtn.disabled = false;
        }
        
        // Disable action buttons
        function disableButtons() {
            disconnectBtn.disabled = true;
            testMessageBtn.disabled = true;
        }
        
        // Action functions
        function refreshConnection() {
            updateStatus('connecting', 'Refreshing Connection...', 'Reinitializing WhatsApp client');
            fetch('/api/whatsapp/refresh', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    console.log('Refresh response:', data);
                })
                .catch(error => {
                    console.error('Refresh error:', error);
                    updateStatus('disconnected', 'Refresh Failed', 'Failed to refresh connection. Please try again.');
                });
        }
        
        function testConnection() {
            testBtn.disabled = true;
            testBtn.innerHTML = '<span class="loading"></span> Testing...';
            
            fetch('/api/whatsapp/status')
                .then(response => response.json())
                .then(data => {
                    console.log('Connection test:', data);
                    alert(`Connection Status: ${data.isConnected ? 'Connected' : 'Disconnected'}`);
                })
                .catch(error => {
                    console.error('Test error:', error);
                    alert('Connection test failed');
                })
                .finally(() => {
                    testBtn.disabled = false;
                    testBtn.innerHTML = '<i class="bi bi-wifi"></i> Test Connection';
                });
        }
        
        function disconnectWhatsApp() {
            if (confirm('Are you sure you want to disconnect WhatsApp? You will need to scan the QR code again to reconnect.')) {
                fetch('/api/whatsapp/disconnect', { method: 'POST' })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Disconnect response:', data);
                        updateStatus('disconnected', 'Disconnected', 'WhatsApp has been disconnected successfully');
                        hideDeviceInfo();
                        disableButtons();
                    })
                    .catch(error => {
                        console.error('Disconnect error:', error);
                        alert('Failed to disconnect WhatsApp');
                    });
            }
        }
        
        function sendTestMessage() {
            const phoneNumber = prompt('Enter phone number to test (e.g., 60123456789):', '60126368832');
            if (!phoneNumber) return;
            
            // Basic validation
            if (!/^\d{10,15}$/.test(phoneNumber.replace(/[\s\+\-]/g, ''))) {
                alert('Please enter a valid phone number');
                return;
            }
            testMessageBtn.disabled = true;
            testMessageBtn.innerHTML = '<span class="loading"></span> Sending...';
            
            fetch('/api/whatsapp/test-message', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({ phoneNumber, message: 'Hello! This is a test message from StoreHub Queue Management System. 🚀' })
            })
            .then(response => response.json())
            .then(data => {
                console.log('Test message response:', data);
                if (data.success) {
                    alert('✅ Test message sent successfully!');
                } else {
                    alert(`❌ Failed to send test message: ${data.error}`);
                }
            })
            .catch(error => {
                console.error('Test message error:', error);
                alert('❌ Failed to send test message');
            })
            .finally(() => {
                testMessageBtn.disabled = false;
                testMessageBtn.innerHTML = '<i class="bi bi-chat-dots"></i> Send Test Message';
            });
        }
        
        // Initial status check
        window.addEventListener('load', () => {
            fetch('/api/whatsapp/status')
                .then(response => response.json())
                .then(data => {
                    if (data.isConnected) {
                        updateStatus('connected', 'Already Connected', 'WhatsApp is connected and ready');
                        if (data.deviceInfo) {
                            showDeviceInfo(data.deviceInfo);
                        }
                        enableButtons();
                    } else {
                        updateStatus('waiting', 'Waiting for Connection', 'Please scan the QR code to connect WhatsApp');
                    }
                })
                .catch(error => {
                    console.error('Status check error:', error);
                    updateStatus('disconnected', 'Connection Error', 'Failed to check WhatsApp status');
                });
        });
    </script>
</body>
</html> 