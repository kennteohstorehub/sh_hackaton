<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="<%= csrfToken %>">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="/css/common-header.css?v=<%= Date.now() %>" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #000000 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            min-height: 100vh;
            color: #ffffff;
            overflow-x: hidden;
        }
        
        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .header {
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 140, 0, 0.3);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header h1 {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-size: 1.5rem;
            font-weight: 700;
            min-width: 200px;
        }
        
        /* Navigation Container */
        .nav-container {
            display: flex;
            align-items: center;
            gap: 1rem;
            flex: 1;
            justify-content: center;
        }
        
        /* View Public Button */
        .btn-view-public {
            background: rgba(255, 140, 0, 0.1);
            border: 1px solid rgba(255, 140, 0, 0.3);
            color: rgba(255, 255, 255, 0.9);
            padding: 0.6rem 1rem;
            border-radius: 8px;
            font-size: 0.85rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
            font-weight: 500;
        }
        
        .btn-view-public:hover {
            background: rgba(255, 140, 0, 0.2);
            border-color: rgba(255, 140, 0, 0.5);
            color: #ffffff;
            transform: translateY(-1px);
        }
        
        /* Mobile Nav Toggle */
        .mobile-nav-toggle {
            display: none;
            background: none;
            border: none;
            cursor: pointer;
            padding: 0.5rem;
            z-index: 1001;
        }
        
        .mobile-nav-toggle span {
            display: block;
            width: 25px;
            height: 3px;
            background: rgba(255, 255, 255, 0.9);
            margin: 5px 0;
            transition: all 0.3s ease;
            border-radius: 2px;
        }
        
        /* Fixed Navigation */
        .nav {
            display: flex;
            gap: 0;
            background: rgba(0, 0, 0, 0.5);
            border-radius: 12px;
            padding: 0.25rem;
            border: 1px solid rgba(255, 140, 0, 0.2);
        }
        
        .nav a {
            text-decoration: none;
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-size: 0.85rem;
            white-space: nowrap;
            text-align: center;
            min-width: 100px; /* Fixed minimum width for all nav items */
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            z-index: 1;
        }
        
        .nav a:hover {
            background: rgba(255, 140, 0, 0.15);
            color: white;
            transform: translateY(-1px);
        }
        
        .nav a.active {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            box-shadow: 0 2px 8px rgba(255, 140, 0, 0.3);
        }
        
        /* User Section */
        .user-section {
            display: flex;
            align-items: center;
            gap: 1rem;
            min-width: 120px; /* Prevent user section from shifting */
        }
        
        .user-menu {
            position: relative;
        }
        
        .user-button {
            background: rgba(255, 140, 0, 0.1);
            border: 1px solid rgba(255, 140, 0, 0.3);
            color: rgba(255, 255, 255, 0.9);
            padding: 0.6rem 1rem;
            border-radius: 8px;
            font-size: 0.85rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }
        
        .user-button:hover {
            background: rgba(255, 140, 0, 0.2);
            border-color: rgba(255, 140, 0, 0.5);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .section {
            background: rgba(255, 140, 0, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 140, 0, 0.3);
            padding: 2.5rem;
            border-radius: 20px;
            margin-bottom: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }
        
        .section:hover {
            transform: translateY(-4px);
            box-shadow: 0 16px 48px rgba(255, 140, 0, 0.2);
            border-color: rgba(255, 140, 0, 0.4);
        }
        
        /* Settings Locked Styles - removed old styles as they're now in new location */
        
        .section.locked {
            position: relative;
            opacity: 0.6;
            pointer-events: none;
        }
        
        .section.locked::after {
            content: '🔒';
            position: absolute;
            top: 1rem;
            right: 1rem;
            font-size: 2rem;
            opacity: 0.5;
        }
        
        .section.locked .form-group input,
        .section.locked .form-group textarea,
        .section.locked .form-group select,
        .section.locked button[type="submit"] {
            cursor: not-allowed;
            opacity: 0.5;
        }
        
        /* Section Header Styles */
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .section-header h2 {
            margin: 0;
        }
        
        /* Lock Indicator Styles */
        .lock-indicator {
            display: none;
            align-items: center;
            gap: 0.5rem;
            color: #ff8c00;
            font-size: 0.9rem;
            background: rgba(255, 140, 0, 0.1);
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
        }
        
        .lock-indicator i {
            font-size: 1.1rem;
        }
        
        /* Updated settings locked banner for new structure */
        .settings-locked-banner {
            display: none;
            align-items: center;
            gap: 2rem;
            background: rgba(255, 140, 0, 0.2);
            border: 2px solid rgba(255, 140, 0, 0.4);
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            backdrop-filter: blur(10px);
        }
        
        .settings-locked-banner .lock-icon {
            font-size: 3rem;
            color: #ff8c00;
        }
        
        .settings-locked-banner .lock-content {
            flex: 1;
        }
        
        .settings-locked-banner h4 {
            color: #ff8c00;
            margin: 0 0 0.5rem 0;
            font-size: 1.5rem;
        }
        
        .settings-locked-banner p {
            margin: 0 0 1rem 0;
            color: rgba(255, 255, 255, 0.9);
        }
        
        .settings-locked-banner .active-queue-info {
            display: flex;
            gap: 0.5rem;
            align-items: center;
            color: rgba(255, 255, 255, 0.8);
        }
        
        .settings-locked-banner .queue-label {
            font-weight: 600;
        }
        
        .settings-locked-banner .queue-name {
            color: #ff8c00;
            font-weight: 700;
        }
        
        .section h2 {
            margin-bottom: 2rem;
            color: #ffffff;
            font-weight: 600;
            font-size: 1.5rem;
        }
        
        .form-group {
            margin-bottom: 2rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.75rem;
            font-weight: 600;
            color: #ffffff;
            font-size: 1rem;
        }
        
        .form-group input, 
        .form-group textarea, 
        .form-group select {
            width: 100%;
            padding: 1rem 1.25rem;
            border: 1px solid rgba(255, 140, 0, 0.3);
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            background: rgba(255, 140, 0, 0.1);
            backdrop-filter: blur(10px);
            color: #ffffff;
            font-family: 'Inter', sans-serif;
        }
        
        .form-group input::placeholder,
        .form-group textarea::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }
        
        .form-group input:focus, 
        .form-group textarea:focus, 
        .form-group select:focus {
            outline: none;
            border-color: rgba(255, 140, 0, 0.6);
            box-shadow: 0 0 0 3px rgba(255, 140, 0, 0.2);
            background: rgba(255, 140, 0, 0.15);
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
        }
        
        .btn {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            padding: 1rem 2rem;
            border: none;
            border-radius: 12px;
            text-decoration: none;
            display: inline-block;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            font-weight: 600;
            font-size: 1rem;
            box-shadow: 0 4px 15px rgba(255, 140, 0, 0.3);
            position: relative;
            overflow: hidden;
            font-family: 'Inter', sans-serif;
        }
        
        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 140, 0, 0.4);
        }
        
        .btn:hover::before {
            left: 100%;
        }
        
        .btn-secondary {
            background: linear-gradient(135deg, #6c757d, #495057);
            box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
        }
        
        .btn-secondary:hover {
            box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
        }
        
        .btn:disabled {
            background: rgba(255, 255, 255, 0.2);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .btn:disabled:hover {
            transform: none;
            box-shadow: none;
        }
        
        /* Feature Toggle (Switch Style) */
        .feature-toggle {
            position: relative;
            display: inline-block;
            width: 70px;
            height: 40px;
        }
        
        .feature-toggle input {
            position: absolute;
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
            border-radius: 40px;
            border: 2px solid rgba(255, 140, 0, 0.4);
        }
        
        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 30px;
            width: 30px;
            left: 5px;
            bottom: 3px;
            background: rgba(255, 255, 255, 0.5);
            transition: all 0.3s ease;
            border-radius: 50%;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        
        .feature-toggle input:checked + .toggle-slider {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            border-color: #ff8c00;
            box-shadow: 0 2px 8px rgba(255, 140, 0, 0.4);
        }
        
        .feature-toggle input:checked + .toggle-slider:before {
            transform: translateX(28px);
            background: white;
        }
        
        .feature-toggle:hover .toggle-slider {
            border-color: #ff8c00;
            background: rgba(255, 140, 0, 0.1);
        }
        
        /* Compact Checkbox (matching new design) */
        .compact-checkbox {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            position: relative;
        }
        
        .compact-checkbox input[type="checkbox"] {
            position: absolute;
            opacity: 0;
            cursor: pointer;
            height: 0;
            width: 0;
        }
        
        .checkbox-custom-compact {
            width: 20px;
            height: 20px;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 140, 0, 0.4);
            border-radius: 4px;
            position: relative;
            transition: all 0.3s ease;
        }
        
        .checkbox-custom-compact::after {
            content: '';
            position: absolute;
            display: none;
            left: 5px;
            top: 2px;
            width: 5px;
            height: 9px;
            border: solid white;
            border-width: 0 2px 2px 0;
            transform: rotate(45deg);
        }
        
        .compact-checkbox input[type="checkbox"]:checked ~ .checkbox-custom-compact {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            border-color: #ff8c00;
        }
        
        .compact-checkbox input[type="checkbox"]:checked ~ .checkbox-custom-compact::after {
            display: block;
        }
        
        .compact-checkbox:hover .checkbox-custom-compact {
            border-color: #ff8c00;
            background: rgba(255, 140, 0, 0.1);
        }
        
        .toggle-group {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }
        
        .toggle-label {
            color: rgba(255, 255, 255, 0.9);
            font-weight: 500;
            font-size: 1rem;
        }
        
        .settings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }
        
        .setting-card {
            background: rgba(255, 140, 0, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 140, 0, 0.2);
            padding: 2rem;
            border-radius: 16px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .setting-card:hover {
            background: rgba(255, 140, 0, 0.1);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 140, 0, 0.2);
            border-color: rgba(255, 140, 0, 0.3);
        }
        
        .setting-card h3 {
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 1rem;
            font-size: 1.2rem;
            font-weight: 600;
        }
        
        .setting-card p {
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 1.5rem;
            line-height: 1.5;
        }
        
        .notification-settings {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        
        .notification-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            background: rgba(255, 140, 0, 0.05);
            border-radius: 12px;
            border: 1px solid rgba(255, 140, 0, 0.2);
        }
        
        .notification-item:hover {
            background: rgba(255, 140, 0, 0.1);
            border-color: rgba(255, 140, 0, 0.3);
        }
        
        
        .notification-info h4 {
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 0.25rem;
            font-size: 1rem;
            font-weight: 600;
        }
        
        .notification-info p {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.9rem;
            margin: 0;
        }
        
        .success-message {
            background: rgba(76, 175, 80, 0.2);
            border: 1px solid rgba(76, 175, 80, 0.4);
            color: rgba(255, 255, 255, 0.9);
            padding: 1rem 1.5rem;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            backdrop-filter: blur(10px);
            display: none;
        }
        
        .error-message {
            background: rgba(244, 67, 54, 0.2);
            border: 1px solid rgba(244, 67, 54, 0.4);
            color: rgba(255, 255, 255, 0.9);
            padding: 1rem 1.5rem;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            backdrop-filter: blur(10px);
            display: none;
        }
        
        .form-help {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.9rem;
            margin-top: 0.5rem;
            line-height: 1.4;
        }
        
        .danger-zone {
            background: rgba(244, 67, 54, 0.1);
            border: 1px solid rgba(244, 67, 54, 0.3);
            border-radius: 16px;
            padding: 2rem;
            margin-top: 2rem;
        }
        
        .danger-zone h3 {
            color: rgba(244, 67, 54, 0.9);
            margin-bottom: 1rem;
            font-size: 1.2rem;
            font-weight: 600;
        }
        
        .danger-zone p {
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 1.5rem;
            line-height: 1.5;
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #dc3545, #c82333);
            box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
        }
        
        .btn-danger:hover {
            box-shadow: 0 8px 25px rgba(220, 53, 69, 0.4);
        }
        
        /* Floating particles animation */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }
        
        .particle {
            position: absolute;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            animation: float 6s ease-in-out infinite;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }
        
        @media (max-width: 768px) {
            .header-content {
                padding: 0 1rem;
            }
            
            .mobile-nav-toggle {
                display: block;
            }
            
            .nav-container {
                display: none;
            }
            
            .user-section {
                display: none;
            }
            
            .container {
                padding: 1rem;
            }
            
            .form-row {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .settings-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .feature-toggle {
                width: 60px;
                height: 34px;
            }
            
            .toggle-slider:before {
                height: 24px;
                width: 24px;
                left: 4px;
                bottom: 3px;
            }
            
            .feature-toggle input:checked + .toggle-slider:before {
                transform: translateX(24px);
            }
            
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
        }
        
        ::-webkit-scrollbar-thumb {
            background: rgba(255, 140, 0, 0.5);
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 140, 0, 0.7);
        }
        
        /* Compact Operating Hours Table */
        .hours-table {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 12px;
            border: 1px solid rgba(255, 140, 0, 0.2);
            overflow: hidden;
        }
        
        .hours-row {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr 1fr;
            align-items: center;
            padding: 0.75rem 1rem;
            border-bottom: 1px solid rgba(255, 140, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .hours-row:last-child {
            border-bottom: none;
        }
        
        .hours-row:not(.hours-header):hover {
            background: rgba(255, 140, 0, 0.05);
        }
        
        .hours-header {
            background: rgba(255, 140, 0, 0.1);
            font-weight: 600;
            color: rgba(255, 255, 255, 0.9);
            font-size: 0.9rem;
        }
        
        .day-col {
            font-weight: 500;
            color: rgba(255, 255, 255, 0.9);
        }
        
        .time-col {
            display: flex;
            justify-content: center;
        }
        
        .time-input {
            background: linear-gradient(135deg, rgba(255, 140, 0, 0.15), rgba(255, 140, 0, 0.08));
            border: 1px solid rgba(255, 140, 0, 0.4);
            border-radius: 8px;
            padding: 0.5rem 0.75rem;
            color: rgba(255, 255, 255, 0.95);
            font-size: 0.85rem;
            font-family: 'Inter', sans-serif;
            font-weight: 500;
            width: 95px;
            text-align: center;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 
                0 2px 4px rgba(0, 0, 0, 0.1),
                inset 0 1px 2px rgba(255, 255, 255, 0.1);
            cursor: pointer;
            position: relative;
        }
        
        .time-input:hover {
            background: linear-gradient(135deg, rgba(255, 140, 0, 0.2), rgba(255, 140, 0, 0.12));
            border-color: rgba(255, 140, 0, 0.6);
            transform: translateY(-1px);
            box-shadow: 
                0 4px 8px rgba(0, 0, 0, 0.15),
                inset 0 1px 2px rgba(255, 255, 255, 0.15);
        }
        
        .time-input:focus {
            outline: none;
            border-color: rgba(255, 140, 0, 0.8);
            background: linear-gradient(135deg, rgba(255, 140, 0, 0.25), rgba(255, 140, 0, 0.15));
            box-shadow: 
                0 4px 12px rgba(255, 140, 0, 0.2),
                inset 0 1px 2px rgba(255, 255, 255, 0.2);
            transform: translateY(-1px);
        }
        
        /* Custom time picker dropdown styling */
        .time-input::-webkit-calendar-picker-indicator {
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23ffffff' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M5 7l3 3 3-3'/%3e%3c/svg%3e");
            background-color: rgba(255, 140, 0, 0.2);
            background-size: 12px 12px;
            background-repeat: no-repeat;
            background-position: center;
            border: 1px solid rgba(255, 140, 0, 0.4);
            border-radius: 6px;
            width: 20px;
            height: 20px;
            cursor: pointer;
            margin-left: 6px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            opacity: 0.8;
        }
        
        .time-input::-webkit-calendar-picker-indicator:hover {
            background-color: rgba(255, 140, 0, 0.4);
            border-color: rgba(255, 140, 0, 0.6);
            transform: scale(1.05);
            opacity: 1;
            box-shadow: 0 2px 8px rgba(255, 140, 0, 0.3);
        }
        
        .time-input:focus::-webkit-calendar-picker-indicator {
            background-color: rgba(255, 140, 0, 0.3);
            border-color: rgba(255, 140, 0, 0.7);
            opacity: 1;
        }
        
        /* Firefox time input styling */
        .time-input::-moz-focus-inner {
            border: none;
        }
        
        /* Custom styling for time picker list */
        .time-input::-webkit-datetime-edit {
            color: rgba(255, 255, 255, 0.95);
        }
        
        .time-input::-webkit-datetime-edit-fields-wrapper {
            padding: 0;
        }
        
        .time-input::-webkit-datetime-edit-hour-field,
        .time-input::-webkit-datetime-edit-minute-field,
        .time-input::-webkit-datetime-edit-ampm-field {
            background: rgba(255, 140, 0, 0.1);
            border-radius: 3px;
            padding: 2px 4px;
            margin: 0 1px;
            color: rgba(255, 255, 255, 0.95);
            transition: all 0.2s ease;
        }
        
        .time-input::-webkit-datetime-edit-hour-field:hover,
        .time-input::-webkit-datetime-edit-minute-field:hover,
        .time-input::-webkit-datetime-edit-ampm-field:hover {
            background: rgba(255, 140, 0, 0.2);
            color: rgba(255, 255, 255, 1);
        }
        
        .time-input::-webkit-datetime-edit-hour-field:focus,
        .time-input::-webkit-datetime-edit-minute-field:focus,
        .time-input::-webkit-datetime-edit-ampm-field:focus {
            background: rgba(255, 140, 0, 0.3);
            color: rgba(255, 255, 255, 1);
            outline: none;
        }
        
        /* Enhanced focus states for individual time components */
        .time-input:focus::-webkit-datetime-edit-hour-field,
        .time-input:focus::-webkit-datetime-edit-minute-field,
        .time-input:focus::-webkit-datetime-edit-ampm-field {
            background: rgba(255, 140, 0, 0.25);
            color: rgba(255, 255, 255, 1);
        }
        
        .status-col {
            display: flex;
            justify-content: center;
        }
        
        .compact-toggle {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            cursor: pointer;
            user-select: none;
            padding: 4px;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        
        .compact-toggle:hover {
            background: rgba(255, 255, 255, 0.05);
        }
        
        .compact-slider {
            position: relative;
            width: 54px;
            height: 30px;
            background: linear-gradient(135deg, rgba(34, 197, 94, 0.9), rgba(34, 197, 94, 0.7));
            border-radius: 30px;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 
                0 4px 12px rgba(34, 197, 94, 0.3),
                inset 0 2px 4px rgba(255, 255, 255, 0.2),
                inset 0 -2px 4px rgba(0, 0, 0, 0.1);
            border: 2px solid rgba(34, 197, 94, 0.6);
            overflow: hidden;
        }
        
        .compact-slider:hover {
            box-shadow: 
                0 6px 18px rgba(34, 197, 94, 0.4),
                inset 0 2px 4px rgba(255, 255, 255, 0.3),
                inset 0 -2px 4px rgba(0, 0, 0, 0.1);
            transform: scale(1.05);
            border-color: rgba(34, 197, 94, 0.8);
        }
        
        .compact-slider:before {
            content: '';
            position: absolute;
            width: 22px;
            height: 22px;
            border-radius: 50%;
            background: linear-gradient(135deg, #ffffff, #f8fafc);
            top: 2px;
            left: 3px;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 
                0 4px 10px rgba(0, 0, 0, 0.2),
                0 2px 6px rgba(0, 0, 0, 0.1),
                inset 0 1px 3px rgba(255, 255, 255, 0.9);
            border: 1px solid rgba(255, 255, 255, 0.8);
        }
        

        
        .compact-toggle input[type="checkbox"] {
            position: absolute;
            opacity: 0;
            cursor: pointer;
            height: 0;
            width: 0;
        }
        
        .compact-toggle .compact-slider {
            width: 20px;
            height: 20px;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 140, 0, 0.4);
            border-radius: 4px;
            position: relative;
            transition: all 0.3s ease;
            display: inline-block;
        }
        
        .compact-toggle .compact-slider::after {
            content: '';
            position: absolute;
            display: none;
            left: 5px;
            top: 2px;
            width: 5px;
            height: 9px;
            border: solid white;
            border-width: 0 2px 2px 0;
            transform: rotate(45deg);
        }
        
        .compact-toggle input[type="checkbox"]:checked + .compact-slider {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            border-color: #ff8c00;
        }
        
        .compact-toggle input[type="checkbox"]:checked + .compact-slider::after {
            display: block;
        }
        
        .compact-toggle:hover .compact-slider {
            border-color: #ff8c00;
            background: rgba(255, 140, 0, 0.1);
        }
        

        

        
        /* Closed row styling */
        .hours-row:has(input[type="checkbox"]:checked) {
            background: rgba(128, 128, 128, 0.1);
            opacity: 0.6;
        }
        
        .hours-row:has(input[type="checkbox"]:checked) .time-input {
            opacity: 0.4;
            pointer-events: none;
        }
        
        .hours-row:has(input[type="checkbox"]:checked) .day-col {
            color: rgba(255, 255, 255, 0.5);
        }
        
        @media (max-width: 768px) {
            .hours-row {
                grid-template-columns: 1fr;
                gap: 0.5rem;
                padding: 1rem;
            }
            
            .hours-header {
                display: none;
            }
            
            .day-col {
                font-weight: 600;
                margin-bottom: 0.5rem;
            }
            
            .time-col {
                justify-content: flex-start;
                margin-bottom: 0.5rem;
            }
            
            .time-input {
                width: 100px;
            }
            
            .status-col {
                justify-content: flex-start;
            }
        }
    </style>
</head>
<body>
    <!-- Floating particles -->
    <div class="particles">
        <div class="particle" style="left: 12%; top: 22%; width: 4px; height: 4px; animation-delay: 0s;"></div>
        <div class="particle" style="left: 22%; top: 78%; width: 6px; height: 6px; animation-delay: 1s;"></div>
        <div class="particle" style="left: 68%; top: 32%; width: 3px; height: 3px; animation-delay: 2s;"></div>
        <div class="particle" style="left: 88%; top: 68%; width: 5px; height: 5px; animation-delay: 3s;"></div>
        <div class="particle" style="left: 38%; top: 12%; width: 4px; height: 4px; animation-delay: 4s;"></div>
        <div class="particle" style="left: 78%; top: 88%; width: 3px; height: 3px; animation-delay: 5s;"></div>
    </div>

    <header class="header">
        <div class="header-content">
            <h1>StoreHub QMS</h1>
            
            <!-- Mobile Hamburger Menu -->
            <button class="mobile-nav-toggle" aria-label="Toggle navigation">
                <span></span>
                <span></span>
                <span></span>
            </button>
            
            <div class="nav-container">
                <% if (typeof queues !== 'undefined' && queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <a href="/queue/<%= activeQueue.id || activeQueue._id %>" class="btn-view-public" target="_blank">
                            <i class="bi bi-eye"></i> View Public
                        </a>
                    <% } %>
                <% } %>
                <nav class="nav">
                    <a href="/dashboard">Dashboard</a>
                    <a href="/dashboard/analytics">Analytics</a>
                    <a href="/dashboard/settings" class="active">Settings</a>
                    <a href="/dashboard/help">Help</a>
                </nav>
            </div>
            <div class="user-section">
                <div class="user-menu">
                    <form action="/auth/logout" method="POST" style="display: inline;">
                        <button type="submit" class="user-button">
                            <i class="bi bi-box-arrow-right"></i>
                            Logout
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </header>

    <div class="container">
        <!-- Settings Locked Banner - shown when queue is operating -->
        <div id="settings-locked-banner" class="settings-locked-banner" style="display: none;">
            <div class="lock-icon">
                <i class="bi bi-lock-fill"></i>
            </div>
            <div class="lock-content">
                <h4>Configuration Locked</h4>
                <p>Settings cannot be changed while the queue is operating. Please stop the queue first to make configuration changes.</p>
                <div class="active-queue-info">
                    <span class="queue-label">Active Queue:</span>
                    <span id="active-queue-name" class="queue-name"></span>
                </div>
            </div>
            <a href="/dashboard" class="btn btn-primary">
                <i class="bi bi-arrow-left"></i> Back to Dashboard
            </a>
        </div>
        
        <!-- Success/Error Messages -->
        <div id="successMessage" class="success-message"></div>
        <div id="errorMessage" class="error-message"></div>

        <!-- Restaurant Information -->
        <div class="section">
            <div class="section-header">
                <h2>🏪 Restaurant Information</h2>
                <div class="lock-indicator">
                    <i class="bi bi-lock-fill"></i>
                    <span>Locked</span>
                </div>
            </div>
            <form id="restaurantForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="restaurantName">Restaurant Name</label>
                        <input type="text" id="restaurantName" name="restaurantName" placeholder="Enter restaurant name" required>
                        <div class="form-help">This will be displayed to customers in notifications</div>
                    </div>
                    <div class="form-group">
                        <label for="restaurantPhone">Phone Number</label>
                        <input type="tel" id="restaurantPhone" name="restaurantPhone" placeholder="+1 (555) 123-4567">
                        <div class="form-help">Used for customer support and notifications</div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="restaurantAddress">Address</label>
                    <textarea id="restaurantAddress" name="restaurantAddress" rows="3" placeholder="123 Main Street, Kuala Lumpur, WP, 50450, Malaysia"></textarea>
                    <div class="form-help">Enter address separated by commas: Street, City, State, Postal Code, Country</div>
                </div>
                
                <!-- Compact Operating Hours -->
                <div class="form-group">
                    <label>Operating Hours</label>
                    <div class="hours-table">
                        <div class="hours-row hours-header">
                            <div class="day-col">Day</div>
                            <div class="time-col">Opening Time</div>
                            <div class="time-col">Closing Time</div>
                            <div class="status-col">Status</div>
                        </div>
                        
                        <div class="hours-row" data-day="monday">
                            <div class="day-col">Monday</div>
                            <div class="time-col">
                                <input type="time" name="businessHours[monday][start]" value="09:00" class="time-input">
                            </div>
                            <div class="time-col">
                                <input type="time" name="businessHours[monday][end]" value="17:00" class="time-input">
                            </div>
                            <div class="status-col">
                                <label class="compact-toggle">
                                    <input type="checkbox" id="monday-closed" name="businessHours[monday][closed]">
                                    <span class="compact-slider"></span>
                                </label>
                            </div>
                        </div>
                        
                        <div class="hours-row" data-day="tuesday">
                            <div class="day-col">Tuesday</div>
                            <div class="time-col">
                                <input type="time" name="businessHours[tuesday][start]" value="09:00" class="time-input">
                            </div>
                            <div class="time-col">
                                <input type="time" name="businessHours[tuesday][end]" value="17:00" class="time-input">
                            </div>
                            <div class="status-col">
                                <label class="compact-toggle">
                                    <input type="checkbox" id="tuesday-closed" name="businessHours[tuesday][closed]">
                                    <span class="compact-slider"></span>
                                </label>
                            </div>
                        </div>
                        
                        <div class="hours-row" data-day="wednesday">
                            <div class="day-col">Wednesday</div>
                            <div class="time-col">
                                <input type="time" name="businessHours[wednesday][start]" value="09:00" class="time-input">
                            </div>
                            <div class="time-col">
                                <input type="time" name="businessHours[wednesday][end]" value="17:00" class="time-input">
                            </div>
                            <div class="status-col">
                                <label class="compact-toggle">
                                    <input type="checkbox" id="wednesday-closed" name="businessHours[wednesday][closed]">
                                    <span class="compact-slider"></span>
                                </label>
                            </div>
                        </div>
                        
                        <div class="hours-row" data-day="thursday">
                            <div class="day-col">Thursday</div>
                            <div class="time-col">
                                <input type="time" name="businessHours[thursday][start]" value="09:00" class="time-input">
                            </div>
                            <div class="time-col">
                                <input type="time" name="businessHours[thursday][end]" value="17:00" class="time-input">
                            </div>
                            <div class="status-col">
                                <label class="compact-toggle">
                                    <input type="checkbox" id="thursday-closed" name="businessHours[thursday][closed]">
                                    <span class="compact-slider"></span>
                                </label>
                            </div>
                        </div>
                        
                        <div class="hours-row" data-day="friday">
                            <div class="day-col">Friday</div>
                            <div class="time-col">
                                <input type="time" name="businessHours[friday][start]" value="09:00" class="time-input">
                            </div>
                            <div class="time-col">
                                <input type="time" name="businessHours[friday][end]" value="17:00" class="time-input">
                            </div>
                            <div class="status-col">
                                <label class="compact-toggle">
                                    <input type="checkbox" id="friday-closed" name="businessHours[friday][closed]">
                                    <span class="compact-slider"></span>
                                </label>
                            </div>
                        </div>
                        
                        <div class="hours-row" data-day="saturday">
                            <div class="day-col">Saturday</div>
                            <div class="time-col">
                                <input type="time" name="businessHours[saturday][start]" value="09:00" class="time-input">
                            </div>
                            <div class="time-col">
                                <input type="time" name="businessHours[saturday][end]" value="17:00" class="time-input">
                            </div>
                            <div class="status-col">
                                <label class="compact-toggle">
                                    <input type="checkbox" id="saturday-closed" name="businessHours[saturday][closed]">
                                    <span class="compact-slider"></span>
                                </label>
                            </div>
                        </div>
                        
                        <div class="hours-row" data-day="sunday">
                            <div class="day-col">Sunday</div>
                            <div class="time-col">
                                <input type="time" name="businessHours[sunday][start]" value="09:00" class="time-input">
                            </div>
                            <div class="time-col">
                                <input type="time" name="businessHours[sunday][end]" value="17:00" class="time-input">
                            </div>
                            <div class="status-col">
                                <label class="compact-toggle">
                                    <input type="checkbox" id="sunday-closed" name="businessHours[sunday][closed]" checked>
                                    <span class="compact-slider"></span>
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="form-help">Configure your business operating hours for each day</div>
                </div>
                
                <button type="submit" class="btn">Save Restaurant Information</button>
            </form>
        </div>

        <!-- Queue Settings -->
        <div class="section">
            <div class="section-header">
                <h2>⚙️ Queue Configuration</h2>
                <div class="lock-indicator">
                    <i class="bi bi-lock-fill"></i>
                    <span>Locked</span>
                </div>
            </div>
            <form id="queueSettingsForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="maxCapacity">Maximum Queue Capacity</label>
                        <input type="number" id="maxCapacity" name="maxCapacity" min="1" max="500" placeholder="50">
                        <div class="form-help">Maximum number of customers that can join the queue</div>
                    </div>
                    <div class="form-group">
                        <label for="avgServiceTime">Average Service Time (minutes)</label>
                        <input type="number" id="avgServiceTime" name="avgServiceTime" min="1" max="180" placeholder="15">
                        <div class="form-help">Used to estimate wait times for customers</div>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="notificationAdvance">Notification Advance Time (minutes)</label>
                        <input type="number" id="notificationAdvance" name="notificationAdvance" min="1" max="60" placeholder="5">
                        <div class="form-help">How many minutes before their turn to notify customers</div>
                    </div>
                    <div class="form-group">
                        <label for="partySizeRegularMax">Maximum Party Size</label>
                        <input type="number" id="partySizeRegularMax" name="partySizeRegularMax" min="1" max="20" placeholder="5" value="<%= merchant?.settings?.partySizeRegularMax || 5 %>">
                        <div class="form-help">Largest group size allowed to join the queue (1-10 recommended, max 20)</div>
                    </div>
                </div>
                
                <button type="submit" class="btn">Save Queue Settings</button>
            </form>
        </div>

        <!-- Notification Settings -->
        <div class="section">
            <div class="section-header">
                <h2>🔔 Notification Preferences</h2>
                <div class="lock-indicator">
                    <i class="bi bi-lock-fill"></i>
                    <span>Locked</span>
                </div>
            </div>
            <div class="notification-settings">
                

                
                <div class="notification-item">
                    <div class="notification-info">
                        <h4>Auto-Notifications</h4>
                        <p>Automatically notify customers when their turn approaches</p>
                    </div>
                    <label class="feature-toggle">
                        <input type="checkbox" id="autoNotifications" checked>
                        <span class="toggle-slider"></span>
                    </label>
                </div>
            </div>
            
            <div style="margin-top: 2rem;">
                <button type="button" class="btn" onclick="saveNotificationSettings()">Save Notification Settings</button>
            </div>
        </div>

        <!-- Message Templates -->
        <div class="section">
            <div class="section-header">
                <h2>💬 Message Templates</h2>
                <div class="lock-indicator">
                    <i class="bi bi-lock-fill"></i>
                    <span>Locked</span>
                </div>
            </div>
            <form id="messageTemplatesForm">
                <div class="form-group">
                    <label for="welcomeMessage">Welcome Message</label>
                    <textarea id="welcomeMessage" name="welcomeMessage" rows="3" placeholder="Welcome to [Restaurant Name]! You've been added to our queue. Your position is #[Position]. Estimated wait time: [WaitTime] minutes."></textarea>
                    <div class="form-help">Sent when a customer joins the queue. Use [Restaurant Name], [Position], [WaitTime] as placeholders.</div>
                </div>
                
                <div class="form-group">
                    <label for="notificationMessage">Ready Notification</label>
                    <textarea id="notificationMessage" name="notificationMessage" rows="3" placeholder="Hi [Customer Name]! Your table at [Restaurant Name] will be ready in approximately [Minutes] minutes. Please be prepared to be seated."></textarea>
                    <div class="form-help">Sent when it's almost the customer's turn. Use [Customer Name], [Restaurant Name], [Minutes] as placeholders.</div>
                </div>
                
                <div class="form-group">
                    <label for="readyMessage">Table Ready Message</label>
                    <textarea id="readyMessage" name="readyMessage" rows="3" placeholder="[Customer Name], your table is ready! Please proceed to the host stand at [Restaurant Name]."></textarea>
                    <div class="form-help">Sent when the customer's table is ready. Use [Customer Name], [Restaurant Name] as placeholders.</div>
                </div>
                
                <button type="submit" class="btn">Save Message Templates</button>
            </form>
        </div>

        <!-- System Settings -->
        <div class="section">
            <div class="section-header">
                <h2>🔧 System Settings</h2>
                <div class="lock-indicator">
                    <i class="bi bi-lock-fill"></i>
                    <span>Locked</span>
                </div>
            </div>
            <div class="settings-grid">
                <div class="setting-card">
                    <h3>Data Retention</h3>
                    <p>Configure how long customer data and analytics are stored</p>
                    <div class="form-group">
                        <label for="dataRetention">Retention Period</label>
                        <select id="dataRetention" name="dataRetention">
                            <option value="30">30 days</option>
                            <option value="90" selected>90 days</option>
                            <option value="180">6 months</option>
                            <option value="365">1 year</option>
                        </select>
                    </div>
                </div>
                

                
                <div class="setting-card">
                    <h3>Analytics</h3>
                    <p>Configure analytics and reporting preferences</p>
                    <div class="toggle-group">
                        <label class="compact-checkbox">
                            <input type="checkbox" id="enableAnalytics" checked>
                            <span class="checkbox-custom-compact"></span>
                        <span class="toggle-label">Enable detailed analytics</span>
                    </div>
                    <div class="toggle-group">
                        <label class="compact-checkbox">
                            <input type="checkbox" id="shareAnonymousData">
                            <span class="checkbox-custom-compact"></span>
                        <span class="toggle-label">Share anonymous usage data</span>
                    </div>
                </div>
            </div>
            
            <div style="margin-top: 2rem;">
                <button type="button" class="btn" onclick="saveSystemSettings()">Save System Settings</button>
            </div>
        </div>

        <!-- Danger Zone -->
        <div class="danger-zone">
            <h3>⚠️ Danger Zone</h3>
            <p>These actions are irreversible. Please proceed with caution.</p>
            <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                <button type="button" class="btn btn-danger" onclick="clearAllData()">Clear All Queue Data</button>
                <button type="button" class="btn btn-danger" onclick="resetSettings()">Reset All Settings</button>
                <button type="button" class="btn btn-danger" onclick="deleteAccount()">Delete Account</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
        
        // CSRF setup for fetch requests
        function createFetchOptions(options = {}) {
            const headers = {
                'Content-Type': 'application/json',
                ...options.headers
            };
            
            if (csrfToken) {
                headers['X-CSRF-Token'] = csrfToken;
            }
            
            return {
                ...options,
                headers
            };
        }
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadBusinessInformation();
            initializeOperationHours();
            
        });
        
        // Initialize operation hours functionality
        function initializeOperationHours() {
            const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
            
            days.forEach(day => {
                const checkbox = document.getElementById(`${day}-closed`);
                if (!checkbox) {
                    console.warn(`Checkbox not found for ${day}-closed`);
                    return;
                }
                
                const dayHoursElement = checkbox.closest('.hours-row');
                if (!dayHoursElement) {
                    console.warn(`Hours row not found for ${day}`);
                    return;
                }
                
                // Set initial state
                updateDayHoursVisual(dayHoursElement, checkbox.checked);
                
                // Add event listener for checkbox changes
                checkbox.addEventListener('change', function() {
                    updateDayHoursVisual(dayHoursElement, this.checked);
                });
            });
        }
        
        // Update visual state of day hours row
        function updateDayHoursVisual(dayHoursElement, isClosed) {
            if (isClosed) {
                dayHoursElement.classList.add('closed');
            } else {
                dayHoursElement.classList.remove('closed');
            }
        }
        
        // Load business information from API
        async function loadBusinessInformation() {
            try {
                const response = await fetch('/api/merchant/profile');
                const data = await response.json();
                
                if (data.success && data.merchant) {
                    const merchant = data.merchant;
                    
                    // Populate form fields with null checks
                    const restaurantNameEl = document.getElementById('restaurantName');
                    const restaurantPhoneEl = document.getElementById('restaurantPhone');
                    const restaurantAddressEl = document.getElementById('restaurantAddress');
                    
                    if (restaurantNameEl) {
                        restaurantNameEl.value = merchant.businessName || 'Demo Restaurant';
                    }
                    if (restaurantPhoneEl) {
                        restaurantPhoneEl.value = merchant.phone || '+1234567890';
                    }
                    
                    // Populate address
                    if (merchant.address && restaurantAddressEl) {
                        const addressText = [
                            merchant.address.street,
                            merchant.address.city,
                            merchant.address.state,
                            merchant.address.zipCode,
                            merchant.address.country
                        ].filter(Boolean).join(', ');
                        restaurantAddressEl.value = addressText;
                    }
                    
                    // Populate business hours
                    if (merchant.businessHours) {
                        const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
                        days.forEach(day => {
                            const dayData = merchant.businessHours[day];
                            if (dayData) {
                                const closedCheckbox = document.getElementById(`${day}-closed`);
                                const startInput = document.querySelector(`input[name="businessHours[${day}][start]"]`);
                                const endInput = document.querySelector(`input[name="businessHours[${day}][end]"]`);
                                
                                if (closedCheckbox) closedCheckbox.checked = dayData.closed || false;
                                if (startInput) startInput.value = dayData.start || '09:00';
                                if (endInput) endInput.value = dayData.end || '18:00';
                            }
                        });
                    }
                    
                    // Update queue settings if available
                    if (merchant.settings) {
                        const maxCapacityEl = document.getElementById('maxCapacity');
                        const avgServiceTimeEl = document.getElementById('avgServiceTime');
                        
                        if (maxCapacityEl) {
                            maxCapacityEl.value = merchant.settings.maxQueueSize || 50;
                        }
                        if (avgServiceTimeEl) {
                            avgServiceTimeEl.value = merchant.settings.notificationInterval || 15;
                        }
                    }
                }
            } catch (error) {
                console.error('Error loading business information:', error);
            }
        }
        
        
        // Handle business form submission
        document.getElementById('restaurantForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const submitBtn = e.target.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            
            try {
                submitBtn.disabled = true;
                submitBtn.textContent = 'Saving...';
                
                // Get form values with null checks
                const restaurantNameEl = document.getElementById('restaurantName');
                const restaurantPhoneEl = document.getElementById('restaurantPhone');
                const restaurantAddressEl = document.getElementById('restaurantAddress');
                
                if (!restaurantNameEl || !restaurantPhoneEl || !restaurantAddressEl) {
                    throw new Error('Required form elements not found');
                }
                
                const restaurantName = restaurantNameEl.value.trim();
                const restaurantPhone = restaurantPhoneEl.value.trim();
                const restaurantAddress = restaurantAddressEl.value.trim();
                
                // Parse business hours with proper error handling
                const businessHours = {};
                const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
                days.forEach(day => {
                    const closedCheckbox = document.getElementById(`${day}-closed`);
                    const startInput = document.querySelector(`input[name="businessHours[${day}][start]"]`);
                    const endInput = document.querySelector(`input[name="businessHours[${day}][end]"]`);
                    
                    if (!closedCheckbox) {
                        console.warn(`Missing closed checkbox for ${day}`);
                    }
                    if (!startInput) {
                        console.warn(`Missing start input for ${day}`);
                    }
                    if (!endInput) {
                        console.warn(`Missing end input for ${day}`);
                    }
                    
                    businessHours[day] = {
                        closed: closedCheckbox ? closedCheckbox.checked : false,
                        start: startInput ? startInput.value : '09:00',
                        end: endInput ? endInput.value : '17:00'
                    };
                });
                
                // Parse address - split by comma if possible
                let addressData = null;
                if (restaurantAddress && restaurantAddress.trim()) {
                    const addressParts = restaurantAddress.split(',').map(part => part.trim());
                    addressData = {
                        street: addressParts[0] || restaurantAddress,
                        city: addressParts[1] || '',
                        state: addressParts[2] || '',
                        zipCode: addressParts[3] || '',
                        country: addressParts[4] || ''
                    };
                }
                
                const businessData = {
                    businessName: restaurantName,
                    phone: restaurantPhone,
                    address: addressData,
                    businessHours: businessHours
                };
                
                const response = await fetch('/api/merchant/profile', createFetchOptions({
                    method: 'PUT',
                    body: JSON.stringify(businessData)
                }));
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('Business information saved successfully!', 'success');
                } else {
                    showAlert('Error: ' + (result.error || 'Failed to save business information'), 'error');
                }
            } catch (error) {
                console.error('Error saving business information:', error);
                showAlert('Error saving business information. Please try again.', 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        });

        // Handle queue settings form submission
        document.getElementById('queueSettingsForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const submitBtn = e.target.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            
            try {
                submitBtn.disabled = true;
                submitBtn.textContent = 'Saving...';
                
                // Get form values with null checks
                const maxCapacityEl = document.getElementById('maxCapacity');
                const avgServiceTimeEl = document.getElementById('avgServiceTime');
                const autoNotificationsEl = document.getElementById('autoNotifications');
                const partySizeRegularMaxEl = document.getElementById('partySizeRegularMax');
                
                if (!maxCapacityEl || !avgServiceTimeEl || !autoNotificationsEl) {
                    throw new Error('Required queue settings form elements not found');
                }
                
                const maxCapacity = maxCapacityEl.value;
                const avgServiceTime = avgServiceTimeEl.value;
                const autoNotifications = autoNotificationsEl.checked;
                const partySizeRegularMax = partySizeRegularMaxEl ? partySizeRegularMaxEl.value : 5;
                
                const settingsData = {
                    partySizeRegularMax: parseInt(partySizeRegularMax) || 5,
                    maxQueueSize: parseInt(maxCapacity) || 50,
                    averageServiceTime: parseInt(avgServiceTime) || 15
                };
                
                const response = await fetch('/api/merchant/settings/operations', createFetchOptions({
                    method: 'PUT',
                    body: JSON.stringify(settingsData)
                }));
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('Queue settings saved successfully!', 'success');
                } else {
                    showAlert('Error: ' + (result.error || 'Failed to save queue settings'), 'error');
                }
            } catch (error) {
                console.error('Error saving queue settings:', error);
                showAlert('Error saving queue settings. Please try again.', 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        });
        
        // Test integrations
        async function testIntegration(platform) {
            if (platform === 'messenger') {
                showAlert('Messenger integration is not available in demo mode', 'warning');
            }
        }
        
        // Show alert messages
        function showAlert(message, type = 'success') {
            const successMessage = document.getElementById('successMessage');
            const errorMessage = document.getElementById('errorMessage');
            
            // Hide both messages first
            successMessage.style.display = 'none';
            errorMessage.style.display = 'none';
            
            // Show the appropriate message
            if (type === 'success') {
                successMessage.textContent = message;
                successMessage.style.display = 'block';
                
                // Auto-hide after 5 seconds
                setTimeout(() => {
                    successMessage.style.display = 'none';
                }, 5000);
            } else {
                errorMessage.textContent = message;
                errorMessage.style.display = 'block';
                
                // Auto-hide after 7 seconds for errors
                setTimeout(() => {
                    errorMessage.style.display = 'none';
                }, 7000);
            }
            
            // Scroll to top to show the message
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
        
        // Handle operating hours toggle functionality
        function initializeOperatingHours() {
            const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
            
            days.forEach(day => {
                const closedCheckbox = document.getElementById(`${day}-closed`);
                const hoursRow = document.querySelector(`[data-day="${day}"]`);
                
                if (closedCheckbox && hoursRow) {
                    // Add event listener for toggle
                    closedCheckbox.addEventListener('change', function() {
                        // The CSS will handle the visual changes automatically via :has() selector
                        console.log(`${day} hours toggle changed:`, this.checked);
                    });
                } else {
                    console.warn(`Missing elements for ${day}: checkbox=${!!closedCheckbox}, row=${!!hoursRow}`);
                }
            });
        }
        
        // Load merchant data and populate form
        async function loadMerchantData() {
            try {
                const response = await fetch('/api/merchant/profile');
                const result = await response.json();
                
                if (result.success && result.merchant) {
                    const merchant = result.merchant;
                    
                    // Populate business information
                    if (merchant.businessName) {
                        document.querySelector('input[name="restaurantName"]').value = merchant.businessName;
                    }
                    if (merchant.phone) {
                        document.querySelector('input[name="restaurantPhone"]').value = merchant.phone;
                    }
                    if (merchant.address?.street) {
                        document.querySelector('input[name="restaurantAddress"]').value = merchant.address.street;
                    }
                    
                    // Populate business hours
                    const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
                    days.forEach(day => {
                        const dayHours = merchant.businessHours?.[day];
                        if (dayHours) {
                            const closedCheckbox = document.getElementById(`${day}-closed`);
                            const startInput = document.querySelector(`input[name="businessHours[${day}][start]"]`);
                            const endInput = document.querySelector(`input[name="businessHours[${day}][end]"]`);
                            const timeInputs = document.getElementById(`${day}-times`);
                            
                            if (closedCheckbox) {
                                closedCheckbox.checked = dayHours.closed || false;
                            }
                            if (startInput && dayHours.start) {
                                startInput.value = dayHours.start;
                            }
                            if (endInput && dayHours.end) {
                                endInput.value = dayHours.end;
                            }
                            if (timeInputs) {
                                timeInputs.style.display = dayHours.closed ? 'none' : 'flex';
                            }
                        }
                    });
                }
            } catch (error) {
                console.error('Error loading merchant data:', error);
            }
        }
        
        // Check queue status and apply locked state if necessary
        async function checkQueueStatus() {
            try {
                const response = await fetch('/api/queue/status');
                const data = await response.json();
                
                if (data.activeQueue && data.activeQueue.acceptingCustomers) {
                    // Queue is operating - lock the settings
                    document.getElementById('settings-locked-banner').style.display = 'flex';
                    document.getElementById('active-queue-name').textContent = data.activeQueue.name;
                    
                    // Add locked class to all sections
                    document.querySelectorAll('.section').forEach(section => {
                        section.classList.add('locked');
                    });
                    
                    // Disable all form inputs
                    document.querySelectorAll('input, select, textarea, button[type="submit"]').forEach(element => {
                        element.disabled = true;
                    });
                    
                    // Show lock indicators
                    document.querySelectorAll('.lock-indicator').forEach(indicator => {
                        indicator.style.display = 'flex';
                    });
                }
            } catch (error) {
                console.error('Error checking queue status:', error);
            }
        }
        
        // Initialize operating hours toggles when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeOperatingHours();
            loadMerchantData();
            checkQueueStatus(); // Check if settings should be locked
        });
    </script>
</body>
</html> 