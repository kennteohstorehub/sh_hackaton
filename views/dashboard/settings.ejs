<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            min-height: 100vh;
            color: #333;
            overflow-x: hidden;
        }
        
        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .header h1 {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-size: 1.8rem;
            font-weight: 700;
            letter-spacing: -0.5px;
        }
        
        .nav {
            display: flex;
            gap: 0.5rem;
        }
        
        .nav a {
            text-decoration: none;
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
            padding: 0.75rem 1.5rem;
            border-radius: 12px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .nav a:hover {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }
        
        .nav a.active {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            box-shadow: 0 8px 25px rgba(255, 140, 0, 0.3);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .section {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 2.5rem;
            border-radius: 20px;
            margin-bottom: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .section:hover {
            transform: translateY(-4px);
            box-shadow: 0 16px 48px rgba(0, 0, 0, 0.15);
        }
        
        .section h2 {
            margin-bottom: 2rem;
            color: rgba(255, 255, 255, 0.9);
            font-weight: 600;
            font-size: 1.5rem;
        }
        
        .form-group {
            margin-bottom: 2rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.75rem;
            font-weight: 600;
            color: rgba(255, 255, 255, 0.9);
            font-size: 1rem;
        }
        
        .form-group input, 
        .form-group textarea, 
        .form-group select {
            width: 100%;
            padding: 1rem 1.25rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            color: rgba(255, 255, 255, 0.9);
            font-family: 'Inter', sans-serif;
        }
        
        .form-group input::placeholder,
        .form-group textarea::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }
        
        .form-group input:focus, 
        .form-group textarea:focus, 
        .form-group select:focus {
            outline: none;
            border-color: rgba(255, 140, 0, 0.6);
            box-shadow: 0 0 0 3px rgba(255, 140, 0, 0.2);
            background: rgba(255, 255, 255, 0.15);
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
        }
        
        .btn {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            padding: 1rem 2rem;
            border: none;
            border-radius: 12px;
            text-decoration: none;
            display: inline-block;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            font-weight: 600;
            font-size: 1rem;
            box-shadow: 0 4px 15px rgba(255, 140, 0, 0.3);
            position: relative;
            overflow: hidden;
            font-family: 'Inter', sans-serif;
        }
        
        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 140, 0, 0.4);
        }
        
        .btn:hover::before {
            left: 100%;
        }
        
        .btn-secondary {
            background: linear-gradient(135deg, #6c757d, #495057);
            box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
        }
        
        .btn-secondary:hover {
            box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
        }
        
        .btn:disabled {
            background: rgba(255, 255, 255, 0.2);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .btn:disabled:hover {
            transform: none;
            box-shadow: none;
        }
        
        .toggle {
            position: relative;
            display: inline-block;
            width: 70px;
            height: 40px;
        }
        
        .toggle input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.2);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border-radius: 40px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 32px;
            width: 32px;
            left: 4px;
            bottom: 3px;
            background: white;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border-radius: 50%;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }
        
        input:checked + .slider {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            border-color: transparent;
            box-shadow: 0 4px 15px rgba(255, 140, 0, 0.3);
        }
        
        input:checked + .slider:before {
            transform: translateX(30px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        }
        
        .toggle-group {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }
        
        .toggle-label {
            color: rgba(255, 255, 255, 0.9);
            font-weight: 500;
            font-size: 1rem;
        }
        
        .settings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }
        
        .setting-card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 2rem;
            border-radius: 16px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .setting-card:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }
        
        .setting-card h3 {
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 1rem;
            font-size: 1.2rem;
            font-weight: 600;
        }
        
        .setting-card p {
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 1.5rem;
            line-height: 1.5;
        }
        
        .notification-settings {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        
        .notification-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .notification-item:hover {
            background: rgba(255, 255, 255, 0.1);
        }
        
        .notification-info h4 {
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 0.25rem;
            font-size: 1rem;
            font-weight: 600;
        }
        
        .notification-info p {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.9rem;
            margin: 0;
        }
        
        .success-message {
            background: rgba(76, 175, 80, 0.2);
            border: 1px solid rgba(76, 175, 80, 0.4);
            color: rgba(255, 255, 255, 0.9);
            padding: 1rem 1.5rem;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            backdrop-filter: blur(10px);
            display: none;
        }
        
        .error-message {
            background: rgba(244, 67, 54, 0.2);
            border: 1px solid rgba(244, 67, 54, 0.4);
            color: rgba(255, 255, 255, 0.9);
            padding: 1rem 1.5rem;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            backdrop-filter: blur(10px);
            display: none;
        }
        
        .form-help {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.9rem;
            margin-top: 0.5rem;
            line-height: 1.4;
        }
        
        .danger-zone {
            background: rgba(244, 67, 54, 0.1);
            border: 1px solid rgba(244, 67, 54, 0.3);
            border-radius: 16px;
            padding: 2rem;
            margin-top: 2rem;
        }
        
        .danger-zone h3 {
            color: rgba(244, 67, 54, 0.9);
            margin-bottom: 1rem;
            font-size: 1.2rem;
            font-weight: 600;
        }
        
        .danger-zone p {
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 1.5rem;
            line-height: 1.5;
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #dc3545, #c82333);
            box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
        }
        
        .btn-danger:hover {
            box-shadow: 0 8px 25px rgba(220, 53, 69, 0.4);
        }
        
        /* Floating particles animation */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }
        
        .particle {
            position: absolute;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            animation: float 6s ease-in-out infinite;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }
        
        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                gap: 1rem;
                padding: 1rem;
            }
            
            .nav {
                flex-wrap: wrap;
                justify-content: center;
                gap: 0.5rem;
            }
            
            .nav a {
                padding: 0.5rem 1rem;
                font-size: 0.9rem;
            }
            
            .container {
                padding: 1rem;
            }
            
            .form-row {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .settings-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .toggle {
                width: 60px;
                height: 34px;
            }
            
            .slider:before {
                height: 26px;
                width: 26px;
                left: 4px;
                bottom: 3px;
            }
            
            input:checked + .slider:before {
                transform: translateX(26px);
            }
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
        }
        
        ::-webkit-scrollbar-thumb {
            background: rgba(255, 140, 0, 0.5);
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 140, 0, 0.7);
        }
    </style>
</head>
<body>
    <!-- Floating particles -->
    <div class="particles">
        <div class="particle" style="left: 12%; top: 22%; width: 4px; height: 4px; animation-delay: 0s;"></div>
        <div class="particle" style="left: 22%; top: 78%; width: 6px; height: 6px; animation-delay: 1s;"></div>
        <div class="particle" style="left: 68%; top: 32%; width: 3px; height: 3px; animation-delay: 2s;"></div>
        <div class="particle" style="left: 88%; top: 68%; width: 5px; height: 5px; animation-delay: 3s;"></div>
        <div class="particle" style="left: 38%; top: 12%; width: 4px; height: 4px; animation-delay: 4s;"></div>
        <div class="particle" style="left: 78%; top: 88%; width: 3px; height: 3px; animation-delay: 5s;"></div>
    </div>

    <header class="header">
        <h1>Smart Queue Manager</h1>
        <nav class="nav">
            <a href="/dashboard">Dashboard</a>
            <a href="/dashboard/whatsapp-setup">WhatsApp</a>
            <a href="/dashboard/analytics">Analytics</a>
            <a href="/dashboard/settings" class="active">Settings</a>
        </nav>
    </header>

    <div class="container">
        <!-- Success/Error Messages -->
        <div id="successMessage" class="success-message"></div>
        <div id="errorMessage" class="error-message"></div>

        <!-- Restaurant Information -->
        <div class="section">
            <h2>🏪 Restaurant Information</h2>
            <form id="restaurantForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="restaurantName">Restaurant Name</label>
                        <input type="text" id="restaurantName" name="restaurantName" placeholder="Enter restaurant name" required>
                        <div class="form-help">This will be displayed to customers in notifications</div>
                    </div>
                    <div class="form-group">
                        <label for="restaurantPhone">Phone Number</label>
                        <input type="tel" id="restaurantPhone" name="restaurantPhone" placeholder="+1 (555) 123-4567">
                        <div class="form-help">Used for customer support and notifications</div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="restaurantAddress">Address</label>
                    <textarea id="restaurantAddress" name="restaurantAddress" rows="3" placeholder="Enter full restaurant address"></textarea>
                    <div class="form-help">Complete address including city, state, and postal code</div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="operatingHours">Operating Hours</label>
                        <input type="text" id="operatingHours" name="operatingHours" placeholder="Mon-Sun: 9:00 AM - 10:00 PM">
                        <div class="form-help">Display format for customer information</div>
                    </div>
                    <div class="form-group">
                        <label for="cuisine">Cuisine Type</label>
                        <select id="cuisine" name="cuisine">
                            <option value="">Select cuisine type</option>
                            <option value="american">American</option>
                            <option value="italian">Italian</option>
                            <option value="chinese">Chinese</option>
                            <option value="mexican">Mexican</option>
                            <option value="indian">Indian</option>
                            <option value="japanese">Japanese</option>
                            <option value="thai">Thai</option>
                            <option value="mediterranean">Mediterranean</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                </div>
                
                <button type="submit" class="btn">Save Restaurant Information</button>
            </form>
        </div>

        <!-- Queue Settings -->
        <div class="section">
            <h2>⚙️ Queue Configuration</h2>
            <form id="queueSettingsForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="maxCapacity">Maximum Queue Capacity</label>
                        <input type="number" id="maxCapacity" name="maxCapacity" min="1" max="500" placeholder="50">
                        <div class="form-help">Maximum number of customers that can join the queue</div>
                    </div>
                    <div class="form-group">
                        <label for="avgServiceTime">Average Service Time (minutes)</label>
                        <input type="number" id="avgServiceTime" name="avgServiceTime" min="1" max="180" placeholder="15">
                        <div class="form-help">Used to estimate wait times for customers</div>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="notificationAdvance">Notification Advance Time (minutes)</label>
                        <input type="number" id="notificationAdvance" name="notificationAdvance" min="1" max="60" placeholder="5">
                        <div class="form-help">How many minutes before their turn to notify customers</div>
                    </div>
                    <div class="form-group">
                        <label for="maxPartySize">Maximum Party Size</label>
                        <input type="number" id="maxPartySize" name="maxPartySize" min="1" max="20" placeholder="8">
                        <div class="form-help">Largest group size allowed to join the queue</div>
                    </div>
                </div>
                
                <button type="submit" class="btn">Save Queue Settings</button>
            </form>
        </div>

        <!-- Notification Settings -->
        <div class="section">
            <h2>🔔 Notification Preferences</h2>
            <div class="notification-settings">
                <div class="notification-item">
                    <div class="notification-info">
                        <h4>WhatsApp Notifications</h4>
                        <p>Send queue updates via WhatsApp messages</p>
                    </div>
                    <label class="toggle">
                        <input type="checkbox" id="whatsappNotifications" checked>
                        <span class="slider"></span>
                    </label>
                </div>
                
                <div class="notification-item">
                    <div class="notification-info">
                        <h4>SMS Notifications</h4>
                        <p>Send queue updates via SMS text messages</p>
                    </div>
                    <label class="toggle">
                        <input type="checkbox" id="smsNotifications">
                        <span class="slider"></span>
                    </label>
                </div>
                
                <div class="notification-item">
                    <div class="notification-info">
                        <h4>Email Notifications</h4>
                        <p>Send queue updates via email</p>
                    </div>
                    <label class="toggle">
                        <input type="checkbox" id="emailNotifications">
                        <span class="slider"></span>
                    </label>
                </div>
                
                <div class="notification-item">
                    <div class="notification-info">
                        <h4>Auto-Notifications</h4>
                        <p>Automatically notify customers when their turn approaches</p>
                    </div>
                    <label class="toggle">
                        <input type="checkbox" id="autoNotifications" checked>
                        <span class="slider"></span>
                    </label>
                </div>
            </div>
            
            <div style="margin-top: 2rem;">
                <button type="button" class="btn" onclick="saveNotificationSettings()">Save Notification Settings</button>
            </div>
        </div>

        <!-- Message Templates -->
        <div class="section">
            <h2>💬 Message Templates</h2>
            <form id="messageTemplatesForm">
                <div class="form-group">
                    <label for="welcomeMessage">Welcome Message</label>
                    <textarea id="welcomeMessage" name="welcomeMessage" rows="3" placeholder="Welcome to [Restaurant Name]! You've been added to our queue. Your position is #[Position]. Estimated wait time: [WaitTime] minutes."></textarea>
                    <div class="form-help">Sent when a customer joins the queue. Use [Restaurant Name], [Position], [WaitTime] as placeholders.</div>
                </div>
                
                <div class="form-group">
                    <label for="notificationMessage">Ready Notification</label>
                    <textarea id="notificationMessage" name="notificationMessage" rows="3" placeholder="Hi [Customer Name]! Your table at [Restaurant Name] will be ready in approximately [Minutes] minutes. Please be prepared to be seated."></textarea>
                    <div class="form-help">Sent when it's almost the customer's turn. Use [Customer Name], [Restaurant Name], [Minutes] as placeholders.</div>
                </div>
                
                <div class="form-group">
                    <label for="readyMessage">Table Ready Message</label>
                    <textarea id="readyMessage" name="readyMessage" rows="3" placeholder="[Customer Name], your table is ready! Please proceed to the host stand at [Restaurant Name]."></textarea>
                    <div class="form-help">Sent when the customer's table is ready. Use [Customer Name], [Restaurant Name] as placeholders.</div>
                </div>
                
                <button type="submit" class="btn">Save Message Templates</button>
            </form>
        </div>

        <!-- System Settings -->
        <div class="section">
            <h2>🔧 System Settings</h2>
            <div class="settings-grid">
                <div class="setting-card">
                    <h3>Data Retention</h3>
                    <p>Configure how long customer data and analytics are stored</p>
                    <div class="form-group">
                        <label for="dataRetention">Retention Period</label>
                        <select id="dataRetention" name="dataRetention">
                            <option value="30">30 days</option>
                            <option value="90" selected>90 days</option>
                            <option value="180">6 months</option>
                            <option value="365">1 year</option>
                        </select>
                    </div>
                </div>
                
                <div class="setting-card">
                    <h3>Time Zone</h3>
                    <p>Set your restaurant's local time zone for accurate scheduling</p>
                    <div class="form-group">
                        <label for="timezone">Time Zone</label>
                        <select id="timezone" name="timezone">
                            <option value="America/New_York">Eastern Time (ET)</option>
                            <option value="America/Chicago">Central Time (CT)</option>
                            <option value="America/Denver">Mountain Time (MT)</option>
                            <option value="America/Los_Angeles">Pacific Time (PT)</option>
                            <option value="America/Anchorage">Alaska Time (AKT)</option>
                            <option value="Pacific/Honolulu">Hawaii Time (HST)</option>
                        </select>
                    </div>
                </div>
                
                <div class="setting-card">
                    <h3>Language</h3>
                    <p>Choose the language for customer communications</p>
                    <div class="form-group">
                        <label for="language">Default Language</label>
                        <select id="language" name="language">
                            <option value="en" selected>English</option>
                            <option value="es">Spanish</option>
                            <option value="fr">French</option>
                            <option value="de">German</option>
                            <option value="it">Italian</option>
                            <option value="pt">Portuguese</option>
                        </select>
                    </div>
                </div>
                
                <div class="setting-card">
                    <h3>Analytics</h3>
                    <p>Configure analytics and reporting preferences</p>
                    <div class="toggle-group">
                        <label class="toggle">
                            <input type="checkbox" id="enableAnalytics" checked>
                            <span class="slider"></span>
                        </label>
                        <span class="toggle-label">Enable detailed analytics</span>
                    </div>
                    <div class="toggle-group">
                        <label class="toggle">
                            <input type="checkbox" id="shareAnonymousData">
                            <span class="slider"></span>
                        </label>
                        <span class="toggle-label">Share anonymous usage data</span>
                    </div>
                </div>
            </div>
            
            <div style="margin-top: 2rem;">
                <button type="button" class="btn" onclick="saveSystemSettings()">Save System Settings</button>
            </div>
        </div>

        <!-- Danger Zone -->
        <div class="danger-zone">
            <h3>⚠️ Danger Zone</h3>
            <p>These actions are irreversible. Please proceed with caution.</p>
            <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                <button type="button" class="btn btn-danger" onclick="clearAllData()">Clear All Queue Data</button>
                <button type="button" class="btn btn-danger" onclick="resetSettings()">Reset All Settings</button>
                <button type="button" class="btn btn-danger" onclick="deleteAccount()">Delete Account</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let whatsappDeviceInfo = null;
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadBusinessInformation();
            checkWhatsAppStatus();
            initializeOperationHours();
            
            // Check WhatsApp status every 30 seconds
            setInterval(checkWhatsAppStatus, 30000);
        });
        
        // Initialize operation hours functionality
        function initializeOperationHours() {
            const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
            
            days.forEach(day => {
                const checkbox = document.getElementById(`${day}Closed`);
                const dayHoursElement = checkbox.closest('.day-hours');
                
                // Set initial state
                updateDayHoursVisual(dayHoursElement, checkbox.checked);
                
                // Add event listener for checkbox changes
                checkbox.addEventListener('change', function() {
                    updateDayHoursVisual(dayHoursElement, this.checked);
                });
            });
        }
        
        // Update visual state of day hours row
        function updateDayHoursVisual(dayHoursElement, isClosed) {
            if (isClosed) {
                dayHoursElement.classList.add('closed');
            } else {
                dayHoursElement.classList.remove('closed');
            }
        }
        
        // Load business information from API
        async function loadBusinessInformation() {
            try {
                const response = await fetch('/api/merchant/profile');
                const data = await response.json();
                
                if (data.success && data.merchant) {
                    const merchant = data.merchant;
                    
                    // Populate form fields
                    document.getElementById('restaurantName').value = merchant.businessName || 'Demo Restaurant';
                    document.getElementById('restaurantPhone').value = merchant.phone || '+1234567890';
                    
                    // Populate address
                    if (merchant.address) {
                        const addressText = [
                            merchant.address.street,
                            merchant.address.city,
                            merchant.address.state,
                            merchant.address.zipCode,
                            merchant.address.country
                        ].filter(Boolean).join(', ');
                        document.getElementById('restaurantAddress').value = addressText;
                    }
                    
                    // Populate business hours
                    if (merchant.businessHours) {
                        const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
                        days.forEach(day => {
                            const dayData = merchant.businessHours[day];
                            if (dayData) {
                                const closedCheckbox = document.getElementById(`${day}Closed`);
                                const startInput = document.getElementById(`${day}Start`);
                                const endInput = document.getElementById(`${day}End`);
                                
                                if (closedCheckbox) closedCheckbox.checked = dayData.closed || false;
                                if (startInput) startInput.value = dayData.start || '09:00';
                                if (endInput) endInput.value = dayData.end || '18:00';
                            }
                        });
                    }
                    
                    // Update queue settings if available
                    if (merchant.settings) {
                        document.getElementById('maxCapacity').value = merchant.settings.maxQueueSize || 50;
                        document.getElementById('avgServiceTime').value = merchant.settings.notificationInterval || 15;
                    }
                }
            } catch (error) {
                console.error('Error loading business information:', error);
            }
        }
        
        // Check WhatsApp status and update phone number
        async function checkWhatsAppStatus() {
            try {
                const response = await fetch('/api/whatsapp/status');
                const data = await response.json();
                
                const statusElement = document.getElementById('whatsappStatus');
                const messageElement = document.getElementById('whatsappMessage');
                const phoneElement = document.getElementById('whatsappPhoneNumber');
                const phoneInput = document.getElementById('restaurantPhone');
                const phoneSyncInfo = document.getElementById('phoneSyncInfo');
                const phoneSyncText = document.getElementById('phoneSyncText');
                
                if (data.isReady && data.deviceInfo) {
                    // WhatsApp is connected
                    whatsappDeviceInfo = data.deviceInfo;
                    const devicePhone = data.deviceInfo.phoneNumber || 'Unknown';
                    
                    statusElement.textContent = '🟢 WhatsApp Integration';
                    messageElement.textContent = `WhatsApp is connected and ready for customer notifications.`;
                    phoneElement.textContent = devicePhone;
                    
                    // Update phone input with WhatsApp device number
                    phoneInput.value = devicePhone.startsWith('+') ? devicePhone : `+${devicePhone}`;
                    phoneSyncInfo.style.display = 'block';
                    phoneSyncText.innerHTML = '<span class="sync-icon">✅</span>Automatically synced with connected WhatsApp device';
                    phoneSyncInfo.style.backgroundColor = '#d4edda';
                    phoneSyncInfo.style.borderColor = '#c3e6cb';
                    phoneSyncInfo.style.color = '#155724';
                    
                } else if (data.status === 'waiting_for_scan') {
                    // QR code is ready to scan
                    statusElement.textContent = '🟡 WhatsApp Integration';
                    messageElement.textContent = 'QR code is ready - scan to connect WhatsApp for customer notifications.';
                    phoneElement.textContent = 'Not connected';
                    
                    phoneInput.value = '+1234567890'; // Default value
                    phoneSyncInfo.style.display = 'block';
                    phoneSyncText.innerHTML = '<span class="sync-icon">⚠️</span>Connect WhatsApp to automatically sync phone number';
                    phoneSyncInfo.style.backgroundColor = '#fff3cd';
                    phoneSyncInfo.style.borderColor = '#ffeaa7';
                    phoneSyncInfo.style.color = '#856404';
                    
                } else {
                    // WhatsApp is not connected
                    statusElement.textContent = '🔴 WhatsApp Integration';
                    messageElement.textContent = 'WhatsApp is not connected. Connect to enable automatic customer notifications.';
                    phoneElement.textContent = 'Not connected';
                    
                    phoneInput.value = '+1234567890'; // Default value
                    phoneSyncInfo.style.display = 'block';
                    phoneSyncText.innerHTML = '<span class="sync-icon">❌</span>Connect WhatsApp to automatically sync phone number';
                    phoneSyncInfo.style.backgroundColor = '#f8d7da';
                    phoneSyncInfo.style.borderColor = '#f5c6cb';
                    phoneSyncInfo.style.color = '#721c24';
                }
            } catch (error) {
                console.error('Error checking WhatsApp status:', error);
                
                // Show error state
                document.getElementById('whatsappStatus').textContent = '❓ WhatsApp Integration';
                document.getElementById('whatsappMessage').textContent = 'Unable to check WhatsApp connection status.';
                document.getElementById('whatsappPhoneNumber').textContent = 'Status unknown';
                
                const phoneSyncInfo = document.getElementById('phoneSyncInfo');
                const phoneSyncText = document.getElementById('phoneSyncText');
                phoneSyncInfo.style.display = 'block';
                phoneSyncText.innerHTML = '<span class="sync-icon">❓</span>Unable to check WhatsApp connection';
                phoneSyncInfo.style.backgroundColor = '#f8d7da';
                phoneSyncInfo.style.borderColor = '#f5c6cb';
                phoneSyncInfo.style.color = '#721c24';
            }
        }
        
        // Handle business form submission
        document.getElementById('restaurantForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const saveBtn = document.querySelector('.btn');
            const originalText = saveBtn.textContent;
            
            try {
                saveBtn.disabled = true;
                saveBtn.textContent = 'Saving...';
                
                const formData = new FormData(e.target);
                
                // Parse address
                const addressText = formData.get('restaurantAddress');
                const address = addressText ? { street: addressText } : null;
                
                // Parse business hours
                const businessHours = {};
                const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
                days.forEach(day => {
                    const closed = document.getElementById(`${day}Closed`).checked;
                    const start = document.getElementById(`${day}Start`).value;
                    const end = document.getElementById(`${day}End`).value;
                    
                    businessHours[day] = {
                        closed: closed,
                        start: start,
                        end: end
                    };
                });
                
                const businessData = {
                    businessName: formData.get('restaurantName'),
                    phone: formData.get('restaurantPhone'),
                    address: address,
                    businessHours: businessHours
                };
                
                const response = await fetch('/api/merchant/profile', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(businessData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Show success message
                    showAlert('Business information saved successfully!', 'success');
                } else {
                    showAlert('Error saving business information: ' + (result.error || 'Unknown error'), 'danger');
                }
            } catch (error) {
                console.error('Error saving business information:', error);
                showAlert('Error saving business information. Please try again.', 'danger');
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = originalText;
            }
        });

        // Handle queue settings form submission
        document.getElementById('queueSettingsForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const settings = Object.fromEntries(formData);
            
            // Convert checkboxes to boolean
            settings.autoNotifications = document.getElementById('autoNotifications').checked;
            
            try {
                const response = await fetch('/api/merchant/profile', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        settings: {
                            maxQueueSize: parseInt(settings.maxCapacity),
                            notificationInterval: parseInt(settings.avgServiceTime),
                            autoNotifications: settings.autoNotifications
                        }
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('Queue settings saved successfully!', 'success');
                } else {
                    showAlert('Error saving queue settings: ' + (result.error || 'Unknown error'), 'danger');
                }
            } catch (error) {
                console.error('Error saving queue settings:', error);
                showAlert('Error saving queue settings. Please try again.', 'danger');
            }
        });
        
        // Test integrations
        async function testIntegration(platform) {
            if (platform === 'whatsapp') {
                try {
                    const response = await fetch('/api/test/whatsapp', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            phoneNumber: whatsappDeviceInfo?.phoneNumber || '+1234567890',
                            message: 'Test message from Smart Queue Manager - WhatsApp integration is working!',
                            merchantId: '507f1f77bcf86cd799439011'
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showAlert('WhatsApp test message sent successfully!', 'success');
                    } else {
                        showAlert('WhatsApp test failed: ' + (result.error || 'Unknown error'), 'warning');
                    }
                } catch (error) {
                    console.error('Error testing WhatsApp:', error);
                    showAlert('WhatsApp integration test completed (simulation mode)', 'warning');
                }
            } else if (platform === 'messenger') {
                showAlert('Messenger integration is not available in demo mode', 'warning');
            }
        }
        
        // Show alert messages
        function showAlert(message, type = 'success') {
            // Remove existing alerts
            const existingAlerts = document.querySelectorAll('.alert');
            existingAlerts.forEach(alert => alert.remove());
            
            // Create new alert
            const alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            alert.textContent = message;
            
            // Insert at the top of the container
            const container = document.querySelector('.container');
            container.insertBefore(alert, container.firstChild);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (alert.parentNode) {
                    alert.remove();
                }
            }, 5000);
        }
    </script>
</body>
</html> 