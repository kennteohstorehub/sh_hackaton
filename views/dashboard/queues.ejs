<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f8f9fa; color: #333; }
        .header { background: white; padding: 1rem 2rem; box-shadow: 0 2px 4px rgba(0,0,0,0.1); display: flex; justify-content: space-between; align-items: center; }
        .header h1 { color: rgb(255, 140, 0); font-size: 1.5rem; }
        .nav { display: flex; gap: 1rem; }
        .nav a { text-decoration: none; color: #666; padding: 0.5rem 1rem; border-radius: 5px; transition: all 0.3s; }
        .nav a:hover, .nav a.active { background: rgb(255, 140, 0); color: white; }
        .container { max-width: 1200px; margin: 2rem auto; padding: 0 2rem; }
        .section { background: white; padding: 2rem; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-bottom: 2rem; }
        .section h2 { margin-bottom: 1.5rem; color: #333; display: flex; justify-content: space-between; align-items: center; }
        .btn { background: rgb(255, 140, 0); color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 5px; text-decoration: none; display: inline-block; cursor: pointer; transition: background 0.3s; }
        .btn:hover { background: rgb(230, 126, 0); }
        .btn-success { background: #28a745; }
        .btn-success:hover { background: #218838; }
        .btn-sm { padding: 0.5rem 1rem; font-size: 0.8rem; }
        .queue-list { display: grid; gap: 1rem; }
        .queue-item { border: 1px solid #e9ecef; border-radius: 8px; padding: 1.5rem; background: #f8f9fa; }
        .queue-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem; }
        .queue-title { font-size: 1.2rem; font-weight: 600; color: #333; }
        .queue-status { padding: 0.25rem 0.75rem; border-radius: 20px; font-size: 0.8rem; font-weight: 500; }
        .status-active { background: #d4edda; color: #155724; }
        .status-inactive { background: #f8d7da; color: #721c24; }
        .queue-stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; margin-bottom: 1rem; }
        .stat { text-align: center; }
        .stat-number { font-size: 1.5rem; font-weight: bold; color: rgb(255, 140, 0); }
        .stat-label { font-size: 0.8rem; color: #666; }
        .queue-actions { display: flex; gap: 0.5rem; flex-wrap: wrap; }
        .empty-state { text-align: center; padding: 3rem; color: #666; }
        .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; }
        .modal-content { background: white; margin: 5% auto; padding: 2rem; border-radius: 10px; max-width: 500px; width: 90%; }
        .modal-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; }
        .close { font-size: 1.5rem; cursor: pointer; color: #666; }
        .form-group { margin-bottom: 1rem; }
        .form-group label { display: block; margin-bottom: 0.5rem; font-weight: 500; }
        .form-group input, .form-group textarea { width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 5px; font-size: 1rem; }
        .form-row { display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; }
    </style>
</head>
<body>
    <header class="header">
        <h1>Smart Queue Manager</h1>
        <nav class="nav">
            <a href="/dashboard">Dashboard</a>
            <a href="/dashboard/queues" class="active">Queues</a>
            <a href="/dashboard/whatsapp-setup">WhatsApp</a>
            <a href="/dashboard/analytics">Analytics</a>
            <a href="/dashboard/settings">Settings</a>
        </nav>
    </header>

    <div class="container">
        <div class="section">
            <h2>
                Queue Management
                <button class="btn btn-success" onclick="showCreateModal()">+ New Queue</button>
            </h2>
            <p>Manage your queues and monitor customer flow in real-time.</p>
        </div>

        <div class="section">
            <h2>Your Queues</h2>
            <% if (queues.length === 0) { %>
                <div class="empty-state">
                    <h3>No queues created yet</h3>
                    <p>Create your first queue to start managing customer flow</p>
                    <button class="btn" onclick="showCreateModal()">Create Your First Queue</button>
                </div>
            <% } else { %>
                <div class="queue-list">
                    <% queues.forEach(queue => { %>
                        <div class="queue-item">
                            <div class="queue-header">
                                <div class="queue-title"><%= queue.name %></div>
                                <div class="queue-status <%= queue.isActive ? 'status-active' : 'status-inactive' %>">
                                    <%= queue.isActive ? 'Active' : 'Inactive' %>
                                </div>
                            </div>
                            <% if (queue.description) { %>
                                <p style="margin-bottom: 1rem; color: #666;"><%= queue.description %></p>
                            <% } %>
                            <div class="queue-stats">
                                <div class="stat">
                                    <div class="stat-number"><%= queue.currentLength %></div>
                                    <div class="stat-label">Waiting</div>
                                </div>
                                <div class="stat">
                                    <div class="stat-number"><%= queue.maxCapacity %></div>
                                    <div class="stat-label">Capacity</div>
                                </div>
                                <div class="stat">
                                    <div class="stat-number"><%= queue.averageServiceTime %></div>
                                    <div class="stat-label">Avg Service (min)</div>
                                </div>
                                <div class="stat">
                                    <div class="stat-number"><%= queue.nextPosition %></div>
                                    <div class="stat-label">Next Position</div>
                                </div>
                            </div>
                            <div class="queue-actions">
                                <% if (queue.currentLength > 0) { %>
                                    <button class="btn btn-sm btn-primary" onclick="callNext('<%= queue._id %>')">
                                        <i class="bi bi-telephone"></i> Call Next (<%= queue.currentLength %> waiting)
                                    </button>
                                <% } else { %>
                                    <button class="btn btn-sm" disabled style="opacity: 0.5;">
                                        <i class="bi bi-telephone"></i> No customers waiting
                                    </button>
                                <% } %>
                                <button class="btn btn-sm btn-success" onclick="addCustomer('<%= queue._id %>')">
                                    <i class="bi bi-person-plus"></i> Add Customer
                                </button>
                                <button class="btn btn-sm btn-info" onclick="showQRCode('<%= queue._id %>', '<%= queue.name %>')">
                                    <i class="bi bi-qr-code"></i> Show QR Code
                                </button>
                                <button class="btn btn-sm <%= queue.isActive ? 'btn-warning' : 'btn-secondary' %>" onclick="toggleQueue('<%= queue._id %>', <%= queue.isActive %>)">
                                    <% if (queue.isActive) { %>
                                        <i class="bi bi-pause-fill"></i>
                                    <% } else { %>
                                        <i class="bi bi-play-fill"></i>
                                    <% } %>
                                    <%= queue.isActive ? 'Deactivate' : 'Activate' %>
                                </button>
                            </div>
                        </div>
                    <% }); %>
                </div>
            <% } %>
        </div>
    </div>

    <div id="createModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Create New Queue</h3>
                <span class="close" onclick="hideCreateModal()">&times;</span>
            </div>
            <form id="createQueueForm">
                <div class="form-group">
                    <label for="queueName">Queue Name *</label>
                    <input type="text" id="queueName" name="name" required placeholder="e.g., Main Dining, Takeout Orders">
                </div>
                <div class="form-group">
                    <label for="queueDescription">Description</label>
                    <textarea id="queueDescription" name="description" rows="3" placeholder="Brief description of this queue"></textarea>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="maxCapacity">Max Capacity *</label>
                        <input type="number" id="maxCapacity" name="maxCapacity" required min="1" max="1000" value="50">
                    </div>
                    <div class="form-group">
                        <label for="averageServiceTime">Avg Service Time (min) *</label>
                        <input type="number" id="averageServiceTime" name="averageServiceTime" required min="1" max="300" value="15">
                    </div>
                </div>
                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 1.5rem;">
                    <button type="button" class="btn" style="background: #6c757d;" onclick="hideCreateModal()">Cancel</button>
                    <button type="submit" class="btn btn-success">Create Queue</button>
                </div>
            </form>
        </div>
    </div>

    <div id="qrModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="qrModalTitle">Queue QR Code</h3>
                <span class="close" onclick="hideQRModal()">&times;</span>
            </div>
            <div style="text-align: center;">
                <p style="margin-bottom: 1rem; color: #666;">Customers can scan this QR code to view queue information and contact you via WhatsApp or Messenger</p>
                <div id="qrCodeContainer" style="margin: 1rem 0;">
                    <div style="padding: 2rem; color: #666;">Loading QR code...</div>
                </div>
                <div id="queueUrl" style="margin: 1rem 0; padding: 1rem; background: #f8f9fa; border-radius: 5px; font-family: monospace; word-break: break-all; font-size: 0.9rem;"></div>
                <div style="display: flex; gap: 1rem; justify-content: center; margin-top: 1.5rem;">
                    <button class="btn" onclick="downloadQR()">Download QR Code</button>
                    <button class="btn" onclick="copyQueueUrl()">Copy URL</button>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        socket.emit('join-merchant-room', '507f1f77bcf86cd799439011');
        
        // Real-time queue updates without full page reload
        socket.on('queue-updated', (data) => {
            console.log('Queue updated:', data);
            updateQueueDisplay(data);
        });
        
        function updateQueueDisplay(data) {
            if (data.queueId) {
                // Find the queue item in the DOM
                const queueItems = document.querySelectorAll('.queue-item');
                queueItems.forEach(item => {
                    const buttons = item.querySelectorAll('button[onclick*="' + data.queueId + '"]');
                    if (buttons.length > 0) {
                        // This is the queue we need to update
                        updateQueueStats(item, data);
                    }
                });
            } else {
                // Full reload as fallback
                location.reload();
            }
        }
        
        function updateQueueStats(queueElement, data) {
            // Update waiting count
            const waitingElement = queueElement.querySelector('.stat-number');
            if (waitingElement && data.queue) {
                waitingElement.textContent = data.queue.currentLength || 0;
            }
            
            // Update call next button
            const callNextButton = queueElement.querySelector('button[onclick*="callNext"]');
            if (callNextButton && data.queue) {
                const waitingCount = data.queue.currentLength || 0;
                if (waitingCount > 0) {
                    callNextButton.innerHTML = '<i class="bi bi-telephone"></i> Call Next (' + waitingCount + ' waiting)';
                    callNextButton.disabled = false;
                    callNextButton.style.opacity = '1';
                } else {
                    callNextButton.innerHTML = '<i class="bi bi-telephone"></i> No customers waiting';
                    callNextButton.disabled = true;
                    callNextButton.style.opacity = '0.5';
                }
            }
        }
        
        function showCreateModal() { document.getElementById('createModal').style.display = 'block'; }
        function hideCreateModal() { document.getElementById('createModal').style.display = 'none'; document.getElementById('createQueueForm').reset(); }
        
        document.getElementById('createQueueForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const queueData = Object.fromEntries(formData);
            try {
                const response = await fetch('/api/queue', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(queueData) });
                const result = await response.json();
                if (result.success) { hideCreateModal(); location.reload(); } else { alert(result.error || 'Failed to create queue'); }
            } catch (error) { console.error('Error creating queue:', error); alert('Error creating queue'); }
        });
        
        async function callNext(queueId) {
            // Show loading state
            const button = event.target;
            const originalText = button.innerHTML;
            button.innerHTML = '<i class="bi bi-hourglass-split"></i> Calling...';
            button.disabled = true;
            
            try {
                const response = await fetch(`/api/queue/${queueId}/call-next`, { method: 'POST', headers: { 'Content-Type': 'application/json' } });
                const result = await response.json();
                
                if (result.success) { 
                    // Show success message with customer details
                    const customer = result.customer;
                    alert(`✅ Successfully called: ${customer.customerName}\n📞 Phone: ${customer.customerPhone}\n🎫 Position: ${customer.position}\n⏰ Called at: ${new Date(customer.calledAt).toLocaleTimeString()}`);
                    
                    // Real-time update will be handled by socket listener
                    // No need to reload the page 
                } else { 
                    alert(`❌ ${result.error || 'No customers waiting in queue'}`); 
                    button.innerHTML = originalText;
                    button.disabled = false;
                }
            } catch (error) { 
                console.error('Error calling next customer:', error); 
                alert('❌ Network error: Unable to call next customer. Please check your connection and try again.'); 
                button.innerHTML = originalText;
                button.disabled = false;
            }
        }
        
        async function addCustomer(queueId) {
            const customerName = prompt('Enter customer name:');
            if (!customerName) return;
            const customerPhone = '+1' + Math.floor(Math.random() * 9000000000 + 1000000000);
            try {
                const response = await fetch('/api/customer/join', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ queueId, customerName, customerPhone, serviceType: 'General Service', platform: 'web' }) });
                const result = await response.json();
                if (result.success) { alert(`${customerName} added to queue at position ${result.customer.position}`); } else { alert(result.error || 'Failed to add customer'); }
            } catch (error) { console.error('Error adding customer:', error); alert('Error adding customer'); }
        }
        
        async function toggleQueue(queueId, isActive) {
            try {
                const response = await fetch(`/api/queue/${queueId}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ isActive: !isActive }) });
                const result = await response.json();
                if (result.success) { location.reload(); } else { alert(result.error || 'Failed to update queue'); }
            } catch (error) { console.error('Error updating queue:', error); alert('Error updating queue'); }
        }
        
        let currentQRData = null;
        
        async function showQRCode(queueId, queueName) {
            document.getElementById('qrModalTitle').textContent = `QR Code - ${queueName}`;
            document.getElementById('qrModal').style.display = 'block';
            document.getElementById('qrCodeContainer').innerHTML = '<div style="padding: 2rem; color: #666;">Loading QR code...</div>';
            
            try {
                const response = await fetch(`/api/queue/${queueId}/qr`);
                const result = await response.json();
                
                if (result.success) {
                    currentQRData = result;
                    document.getElementById('qrCodeContainer').innerHTML = `<img src="${result.qrCode}" alt="Queue QR Code" style="max-width: 256px; border: 1px solid #ddd; border-radius: 8px;">`;
                    document.getElementById('queueUrl').textContent = result.queueUrl;
                } else {
                    document.getElementById('qrCodeContainer').innerHTML = '<div style="padding: 2rem; color: #dc3545;">Failed to generate QR code</div>';
                }
            } catch (error) {
                console.error('Error generating QR code:', error);
                document.getElementById('qrCodeContainer').innerHTML = '<div style="padding: 2rem; color: #dc3545;">Error generating QR code</div>';
            }
        }
        
        function hideQRModal() {
            document.getElementById('qrModal').style.display = 'none';
            currentQRData = null;
        }
        
        function downloadQR() {
            if (!currentQRData) return;
            
            const link = document.createElement('a');
            link.download = `queue-qr-${Date.now()}.png`;
            link.href = currentQRData.qrCode;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        
        async function copyQueueUrl() {
            if (!currentQRData) return;
            
            try {
                await navigator.clipboard.writeText(currentQRData.queueUrl);
                alert('Queue URL copied to clipboard!');
            } catch (error) {
                console.error('Failed to copy URL:', error);
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = currentQRData.queueUrl;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                alert('Queue URL copied to clipboard!');
            }
        }
        
        window.onclick = function(event) { 
            const createModal = document.getElementById('createModal'); 
            const qrModal = document.getElementById('qrModal');
            if (event.target === createModal) { hideCreateModal(); }
            if (event.target === qrModal) { hideQRModal(); }
        }
    </script>
</body>
</html> 