<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #000000 100%);
            min-height: 100vh;
            color: #ffffff;
            line-height: 1.6;
        }
        
        /* Header */
        .header {
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 140, 0, 0.3);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header h1 {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-size: 1.5rem;
            font-weight: 700;
        }
        
        .nav {
            display: flex;
            gap: 0.5rem;
        }
        
        .nav a {
            text-decoration: none;
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
            padding: 0.75rem 1.25rem;
            border-radius: 8px;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 140, 0, 0.2);
            font-size: 0.9rem;
        }
        
        .nav a:hover {
            background: rgba(255, 140, 0, 0.1);
            color: white;
            border-color: rgba(255, 140, 0, 0.4);
        }
        
        .nav a.active {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            border-color: transparent;
        }
        
        /* Container */
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        /* Status Banner */
        .status-banner {
            background: rgba(37, 211, 102, 0.1);
            border: 1px solid rgba(37, 211, 102, 0.3);
            border-radius: 12px;
            padding: 1rem 1.5rem;
            margin-bottom: 2rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .status-banner.disconnected {
            background: rgba(244, 67, 54, 0.1);
            border-color: rgba(244, 67, 54, 0.3);
        }
        
        .status-icon {
            font-size: 1.2rem;
            color: #25D366;
        }
        
        .status-text h6 {
            margin: 0 0 0.25rem 0;
            font-size: 0.9rem;
            font-weight: 600;
        }
        
        .status-text p {
            margin: 0;
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.7);
        }
        
        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .stat-card {
            background: rgba(255, 140, 0, 0.1);
            border: 1px solid rgba(255, 140, 0, 0.3);
            padding: 1.5rem;
            border-radius: 12px;
            text-align: center;
            transition: all 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-2px);
            border-color: rgba(255, 140, 0, 0.5);
        }
        
        .stat-number {
            font-size: 2.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.5rem;
        }
        
        .stat-label {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
            font-weight: 500;
        }
        
        /* Section */
        .section {
            background: rgba(255, 140, 0, 0.1);
            border: 1px solid rgba(255, 140, 0, 0.3);
            padding: 2rem;
            border-radius: 12px;
            margin-bottom: 2rem;
        }
        
        .section h2 {
            margin-bottom: 1.5rem;
            color: rgba(255, 255, 255, 0.9);
            font-weight: 600;
            font-size: 1.3rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        /* Buttons */
        .btn {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            text-decoration: none;
            display: inline-block;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            font-size: 0.9rem;
        }
        
        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(255, 140, 0, 0.3);
        }
        
        .btn-secondary {
            background: linear-gradient(135deg, #6c757d, #495057);
        }
        
        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.8rem;
        }
        
        /* Tabs */
        .tabs-container {
            background: rgba(255, 140, 0, 0.1);
            border: 1px solid rgba(255, 140, 0, 0.3);
            border-radius: 12px;
            margin-bottom: 2rem;
            overflow: hidden;
        }
        
        .tabs-header {
            display: flex;
            background: rgba(0, 0, 0, 0.3);
            border-bottom: 1px solid rgba(255, 140, 0, 0.3);
        }
        
        .tab-button {
            flex: 1;
            padding: 1rem 1.5rem;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            color: rgba(255, 255, 255, 0.7);
            transition: all 0.3s ease;
            border-bottom: 2px solid transparent;
        }
        
        .tab-button.active {
            color: white;
            background: rgba(255, 140, 0, 0.2);
            border-bottom-color: #ff8c00;
        }
        
        .tab-button:hover:not(.active) {
            background: rgba(255, 140, 0, 0.1);
            color: rgba(255, 255, 255, 0.9);
        }
        
        .tab-content {
            display: none;
            padding: 2rem;
        }
        
        .tab-content.active {
            display: block;
        }
        
        /* Queue Section */
        .queue-section {
            border: 1px solid rgba(255, 140, 0, 0.3);
            border-radius: 12px;
            background: rgba(0, 0, 0, 0.3);
            overflow: hidden;
        }
        
        .queue-header {
            background: rgba(255, 140, 0, 0.1);
            padding: 2rem;
            border-bottom: 1px solid rgba(255, 140, 0, 0.3);
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 2rem;
        }
        
        .queue-title h3 {
            margin: 0 0 0.5rem 0;
            color: rgba(255, 255, 255, 0.9);
            font-size: 1.4rem;
            font-weight: 600;
        }
        
        .queue-description {
            margin: 0;
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }
        
        .queue-summary {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 1rem;
        }
        
        .queue-stats {
            display: flex;
            gap: 1.5rem;
        }
        
        .stat-item {
            text-align: center;
            padding: 0.75rem;
            background: rgba(255, 140, 0, 0.2);
            border-radius: 8px;
            min-width: 80px;
        }
        
        .stat-item .number {
            font-size: 1.5rem;
            font-weight: 700;
            color: #ff8c00;
            margin-bottom: 0.25rem;
        }
        
        .stat-item .label {
            font-size: 0.75rem;
            color: rgba(255, 255, 255, 0.8);
        }
        
        /* Customer List */
        .customer-list {
            padding: 1.5rem;
        }
        
        .customer-list-header {
            display: grid;
            grid-template-columns: 60px 1fr 120px 80px 80px 1fr 120px;
            gap: 1rem;
            padding: 1rem;
            background: rgba(255, 140, 0, 0.1);
            border-radius: 8px;
            margin-bottom: 1rem;
            font-weight: 600;
            font-size: 0.85rem;
            color: rgba(255, 255, 255, 0.9);
        }
        
        .customer-row {
            display: grid;
            grid-template-columns: 60px 1fr 120px 80px 80px 1fr 120px;
            gap: 1rem;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 140, 0, 0.2);
            background: rgba(255, 140, 0, 0.05);
        }
        
        .customer-row:hover {
            background: rgba(255, 140, 0, 0.1);
            border-color: rgba(255, 140, 0, 0.4);
        }
        
        .customer-row.next-customer {
            border-color: #ff8c00;
            background: rgba(255, 140, 0, 0.15);
        }
        
        .customer-row.notified-customer {
            border-color: #25D366;
            background: rgba(37, 211, 102, 0.1);
        }
        
        .position {
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 1.1rem;
            color: #ff8c00;
            position: relative;
        }
        
        .next-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #ff8c00;
            color: white;
            font-size: 0.6rem;
            padding: 0.2rem 0.4rem;
            border-radius: 4px;
            font-weight: 600;
        }
        
        .customer-name {
            font-weight: 600;
            color: rgba(255, 255, 255, 0.9);
        }
        
        .phone, .party-size, .wait-time {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }
        
        .special-requests {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.85rem;
        }
        
        .special-requests-text {
            background: rgba(255, 140, 0, 0.2);
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
        }
        
        .no-requests {
            color: rgba(255, 255, 255, 0.5);
        }
        
        .actions {
            display: flex;
            gap: 0.5rem;
        }
        
        .btn-action {
            padding: 0.4rem 0.8rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.8rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .btn-notify {
            background: #ff8c00;
            color: white;
        }
        
        .btn-seated {
            background: #25D366;
            color: white;
        }
        
        .btn-select {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        
        .btn-action:hover {
            transform: translateY(-1px);
            opacity: 0.9;
        }
        
        /* No Customers */
        .no-customers {
            text-align: center;
            padding: 3rem 2rem;
            color: rgba(255, 255, 255, 0.7);
        }
        
        .empty-queue-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
        
        .no-customers h4 {
            margin-bottom: 0.5rem;
            color: rgba(255, 255, 255, 0.8);
        }
        
        /* Indicators */
        .updating-indicator {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 140, 0, 0.9);
            color: white;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            font-size: 0.85rem;
            font-weight: 500;
            opacity: 0;
            transform: translateY(-20px);
            transition: all 0.3s ease;
            z-index: 1000;
        }
        
        .updating-indicator.show {
            opacity: 1;
            transform: translateY(0);
        }
        
        .connection-status {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-size: 0.8rem;
            font-weight: 500;
            z-index: 1000;
        }
        
        .connection-status.connected {
            background: rgba(37, 211, 102, 0.9);
            color: white;
        }
        
        .connection-status.disconnected {
            background: rgba(244, 67, 54, 0.9);
            color: white;
        }
        
        .connection-status.connecting {
            background: rgba(255, 140, 0, 0.9);
            color: white;
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }
            
            .header-content {
                padding: 0 1rem;
            }
            
            .nav {
                gap: 0.25rem;
            }
            
            .nav a {
                padding: 0.5rem 0.75rem;
                font-size: 0.8rem;
            }
            
            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 1rem;
            }
            
            .queue-header {
                flex-direction: column;
                gap: 1rem;
            }
            
            .queue-stats {
                flex-direction: row;
                justify-content: center;
            }
            
            .customer-list-header,
            .customer-row {
                grid-template-columns: 50px 1fr 80px 100px;
                gap: 0.5rem;
                font-size: 0.8rem;
            }
            
            .customer-list-header span:nth-child(3),
            .customer-list-header span:nth-child(5),
            .customer-list-header span:nth-child(6),
            .customer-row .phone,
            .customer-row .wait-time,
            .customer-row .special-requests {
                display: none;
            }
        }
        
        /* Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: rgba(0, 0, 0, 0.3);
        }
        
        ::-webkit-scrollbar-thumb {
            background: rgba(255, 140, 0, 0.5);
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 140, 0, 0.7);
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header">
        <div class="header-content">
            <h1>Smart Queue Manager</h1>
            <nav class="nav">
                <a href="/dashboard" class="active">Dashboard</a>
                <a href="/dashboard/analytics">Analytics</a>
                <a href="/dashboard/settings">Settings</a>
                <a href="/dashboard/whatsapp-setup">WhatsApp</a>
            </nav>
        </div>
    </div>

    <div class="container">
        <!-- WhatsApp Status Banner -->
        <div class="status-banner" id="whatsapp-status">
            <div class="status-icon">
                <i class="fab fa-whatsapp"></i>
            </div>
            <div class="status-text">
                <h6>WhatsApp Integration</h6>
                <p>Checking connection status...</p>
            </div>
        </div>

        <!-- Stats Grid -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="totalWaitingCount"><%= stats.totalWaiting %></div>
                <div class="stat-label">Customers Waiting</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="averageWaitTime"><%= stats.averageWaitTime %></div>
                <div class="stat-label">Avg Wait Time (min)</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= stats.totalServed %></div>
                <div class="stat-label">Served Today</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= stats.totalQueues %></div>
                <div class="stat-label">Active Queues</div>
            </div>
        </div>

        <!-- Queue Management Tabs -->
        <div class="tabs-container">
            <div class="tabs-header">
                <button class="tab-button active" onclick="showTab('active-queue')">Active Queue</button>
                <button class="tab-button" onclick="showTab('seated-customers')">Seated Customers</button>
            </div>

            <!-- Active Queue Tab -->
            <div id="active-queue" class="tab-content active">
                <% if (queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <div class="queue-section">
                            <div class="queue-header">
                                <div class="queue-title">
                                    <h3><%= activeQueue.name %></h3>
                                    <p class="queue-description"><%= activeQueue.description || 'Main restaurant queue' %></p>
                                </div>
                                <div class="queue-summary">
                                    <div class="queue-stats">
                                        <div class="stat-item">
                                            <div class="number"><%= waitingCustomers.filter(c => c.status === 'waiting').length %></div>
                                            <div class="label">Waiting</div>
                                        </div>
                                        <div class="stat-item">
                                            <div class="number"><%= Math.round((waitingCustomers.filter(c => c.status === 'waiting').reduce((total, c) => total + Math.floor((new Date() - new Date(c.joinedAt)) / (1000 * 60)), 0) / Math.max(waitingCustomers.filter(c => c.status === 'waiting').length, 1)) || 0) %></div>
                                            <div class="label">Avg Wait</div>
                                        </div>
                                    </div>
                                    <a href="/queue/<%= activeQueue._id %>" class="btn btn-sm">View Public</a>
                                </div>
                            </div>
                            
                            <% if (waitingCustomers.length > 0) { %>
                                <div class="customer-list">
                                    <div class="customer-list-header">
                                        <span>#</span>
                                        <span>Customer</span>
                                        <span>Phone</span>
                                        <span>Party</span>
                                        <span>Wait</span>
                                        <span>Special Requests</span>
                                        <span>Actions</span>
                                    </div>
                                    
                                    <% waitingCustomers.forEach((customer, index) => { %>
                                        <% const waitMinutes = Math.floor((new Date() - new Date(customer.joinedAt)) / (1000 * 60)); %>
                                        <div class="customer-row <%= customer.status === 'called' ? 'notified-customer' : (index === 0 && customer.status === 'waiting' ? 'next-customer' : '') %>">
                                            <div class="position">
                                                <%= customer.position %>
                                                <% if (index === 0 && customer.status === 'waiting') { %>
                                                    <div class="next-badge">NEXT</div>
                                                <% } %>
                                            </div>
                                            <div class="customer-name"><%= customer.customerName %></div>
                                            <div class="phone"><%= customer.phoneNumber %></div>
                                            <div class="party-size"><%= customer.partySize %></div>
                                            <div class="wait-time"><%= waitMinutes %> min</div>
                                            <div class="special-requests">
                                                <% if (customer.specialRequests && customer.specialRequests.trim()) { %>
                                                    <span class="special-requests-text" title="<%= customer.specialRequests %>">
                                                        <%= customer.specialRequests.length > 30 ? customer.specialRequests.substring(0, 30) + '...' : customer.specialRequests %>
                                                    </span>
                                                <% } else { %>
                                                    <span class="no-requests">-</span>
                                                <% } %>
                                            </div>
                                            <div class="actions">
                                                <% if (customer.status === 'called') { %>
                                                    <button class="btn-action btn-seated" onclick="markAsSeated('<%= activeQueue._id %>', '<%= customer.customerId %>')">Seated</button>
                                                <% } else if (index === 0) { %>
                                                    <button class="btn-action btn-notify" onclick="notifyNext('<%= activeQueue._id %>')">Notify</button>
                                                <% } else { %>
                                                    <button class="btn-action btn-select" onclick="selectCustomer('<%= activeQueue._id %>', '<%= customer.customerId %>')">Select</button>
                                                <% } %>
                                            </div>
                                        </div>
                                    <% }); %>
                                </div>
                            <% } else { %>
                                <div class="no-customers">
                                    <div class="empty-queue-icon">🍽️</div>
                                    <h4>No customers in queue</h4>
                                    <p>Your restaurant is ready to welcome the next customer!</p>
                                </div>
                            <% } %>
                        </div>
                    <% } %>
                <% } %>
            </div>
            
            <!-- Seated Customers Tab -->
            <div id="seated-customers" class="tab-content">
                <% if (queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <% const seatedCustomers = activeQueue.entries.filter(entry => entry.status === 'seated').sort((a, b) => new Date(b.seatedAt) - new Date(a.seatedAt)); %>
                        
                        <% if (seatedCustomers.length > 0) { %>
                            <div class="customer-list">
                                <div class="customer-list-header">
                                    <span>Table</span>
                                    <span>Customer</span>
                                    <span>Phone</span>
                                    <span>Party</span>
                                    <span>Seated Time</span>
                                    <span>Special Requests</span>
                                    <span>Actions</span>
                                </div>
                                
                                <% seatedCustomers.forEach((customer) => { %>
                                    <% const seatedMinutes = Math.floor((new Date() - new Date(customer.seatedAt)) / (1000 * 60)); %>
                                    <div class="customer-row seated-customer-row">
                                        <div class="position">T<%= customer.tableNumber || '-' %></div>
                                        <div class="customer-name"><%= customer.customerName %></div>
                                        <div class="phone"><%= customer.phoneNumber %></div>
                                        <div class="party-size"><%= customer.partySize %></div>
                                        <div class="wait-time"><%= seatedMinutes %> min</div>
                                        <div class="special-requests">
                                            <% if (customer.specialRequests && customer.specialRequests.trim()) { %>
                                                <span class="special-requests-text" title="<%= customer.specialRequests %>">
                                                    <%= customer.specialRequests.length > 30 ? customer.specialRequests.substring(0, 30) + '...' : customer.specialRequests %>
                                                </span>
                                            <% } else { %>
                                                <span class="no-requests">-</span>
                                            <% } %>
                                        </div>
                                        <div class="actions">
                                            <button class="btn-action btn-select" onclick="requeueCustomer('<%= activeQueue._id %>', '<%= customer.customerId %>')">Requeue</button>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        <% } else { %>
                            <div class="no-customers">
                                <div class="empty-queue-icon">🪑</div>
                                <h4>No seated customers</h4>
                                <p>Customers who are seated will appear here</p>
                            </div>
                        <% } %>
                    <% } else { %>
                        <div class="no-customers">
                            <h4>No active queue</h4>
                            <p>Activate a queue to see seated customers</p>
                        </div>
                    <% } %>
                <% } else { %>
                    <div class="no-customers">
                        <h4>No queues available</h4>
                        <p>Create a queue first to manage seated customers</p>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Indicators -->
    <div id="updating-indicator" class="updating-indicator">
        Updating dashboard...
    </div>
    
    <div id="connection-status" class="connection-status connecting">
        🔄 Connecting...
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Tab functionality
        function showTab(tabId) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Remove active class from all tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabId).classList.add('active');
            
            // Add active class to clicked button
            event.target.classList.add('active');
        }

        const socket = io();
        
        // Connection status monitoring
        socket.on('connect', () => {
            console.log('Socket.IO connected');
            updateConnectionStatus('connected');
        });
        
        socket.on('disconnect', () => {
            console.log('Socket.IO disconnected');
            updateConnectionStatus('disconnected');
        });
        
        socket.on('reconnect', () => {
            console.log('Socket.IO reconnected');
            updateConnectionStatus('connected');
            setTimeout(() => {
                refreshDashboardData();
            }, 1000);
        });
        
        function updateConnectionStatus(status) {
            const indicator = document.getElementById('connection-status');
            if (indicator) {
                indicator.className = `connection-status ${status}`;
                switch(status) {
                    case 'connected':
                        indicator.innerHTML = '🟢 Connected';
                        break;
                    case 'disconnected':
                        indicator.innerHTML = '🔴 Disconnected';
                        break;
                    case 'connecting':
                        indicator.innerHTML = '🔄 Connecting...';
                        break;
                }
            }
        }
        
        // Join merchant room for real-time updates
        socket.emit('join-merchant-room', '507f1f77bcf86cd799439011');
        
        // Update total waiting count on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateTotalWaitingCount();
            checkWhatsAppStatus();
            
            // Update stats every 30 seconds
            setInterval(updateTotalWaitingCount, 30000);
            setInterval(checkWhatsAppStatus, 60000);
            
            // Periodic full refresh every 2 minutes
            setInterval(refreshDashboardData, 120000);
        });
        
        // Socket.IO event listeners
        socket.on('queue-updated', (data) => {
            console.log('Queue updated event received:', data);
            handleQueueUpdate(data);
        });
        
        socket.on('customer-added', (data) => {
            console.log('Customer added event received:', data);
            handleQueueUpdate(data);
        });
        
        socket.on('customer-removed', (data) => {
            console.log('Customer removed event received:', data);
            handleQueueUpdate(data);
        });
        
        function handleQueueUpdate(data) {
            if (data && data.queue) {
                showUpdatingIndicator();
                updateQueueDisplay(data.queue);
                setTimeout(hideUpdatingIndicator, 1000);
            }
        }
        
        function showUpdatingIndicator() {
            const indicator = document.getElementById('updating-indicator');
            if (indicator) {
                indicator.classList.add('show');
            }
        }
        
        function hideUpdatingIndicator() {
            const indicator = document.getElementById('updating-indicator');
            if (indicator) {
                indicator.classList.remove('show');
            }
        }
        
        function updateQueueDisplay(queueData) {
            // Update queue stats
            const queueStatsElements = document.querySelectorAll('.queue-stats .number');
            if (queueStatsElements.length >= 2) {
                const waitingCustomers = queueData.entries.filter(entry => 
                    entry.status === 'waiting' || entry.status === 'called'
                ).length;
                
                queueStatsElements[0].textContent = waitingCustomers;
                
                // Calculate fresh average wait time
                const now = new Date();
                const waitingEntries = queueData.entries.filter(entry => entry.status === 'waiting');
                let avgWaitTime = 0;
                
                if (waitingEntries.length > 0) {
                    const totalWaitTime = waitingEntries.reduce((total, entry) => {
                        const waitMinutes = Math.floor((now - new Date(entry.joinedAt)) / (1000 * 60));
                        return total + waitMinutes;
                    }, 0);
                    avgWaitTime = Math.round(totalWaitTime / waitingEntries.length);
                }
                
                queueStatsElements[1].textContent = avgWaitTime;
                
                // Update main stats cards
                const totalWaitingElement = document.getElementById('totalWaitingCount');
                if (totalWaitingElement) {
                    totalWaitingElement.textContent = waitingCustomers;
                }
                
                const averageWaitTimeElement = document.getElementById('averageWaitTime');
                if (averageWaitTimeElement) {
                    averageWaitTimeElement.textContent = avgWaitTime;
                }
            }
            
            // Update customer list if needed
            const currentActiveTab = document.querySelector('.tab-content.active');
            if (currentActiveTab && currentActiveTab.id === 'active-queue') {
                updateActiveQueueCustomerList(queueData);
            }
        }
        
        function updateActiveQueueCustomerList(queueData) {
            // This would update the customer list dynamically
            // For now, we'll just refresh the page for simplicity
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        }
        
        function updateTotalWaitingCount() {
            // Update waiting count and average wait time
            const waitingElements = document.querySelectorAll('.customer-row:not(.notified-customer)');
            const totalWaitingElement = document.getElementById('totalWaitingCount');
            
            if (totalWaitingElement) {
                totalWaitingElement.textContent = waitingElements.length;
            }
        }
        
        function refreshDashboardData() {
            showUpdatingIndicator();
            fetch('/dashboard')
                .then(response => {
                    if (response.ok) {
                        setTimeout(() => {
                            window.location.reload();
                        }, 500);
                    }
                })
                .catch(error => {
                    console.error('Error refreshing dashboard:', error);
                })
                .finally(() => {
                    setTimeout(hideUpdatingIndicator, 1000);
                });
        }
        
        function checkWhatsAppStatus() {
            fetch('/api/whatsapp/status')
                .then(response => response.json())
                .then(data => {
                    const banner = document.getElementById('whatsapp-status');
                    const statusText = banner.querySelector('.status-text p');
                    
                    if (data.connected) {
                        banner.className = 'status-banner connected';
                        statusText.textContent = 'Connected and ready to receive messages';
                    } else {
                        banner.className = 'status-banner disconnected';
                        statusText.textContent = 'Not connected. Click WhatsApp tab to set up.';
                    }
                })
                .catch(error => {
                    console.error('Error checking WhatsApp status:', error);
                });
        }
        
        // Action functions
        async function notifyNext(queueId) {
            if (!confirm('Are you sure you want to notify the next customer?')) {
                return;
            }
            
            const button = event.target;
            button.disabled = true;
            button.textContent = 'Sending...';
            
            try {
                const response = await fetch(`/api/queue/${queueId}/call-next`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(`Notified: ${result.customer.customerName}`);
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Failed to notify customer');
                    button.disabled = false;
                    button.textContent = 'Notify';
                }
            } catch (error) {
                console.error('Error notifying customer:', error);
                alert('Error notifying customer');
                button.disabled = false;
                button.textContent = 'Notify';
            }
        }
        
        async function markAsSeated(queueId, customerId) {
            const tableNumber = prompt('Enter table number (optional):');
            
            try {
                const response = await fetch(`/api/queue/${queueId}/seat-customer`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ customerId, tableNumber })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Customer marked as seated');
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Failed to seat customer');
                }
            } catch (error) {
                console.error('Error seating customer:', error);
                alert('Error seating customer');
            }
        }
        
        async function selectCustomer(queueId, customerId) {
            if (!confirm('Are you sure you want to notify this customer?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/queue/${queueId}/call-specific`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ customerId })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(`Notified: ${result.customer.customerName}`);
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Failed to notify customer');
                }
            } catch (error) {
                console.error('Error notifying customer:', error);
                alert('Error notifying customer');
            }
        }
        
        async function requeueCustomer(queueId, customerId) {
            if (!confirm('Are you sure you want to requeue this customer?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/queue/${queueId}/requeue-customer`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ customerId })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Customer requeued successfully');
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Failed to requeue customer');
                }
            } catch (error) {
                console.error('Error requeuing customer:', error);
                alert('Error requeuing customer');
            }
        }
    </script>
</body>
</html> 