<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="/css/common-header.css" rel="stylesheet">
    <link href="/css/dashboard.css" rel="stylesheet">
    <!-- Preload critical resources for faster navigation -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://cdn.jsdelivr.net">
    <script src="/js/navigation-preload.js" defer></script>
    <style>
        /* Notification Modal Styles */
        .notification-modal, .verification-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
        }
        
        .notification-content, .verification-content {
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            max-width: 500px;
            width: 90%;
            overflow: hidden;
        }
        
        .notification-header, .verification-header {
            background: #ff8c00;
            color: #ffffff;
            padding: 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .notification-header h2, .verification-header h2 {
            margin: 0;
            font-size: 1.5rem;
        }
        
        .close-btn {
            background: none;
            border: none;
            color: #ffffff;
            font-size: 2rem;
            cursor: pointer;
            line-height: 1;
            opacity: 0.8;
            transition: opacity 0.2s;
        }
        
        .close-btn:hover {
            opacity: 1;
        }
        
        .notification-body, .verification-body {
            padding: 2rem;
            text-align: center;
        }
        
        .customer-info {
            font-size: 1.2rem;
            margin-bottom: 1.5rem;
            color: #333;
        }
        
        .verification-code-display {
            margin: 2rem 0;
        }
        
        .verification-code-display label {
            display: block;
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 0.5rem;
        }
        
        .code-box {
            background: #f8f9fa;
            border: 3px solid #ff8c00;
            border-radius: 8px;
            font-size: 2.5rem;
            font-weight: bold;
            letter-spacing: 0.3rem;
            padding: 1rem;
            color: #ff8c00;
            font-family: monospace;
        }
        
        .instruction {
            color: #666;
            font-size: 0.95rem;
            margin-top: 1rem;
        }
        
        .notification-footer, .verification-footer {
            background: #f8f9fa;
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }
        
        .btn-primary, .btn-secondary {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .btn-primary {
            background: #ff8c00;
            color: #ffffff;
        }
        
        .btn-primary:hover {
            background: #e67e00;
            transform: translateY(-1px);
        }
        
        .btn-secondary {
            background: #e9ecef;
            color: #495057;
        }
        
        .btn-secondary:hover {
            background: #dee2e6;
        }
        
        /* WebChat and Connection Status Styles */
        .webchat-badge {
            background: #007bff;
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            display: inline-flex;
            align-items: center;
            gap: 4px;
        }
        
        .connection-status {
            margin-left: 5px;
            display: inline-block;
        }
        
        .connection-status.online i {
            color: #28a745 !important;
        }
        
        .connection-status.offline i {
            color: #dc3545 !important;
        }
        
        /* Code Input Styles */
        .code-input {
            width: 100%;
            max-width: 300px;
            font-size: 2rem;
            text-align: center;
            padding: 1rem;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            letter-spacing: 0.5rem;
            font-family: monospace;
            margin: 1rem 0;
        }
        
        .code-input:focus {
            outline: none;
            border-color: #ff8c00;
            box-shadow: 0 0 0 3px rgba(255, 140, 0, 0.1);
        }
        
        .error-message {
            color: #dc3545;
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }
        
        /* Pending Button Style */
        .btn-pending {
            background: #ffc107;
            color: #000;
            border-color: #ffc107;
        }
        
        .btn-pending:hover {
            background: #e0a800;
            border-color: #d39e00;
        }
        
        /* Shake Animation */
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-10px); }
            75% { transform: translateX(10px); }
        }
        
        .shake {
            animation: shake 0.5s ease-in-out;
        }
        
        /* Queue Performance Card Animations */
        @keyframes fadeInScale {
            0% {
                opacity: 0;
                transform: scale(0.9) translateY(20px);
            }
            100% {
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }
        
        @keyframes rotateGlow {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }
        
        @keyframes shimmer {
            0% {
                transform: translateX(-100%);
            }
            100% {
                transform: translateX(100%);
            }
        }
        
        /* Queue Actions Styles */
        .queue-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding: 1rem;
            background: rgba(255, 140, 0, 0.05);
            border: 1px solid rgba(255, 140, 0, 0.3);
            border-radius: 8px;
        }
        
        .queue-actions-left {
            display: flex;
            gap: 1rem;
            align-items: center;
        }
        
        .queue-status-badge {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.9rem;
        }
        
        .queue-status-badge.accepting {
            background: rgba(37, 211, 102, 0.2);
            color: #25D366;
            border: 1px solid rgba(37, 211, 102, 0.3);
        }
        
        .queue-status-badge.not-accepting {
            background: rgba(244, 67, 54, 0.2);
            color: #f44336;
            border: 1px solid rgba(244, 67, 54, 0.3);
        }
        
        .btn-danger {
            background: #dc3545;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .btn-danger:hover {
            background: #c82333;
        }
        
        .btn-success {
            background: #28a745;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .btn-success:hover {
            background: #218838;
        }
        
        /* Stop Queue Modal Styles */
        .stop-queue-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
        }
        
        .stop-queue-content {
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            max-width: 500px;
            width: 90%;
            overflow: hidden;
        }
        
        .stop-queue-header {
            background: #dc3545;
            color: #ffffff;
            padding: 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .stop-queue-header h2 {
            margin: 0;
            font-size: 1.5rem;
        }
        
        .stop-queue-body {
            padding: 2rem;
        }
        
        .warning-message {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
            color: #856404;
        }
        
        .warning-message i {
            font-size: 1.5rem;
            color: #f39c12;
            margin-bottom: 0.5rem;
            display: block;
        }
        
        .warning-message p {
            margin: 0.5rem 0;
        }
        
        .confirmation-input {
            margin-top: 1.5rem;
        }
        
        .confirmation-input p {
            margin-bottom: 1rem;
            color: #333;
        }
        
        .confirm-input {
            width: 100%;
            padding: 0.75rem;
            font-size: 1rem;
            border: 2px solid #dee2e6;
            border-radius: 6px;
            margin-bottom: 0.5rem;
        }
        
        .confirm-input:focus {
            outline: none;
            border-color: #dc3545;
            box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
        }
        
        .stop-queue-footer {
            background: rgba(0, 0, 0, 0.1);
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header">
        <div class="header-content">
            <h1>StoreHub Queue Management System</h1>
            
            <!-- Mobile Hamburger Menu -->
            <button class="mobile-nav-toggle" aria-label="Toggle navigation">
                <span></span>
                <span></span>
                <span></span>
            </button>
            
            <div class="nav-container">
                <% if (typeof queues !== 'undefined' && queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <a href="/queue/<%= activeQueue.id || activeQueue._id %>" class="btn-view-public" target="_blank">
                            <i class="bi bi-eye"></i> View Public
                        </a>
                    <% } %>
                <% } %>
                <nav class="nav">
                    <a href="/dashboard" class="active">Dashboard</a>
                    <a href="/dashboard/analytics">Analytics</a>
                    <a href="/dashboard/whatsapp-setup">WhatsApp</a>
                    <a href="/dashboard/settings">Settings</a>
                    <a href="/dashboard/help">Help</a>
                </nav>
            </div>
            <div class="user-section">
                <div class="user-menu">
                    <form action="/auth/logout" method="POST" style="display: inline;">
                        <button type="submit" class="user-button">
                            <i class="bi bi-box-arrow-right"></i>
                            Logout
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Mobile Navigation Menu -->
    <div class="mobile-nav-overlay">
        <div class="mobile-nav-menu">
            <div class="mobile-nav-header">
                <h3><%= user.businessName %></h3>
                <button class="mobile-nav-close" aria-label="Close navigation">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <nav class="mobile-nav-links">
                <a href="/dashboard" class="active">
                    <i class="bi bi-speedometer2"></i>
                    Dashboard
                </a>
                <a href="/dashboard/analytics">
                    <i class="bi bi-bar-chart"></i>
                    Analytics
                </a>
                <a href="/dashboard/whatsapp-setup">
                    <i class="bi bi-whatsapp"></i>
                    WhatsApp
                </a>
                <a href="/dashboard/settings">
                    <i class="bi bi-gear"></i>
                    Settings
                </a>
                <a href="/dashboard/help">
                    <i class="bi bi-question-circle"></i>
                    Help
                </a>
                <% if (typeof queues !== 'undefined' && queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <a href="/queue/<%= activeQueue.id || activeQueue._id %>" target="_blank">
                            <i class="bi bi-eye"></i>
                            View Public Queue
                        </a>
                    <% } %>
                <% } %>
            </nav>
            <div class="mobile-nav-footer">
                <form action="/auth/logout" method="POST">
                    <button type="submit" class="mobile-logout-btn">
                        <i class="bi bi-box-arrow-right"></i>
                        Logout
                    </button>
                </form>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- WhatsApp Status Banner -->
        <div class="status-banner" id="whatsapp-status">
            <div class="status-icon">
                <i class="fab fa-whatsapp"></i>
            </div>
            <div class="status-text">
                <h6>WhatsApp Integration</h6>
                <p>Checking connection status...</p>
            </div>
        </div>

        <!-- Stats Grid -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="totalWaitingCount"><%= stats.totalWaiting %></div>
                <div class="stat-label">Customers Waiting</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="averageWaitTime"><%= stats.averageWaitTime %></div>
                <div class="stat-label">Avg Wait Time (min)</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= stats.totalServed || 0 %></div>
                <div class="stat-label">Served Today</div>
            </div>
        </div>


        <!-- Queue Management Tabs -->
        <div class="tabs-container">
            <div class="tabs-header">
                <button class="tab-button active" onclick="showTab('active-queue')">Active Queue</button>
                <button class="tab-button" onclick="showTab('seated-customers')">Seated Customers</button>
            </div>

            <!-- Active Queue Tab -->
            <div id="active-queue" class="tab-content active">
                <% if (queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <div class="queue-section">
                            <div class="queue-header">
                                <div class="queue-title">
                                    <h3><%= activeQueue.name %></h3>
                                    <p class="queue-description"><%= activeQueue.description || 'Main restaurant queue' %></p>
                                </div>
                                <div class="queue-summary">
                                    <div class="queue-stats">
                                        <div class="stat-item">
                                            <div class="number"><%= waitingCustomers.filter(c => c.status === 'waiting').length %></div>
                                            <div class="label">Waiting</div>
                                        </div>
                                        <div class="stat-item">
                                            <div class="number"><%= Math.round((waitingCustomers.filter(c => c.status === 'waiting').reduce((total, c) => total + Math.floor((new Date() - new Date(c.joinedAt)) / (1000 * 60)), 0) / Math.max(waitingCustomers.filter(c => c.status === 'waiting').length, 1)) || 0) %></div>
                                            <div class="label">Avg Wait</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Queue Actions Bar -->
                            <div class="queue-actions">
                                <div class="queue-actions-left">
                                    <button class="btn btn-outline" onclick="refreshQueue()">
                                        <i class="bi bi-arrow-clockwise"></i> Refresh
                                    </button>
                                    <% if (activeQueue.acceptingCustomers !== false) { %>
                                        <button class="btn btn-danger" onclick="toggleQueueAccepting('<%= activeQueue._id || activeQueue.id %>')">
                                            <i class="bi bi-stop-circle"></i> Stop Queue
                                        </button>
                                    <% } else { %>
                                        <button class="btn btn-success" onclick="toggleQueueAccepting('<%= activeQueue._id || activeQueue.id %>')">
                                            <i class="bi bi-play-circle"></i> Start Queue
                                        </button>
                                    <% } %>
                                </div>
                                <div class="queue-actions-right">
                                    <span class="queue-status-badge <%= activeQueue.acceptingCustomers !== false ? 'accepting' : 'not-accepting' %>">
                                        <i class="bi <%= activeQueue.acceptingCustomers !== false ? 'bi-check-circle-fill' : 'bi-x-circle-fill' %>"></i>
                                        <%= activeQueue.acceptingCustomers !== false ? 'Accepting Customers' : 'Not Accepting New Customers' %>
                                    </span>
                                </div>
                            </div>
                            
                            <% if (waitingCustomers.length > 0) { %>
                                <!-- Desktop Table View -->
                                <div class="customer-list customer-list-desktop">
                                    <div class="customer-list-header">
                                        <span>#</span>
                                        <span>Customer</span>
                                        <span>Contact</span>
                                        <span>Party</span>
                                        <span>Wait</span>
                                        <span>Special Requests</span>
                                        <span>Actions</span>
                                    </div>
                                    
                                    <% waitingCustomers.forEach((customer, index) => { %>
                                        <% const waitMinutes = Math.floor((new Date() - new Date(customer.joinedAt)) / (1000 * 60)); %>
                                        <div class="customer-row <%= customer.status === 'called' ? 'notified-customer' : (index === 0 && customer.status === 'waiting' ? 'next-customer' : '') %>">
                                            <div class="position">
                                                <%= customer.position %>
                                                <% if (index === 0 && customer.status === 'waiting') { %>
                                                    <div class="next-badge">NEXT</div>
                                                <% } %>
                                            </div>
                                            <div class="customer-name">
                                                <%= customer.customerName %>
                                                <% if (customer.platform === 'webchat') { %>
                                                    <span class="connection-status" data-session-id="<%= customer.sessionId %>" title="WebChat Customer">
                                                        <i class="bi bi-circle-fill" style="font-size: 8px; color: #ccc;"></i>
                                                    </span>
                                                <% } %>
                                            </div>
                                            <div class="phone">
                                                <% if (customer.platform === 'webchat') { %>
                                                    <span class="webchat-badge" title="Session: <%= customer.sessionId || 'Unknown' %>">
                                                        <i class="bi bi-chat-dots"></i> WebChat
                                                    </span>
                                                <% } else { %>
                                                    <%= customer.phoneNumber || customer.customerPhone || '-' %>
                                                <% } %>
                                            </div>
                                            <div class="party-size"><%= customer.partySize %></div>
                                            <div class="wait-time"><%= waitMinutes %> min</div>
                                            <div class="special-requests">
                                                <% if (customer.specialRequests && customer.specialRequests.trim()) { %>
                                                    <span class="special-requests-text" title="<%= customer.specialRequests %>">
                                                        <%= customer.specialRequests.length > 30 ? customer.specialRequests.substring(0, 30) + '...' : customer.specialRequests %>
                                                    </span>
                                                <% } else { %>
                                                    <span class="no-requests">-</span>
                                                <% } %>
                                            </div>
                                            <div class="actions">
                                                <% if (customer.status === 'called') { %>
                                                    <button class="btn-action btn-pending" onclick="showCodeVerificationModal('<%= activeQueue.id || activeQueue._id %>', '<%= customer.customerId %>')">Pending Arrival</button>
                                                <% } else if (index === 0) { %>
                                                    <button class="btn-action btn-notify" onclick="notifyNext('<%= activeQueue.id || activeQueue._id %>')">Notify</button>
                                                <% } else { %>
                                                    <button class="btn-action btn-select" onclick="selectCustomer('<%= activeQueue.id || activeQueue._id %>', '<%= customer.customerId %>')">Select</button>
                                                <% } %>
                                            </div>
                                        </div>
                                    <% }); %>
                                </div>
                                
                                <!-- Mobile Card View -->
                                <div class="customer-list-mobile">
                                    <% waitingCustomers.forEach((customer, index) => { %>
                                        <% const waitMinutes = Math.floor((new Date() - new Date(customer.joinedAt)) / (1000 * 60)); %>
                                        <div class="customer-card <%= customer.status === 'called' ? 'notified-customer' : (index === 0 && customer.status === 'waiting' ? 'next-customer' : '') %>">
                                            <div class="customer-card-header">
                                                <span class="position-badge"><%= customer.position %></span>
                                                <h3><%= customer.name %></h3>
                                                <% if (customer.status === 'called') { %>
                                                    <span class="status-badge notified">CALLED</span>
                                                <% } else if (index === 0 && customer.status === 'waiting') { %>
                                                    <span class="status-badge next">NEXT</span>
                                                <% } %>
                                            </div>
                                            <div class="customer-card-body">
                                                <div class="customer-info-row">
                                                    <i class="bi bi-phone"></i>
                                                    <span><%= customer.phone %></span>
                                                </div>
                                                <div class="customer-info-row">
                                                    <i class="bi bi-people"></i>
                                                    <span><%= customer.partySize %> people</span>
                                                </div>
                                                <div class="customer-info-row">
                                                    <i class="bi bi-clock"></i>
                                                    <span><%= waitMinutes %> min</span>
                                                </div>
                                                <% if (customer.specialRequests) { %>
                                                    <div class="customer-info-row">
                                                        <i class="bi bi-chat-text"></i>
                                                        <span><%= customer.specialRequests %></span>
                                                    </div>
                                                <% } %>
                                            </div>
                                            <div class="customer-card-actions">
                                                <% if (customer.status === 'waiting') { %>
                                                    <button onclick="callCustomer('<%= activeQueue.id || activeQueue._id %>', '<%= customer.id || customer._id %>')" class="action-button call-button">
                                                        <i class="bi bi-megaphone"></i> Call
                                                    </button>
                                                <% } %>
                                                <button onclick="completeService('<%= activeQueue.id || activeQueue._id %>', '<%= customer.id || customer._id %>')" class="action-button complete-button">
                                                    <i class="bi bi-check-circle"></i> Complete
                                                </button>
                                                <button onclick="requeueCustomer('<%= activeQueue.id || activeQueue._id %>', '<%= customer.id || customer._id %>')" class="action-button requeue-button">
                                                    <i class="bi bi-arrow-repeat"></i> Requeue
                                                </button>
                                            </div>
                                        </div>
                                    <% }); %>
                                </div>
                            <% } else { %>
                                <div class="no-customers">
                                    <div class="empty-queue-icon">🍽️</div>
                                    <h4>No customers in queue</h4>
                                    <p>Your restaurant is ready to welcome the next customer!</p>
                                </div>
                            <% } %>
                        </div>
                    <% } %>
                <% } %>
            </div>
            
            <!-- Seated Customers Tab -->
            <div id="seated-customers" class="tab-content">
                <% if (queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <% const seatedCustomers = activeQueue.entries.filter(entry => entry.status === 'completed').sort((a, b) => new Date(b.completedAt) - new Date(a.completedAt)); %>
                        
                        <% if (seatedCustomers.length > 0) { %>
                            <div class="customer-list">
                                <div class="customer-list-header">
                                    <span>Table</span>
                                    <span>Customer</span>
                                    <span>Phone</span>
                                    <span>Party</span>
                                    <span>Seated Time</span>
                                    <span>Special Requests</span>
                                    <span>Actions</span>
                                </div>
                                
                                <% seatedCustomers.forEach((customer) => { %>
                                    <% const seatedMinutes = Math.floor((new Date() - new Date(customer.completedAt)) / (1000 * 60)); %>
                                    <div class="customer-row seated-customer-row">
                                        <div class="position">T<%= customer.tableNumber || '-' %></div>
                                        <div class="customer-name"><%= customer.customerName %></div>
                                        <div class="phone"><%= customer.customerPhone %></div>
                                        <div class="party-size"><%= customer.partySize %></div>
                                        <div class="wait-time"><%= seatedMinutes %> min</div>
                                        <div class="special-requests">
                                            <% if (customer.specialRequests && customer.specialRequests.trim()) { %>
                                                <span class="special-requests-text" title="<%= customer.specialRequests %>">
                                                    <%= customer.specialRequests.length > 30 ? customer.specialRequests.substring(0, 30) + '...' : customer.specialRequests %>
                                                </span>
                                            <% } else { %>
                                                <span class="no-requests">-</span>
                                            <% } %>
                                        </div>
                                        <div class="actions">
                                            <button class="btn-action btn-select" onclick="requeueCustomer('<%= activeQueue.id || activeQueue._id %>', '<%= customer.customerId %>')">Requeue</button>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        <% } else { %>
                            <div class="no-customers">
                                <div class="empty-queue-icon">🪑</div>
                                <h4>No seated customers</h4>
                                <p>Customers who are seated will appear here</p>
                            </div>
                        <% } %>
                    <% } else { %>
                        <div class="no-customers">
                            <h4>No active queue</h4>
                            <p>Activate a queue to see seated customers</p>
                        </div>
                    <% } %>
                <% } else { %>
                    <div class="no-customers">
                        <h4>No queues available</h4>
                        <p>Create a queue first to manage seated customers</p>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Indicators -->
    <div id="updating-indicator" class="updating-indicator">
        Updating dashboard...
    </div>
    
    <div id="connection-status" class="connection-status connecting">
        🔄 Connecting...
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Mobile Navigation Toggle
        const mobileNavToggle = document.querySelector('.mobile-nav-toggle');
        const mobileNavOverlay = document.querySelector('.mobile-nav-overlay');
        const mobileNavClose = document.querySelector('.mobile-nav-close');
        
        if (mobileNavToggle) {
            mobileNavToggle.addEventListener('click', () => {
                mobileNavOverlay.classList.add('active');
                document.body.style.overflow = 'hidden';
            });
        }
        
        if (mobileNavClose) {
            mobileNavClose.addEventListener('click', () => {
                mobileNavOverlay.classList.remove('active');
                document.body.style.overflow = '';
            });
        }
        
        // Close mobile nav when clicking overlay
        if (mobileNavOverlay) {
            mobileNavOverlay.addEventListener('click', (e) => {
                if (e.target === mobileNavOverlay) {
                    mobileNavOverlay.classList.remove('active');
                    document.body.style.overflow = '';
                }
            });
        }
        
        // Tab functionality
        function showTab(tabId) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Remove active class from all tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabId).classList.add('active');
            
            // Add active class to clicked button
            event.target.classList.add('active');
        }

        const socket = io();
        
        // Connection status monitoring
        socket.on('connect', () => {
            console.log('Socket.IO connected');
            updateConnectionStatus('connected');
        });
        
        socket.on('disconnect', () => {
            console.log('Socket.IO disconnected');
            updateConnectionStatus('disconnected');
        });
        
        socket.on('reconnect', () => {
            console.log('Socket.IO reconnected');
            updateConnectionStatus('connected');
            setTimeout(() => {
                refreshDashboardData();
            }, 1000);
        });
        
        function updateConnectionStatus(status) {
            const indicator = document.getElementById('connection-status');
            if (indicator) {
                indicator.className = `connection-status ${status}`;
                switch(status) {
                    case 'connected':
                        indicator.innerHTML = '🟢 Connected';
                        break;
                    case 'disconnected':
                        indicator.innerHTML = '🔴 Disconnected';
                        break;
                    case 'connecting':
                        indicator.innerHTML = '🔄 Connecting...';
                        break;
                }
            }
        }
        
        // CSRF Token for API calls
        const csrfToken = '<%- csrfToken %>';
        
        // Join merchant room for real-time updates
        const merchantId = '<%= user.merchantId || user.id || user._id %>';
        socket.emit('join-merchant-room', merchantId);
        
        // Update total waiting count on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateTotalWaitingCount();
            checkWhatsAppStatus();
            
            // Update stats every 30 seconds
            setInterval(updateTotalWaitingCount, 30000);
            setInterval(checkWhatsAppStatus, 60000);
            
            // Periodic full refresh every 2 minutes
            setInterval(refreshDashboardData, 120000);
        });
        
        // Socket.IO event listeners
        socket.on('queue-updated', (data) => {
            console.log('Queue updated event received:', data);
            handleQueueUpdate(data);
        });
        
        socket.on('customer-added', (data) => {
            console.log('Customer added event received:', data);
            handleQueueUpdate(data);
        });
        
        socket.on('customer-removed', (data) => {
            console.log('Customer removed event received:', data);
            handleQueueUpdate(data);
        });
        
        // Track webchat customer connections
        const connectedSessions = new Set();
        
        socket.on('webchat-connected', (data) => {
            if (data.sessionId) {
                connectedSessions.add(data.sessionId);
                updateSessionStatus(data.sessionId, true);
            }
        });
        
        socket.on('webchat-disconnected', (data) => {
            if (data.sessionId) {
                connectedSessions.delete(data.sessionId);
                updateSessionStatus(data.sessionId, false);
            }
        });
        
        function updateSessionStatus(sessionId, isOnline) {
            const statusElements = document.querySelectorAll(`[data-session-id="${sessionId}"]`);
            statusElements.forEach(element => {
                if (isOnline) {
                    element.classList.add('online');
                    element.classList.remove('offline');
                    element.title = 'Customer Online';
                } else {
                    element.classList.add('offline');
                    element.classList.remove('online');
                    element.title = 'Customer Offline';
                }
            });
        }
        
        function handleQueueUpdate(data) {
            if (data && data.queue) {
                showUpdatingIndicator();
                updateQueueDisplay(data.queue);
                setTimeout(hideUpdatingIndicator, 1000);
            }
        }
        
        function showUpdatingIndicator() {
            const indicator = document.getElementById('updating-indicator');
            if (indicator) {
                indicator.classList.add('show');
            }
        }
        
        function hideUpdatingIndicator() {
            const indicator = document.getElementById('updating-indicator');
            if (indicator) {
                indicator.classList.remove('show');
            }
        }
        
        function updateQueueDisplay(queueData) {
            // Update queue stats
            const queueStatsElements = document.querySelectorAll('.queue-stats .number');
            if (queueStatsElements.length >= 2) {
                const waitingCustomers = queueData.entries.filter(entry => 
                    entry.status === 'waiting' || entry.status === 'called'
                ).length;
                
                queueStatsElements[0].textContent = waitingCustomers;
                
                // Calculate fresh average wait time
                const now = new Date();
                const waitingEntries = queueData.entries.filter(entry => entry.status === 'waiting');
                let avgWaitTime = 0;
                
                if (waitingEntries.length > 0) {
                    const totalWaitTime = waitingEntries.reduce((total, entry) => {
                        const waitMinutes = Math.floor((now - new Date(entry.joinedAt)) / (1000 * 60));
                        return total + waitMinutes;
                    }, 0);
                    avgWaitTime = Math.round(totalWaitTime / waitingEntries.length);
                }
                
                queueStatsElements[1].textContent = avgWaitTime;
                
                // Update main stats cards
                const totalWaitingElement = document.getElementById('totalWaitingCount');
                if (totalWaitingElement) {
                    totalWaitingElement.textContent = waitingCustomers;
                }
                
                const averageWaitTimeElement = document.getElementById('averageWaitTime');
                if (averageWaitTimeElement) {
                    averageWaitTimeElement.textContent = avgWaitTime;
                }
            }
            
            // Update customer list if needed
            const currentActiveTab = document.querySelector('.tab-content.active');
            if (currentActiveTab && currentActiveTab.id === 'active-queue') {
                updateActiveQueueCustomerList(queueData);
            }
        }
        
        function updateActiveQueueCustomerList(queueData) {
            // This would update the customer list dynamically
            // For now, we'll just refresh the page for simplicity
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        }
        
        function updateTotalWaitingCount() {
            // Update waiting count by counting only customers in "waiting" status from active queue tab
            const activeQueueTab = document.getElementById('active-queue');
            const totalWaitingElement = document.getElementById('totalWaitingCount');
            
            if (totalWaitingElement && activeQueueTab) {
                // Only count customers in the active queue tab that are actually waiting (not seated customers)
                const waitingElements = activeQueueTab.querySelectorAll('.customer-row');
                totalWaitingElement.textContent = waitingElements.length;
            }
        }
        
        function refreshDashboardData() {
            showUpdatingIndicator();
            fetch('/dashboard')
                .then(response => {
                    if (response.ok) {
                        setTimeout(() => {
                            window.location.reload();
                        }, 500);
                    }
                })
                .catch(error => {
                    console.error('Error refreshing dashboard:', error);
                })
                .finally(() => {
                    setTimeout(hideUpdatingIndicator, 1000);
                });
        }
        
        function checkWhatsAppStatus() {
            fetch('/api/whatsapp/status', {
                credentials: 'same-origin',
                headers: {
                    'X-CSRF-Token': csrfToken
                }
            })
                .then(response => response.json())
                .then(data => {
                    const banner = document.getElementById('whatsapp-status');
                    const statusText = banner.querySelector('.status-text p');
                    
                    if (data.connected) {
                        banner.className = 'status-banner connected';
                        statusText.textContent = 'Connected and ready to receive messages';
                    } else {
                        banner.className = 'status-banner disconnected';
                        statusText.textContent = 'Not connected. Click WhatsApp tab to set up.';
                    }
                })
                .catch(error => {
                    console.error('Error checking WhatsApp status:', error);
                });
        }
        
        
        // Action functions
        async function notifyNext(queueId) {
            if (!confirm('Are you sure you want to notify the next customer?')) {
                return;
            }
            
            const button = event.target;
            button.disabled = true;
            button.textContent = 'Sending...';
            
            console.log('Notifying next customer, CSRF token:', csrfToken);
            
            try {
                const response = await fetch(`/api/queue/${queueId}/call-next`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: { 
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    }
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Response not OK:', response.status, errorText);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    // Show popup with verification code
                    showVerificationCodePopup(result.customer);
                    
                    // Update button state
                    button.textContent = 'Pending Arrival';
                    button.className = 'btn-action btn-pending';
                    button.onclick = function() { 
                        showCodeVerificationModal(queueId, result.customer.customerId || result.customer.id);
                    };
                    
                    // Don't reload immediately to let user see the code
                } else {
                    alert(result.error || 'Failed to notify customer');
                    button.disabled = false;
                    button.textContent = 'Notify';
                }
            } catch (error) {
                console.error('Error notifying customer:', error);
                alert('Error notifying customer: ' + error.message);
                button.disabled = false;
                button.textContent = 'Notify';
            }
        }
        
        function showVerificationCodePopup(customer) {
            // Create popup modal
            const modal = document.createElement('div');
            modal.className = 'notification-modal';
            modal.innerHTML = `
                <div class="notification-content">
                    <div class="notification-header">
                        <h2>✅ Customer Notified!</h2>
                        <button onclick="closeNotificationModal()" class="close-btn">&times;</button>
                    </div>
                    <div class="notification-body">
                        <p class="customer-info">
                            <strong>${customer.customerName}</strong> has been notified.
                        </p>
                        <div class="verification-code-display">
                            <label>Verification Code:</label>
                            <div class="code-box">${customer.verificationCode}</div>
                        </div>
                        <p class="instruction">
                            The customer will show this code when they arrive.
                            Click "Pending Arrival" button to verify and seat them.
                        </p>
                    </div>
                    <div class="notification-footer">
                        <button onclick="closeNotificationModal()" class="btn-primary">OK</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            // Auto-refresh after 3 seconds
            setTimeout(() => {
                if (document.querySelector('.notification-modal')) {
                    window.location.reload();
                }
            }, 3000);
        }
        
        function closeNotificationModal() {
            const modal = document.querySelector('.notification-modal');
            if (modal) {
                modal.remove();
                window.location.reload();
            }
        }
        
        function showCodeVerificationModal(queueId, customerId) {
            const modal = document.createElement('div');
            modal.className = 'verification-modal';
            modal.innerHTML = `
                <div class="verification-content">
                    <div class="verification-header">
                        <h2>🔐 Verify Customer Code</h2>
                        <button onclick="closeVerificationModal()" class="close-btn">&times;</button>
                    </div>
                    <div class="verification-body">
                        <p>Please enter the 4-character code shown by the customer:</p>
                        <input type="text" 
                               id="verificationCodeInput" 
                               class="code-input" 
                               maxlength="4" 
                               pattern="[A-Za-z0-9]{4}"
                               placeholder="Enter code"
                               autofocus>
                        <div id="verificationError" class="error-message" style="display: none;"></div>
                    </div>
                    <div class="verification-footer">
                        <button onclick="closeVerificationModal()" class="btn-secondary">Cancel</button>
                        <button onclick="verifyAndSeatCustomer('${queueId}', '${customerId}')" class="btn-primary">Verify & Seat</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            // Focus on input
            setTimeout(() => {
                document.getElementById('verificationCodeInput').focus();
            }, 100);
            
            // Handle Enter key
            document.getElementById('verificationCodeInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    verifyAndSeatCustomer(queueId, customerId);
                }
            });
        }
        
        function closeVerificationModal() {
            const modal = document.querySelector('.verification-modal');
            if (modal) modal.remove();
        }
        
        async function verifyAndSeatCustomer(queueId, customerId) {
            const codeInput = document.getElementById('verificationCodeInput');
            const code = codeInput.value.trim();
            
            if (code.length !== 4) {
                showVerificationError('Please enter a 4-character code');
                return;
            }
            
            try {
                const response = await fetch(`/api/queue/${queueId}/verify-and-seat/${customerId}`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    },
                    body: JSON.stringify({ verificationCode: code })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    closeVerificationModal();
                    alert(`✅ ${result.customer.customerName} has been seated!`);
                    window.location.reload();
                } else {
                    showVerificationError(result.error || 'Invalid verification code');
                }
            } catch (error) {
                console.error('Error verifying customer:', error);
                showVerificationError('Error verifying code. Please try again.');
            }
        }
        
        function showVerificationError(message) {
            const errorDiv = document.getElementById('verificationError');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            
            // Shake the input
            const input = document.getElementById('verificationCodeInput');
            input.classList.add('shake');
            setTimeout(() => input.classList.remove('shake'), 500);
        }
        
        async function toggleQueueAccepting(queueId) {
            const button = event.target;
            const isCurrentlyAccepting = button.classList.contains('btn-danger');
            const action = isCurrentlyAccepting ? 'stop' : 'start';
            
            // For stopping, show confirmation dialog with text input
            if (isCurrentlyAccepting) {
                showStopQueueConfirmation(queueId);
                return;
            }
            
            // For starting, just use simple confirm
            if (!confirm('Are you sure you want to start accepting new customers?')) {
                return;
            }
            
            button.disabled = true;
            button.textContent = 'Starting...';
            
            console.log('Toggling queue accepting, CSRF token:', csrfToken);
            
            try {
                const response = await fetch(`/api/queue/${queueId}/toggle-accepting`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    }
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Response not OK:', response.status, errorText);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    alert(result.message);
                    window.location.reload();
                } else {
                    alert(result.error || 'Failed to update queue status');
                    button.disabled = false;
                    button.textContent = button.classList.contains('btn-danger') ? 'Stop Queue' : 'Start Queue';
                }
            } catch (error) {
                console.error('Error toggling queue status:', error);
                alert('Error updating queue status: ' + error.message);
                button.disabled = false;
                button.textContent = button.classList.contains('btn-danger') ? 'Stop Queue' : 'Start Queue';
            }
        }
        
        function showStopQueueConfirmation(queueId) {
            const modal = document.createElement('div');
            modal.className = 'stop-queue-modal';
            modal.innerHTML = `
                <div class="stop-queue-content">
                    <div class="stop-queue-header">
                        <h2>⚠️ Stop Queue Confirmation</h2>
                        <button onclick="closeStopQueueModal()" class="close-btn">&times;</button>
                    </div>
                    <div class="stop-queue-body">
                        <div class="warning-message">
                            <i class="bi bi-exclamation-triangle-fill"></i>
                            <p><strong>Warning:</strong> Stopping the queue will prevent new customers from joining.</p>
                            <p>Existing customers in the queue will still be served.</p>
                        </div>
                        <div class="confirmation-input">
                            <p>To confirm, please type: <strong>Yes I want to stop queue</strong></p>
                            <input type="text" 
                                   id="stopQueueConfirmInput" 
                                   class="confirm-input" 
                                   placeholder="Type confirmation text here"
                                   autocomplete="off">
                            <div id="stopQueueError" class="error-message" style="display: none;"></div>
                        </div>
                    </div>
                    <div class="stop-queue-footer">
                        <button onclick="closeStopQueueModal()" class="btn-secondary">Cancel</button>
                        <button onclick="confirmStopQueue('${queueId}')" class="btn-danger">Stop Queue</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            // Focus on input
            setTimeout(() => {
                document.getElementById('stopQueueConfirmInput').focus();
            }, 100);
            
            // Handle Enter key
            document.getElementById('stopQueueConfirmInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    confirmStopQueue(queueId);
                }
            });
        }
        
        function closeStopQueueModal() {
            const modal = document.querySelector('.stop-queue-modal');
            if (modal) modal.remove();
        }
        
        async function confirmStopQueue(queueId) {
            const input = document.getElementById('stopQueueConfirmInput');
            const confirmText = input.value.trim();
            const expectedText = "Yes I want to stop queue";
            
            // Case-insensitive comparison
            if (confirmText.toLowerCase() !== expectedText.toLowerCase()) {
                const errorDiv = document.getElementById('stopQueueError');
                errorDiv.textContent = `Please type exactly: "${expectedText}"`;
                errorDiv.style.display = 'block';
                
                // Shake the input
                input.classList.add('shake');
                setTimeout(() => input.classList.remove('shake'), 500);
                return;
            }
            
            // Disable button to prevent double-click
            const button = event.target;
            button.disabled = true;
            button.textContent = 'Stopping...';
            
            console.log('Stopping queue, CSRF token:', csrfToken);
            
            try {
                const response = await fetch(`/api/queue/${queueId}/toggle-accepting`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    }
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Response not OK:', response.status, errorText);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    closeStopQueueModal();
                    alert('✅ ' + result.message);
                    window.location.reload();
                } else {
                    alert('❌ ' + (result.error || 'Failed to stop queue'));
                    button.disabled = false;
                    button.textContent = 'Stop Queue';
                }
            } catch (error) {
                console.error('Error stopping queue:', error);
                alert('❌ Error stopping queue: ' + error.message);
                button.disabled = false;
                button.textContent = 'Stop Queue';
            }
        }
        
        async function markAsSeated(queueId, customerId) {
            // Get customer name for confirmation
            const customerRow = event.target.closest('.customer-row');
            const customerName = customerRow.querySelector('.customer-name').textContent;
            
            // Confirmation dialog to prevent accidental clicks
            if (!confirm(`Are you sure you want to seat ${customerName}?\n\nThis will send them a welcome message with the menu link.`)) {
                return;
            }
            
            const button = event.target;
            button.disabled = true;
            button.textContent = 'Seating...';
            
            try {
                const response = await fetch(`/api/queue/${queueId}/complete/${customerId}`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(`✅ ${customerName} successfully seated!`);
                    setTimeout(() => window.location.reload(), 500);
                } else {
                    alert(result.error || 'Failed to seat customer');
                    button.disabled = false;
                    button.textContent = 'Seated';
                }
            } catch (error) {
                console.error('Error seating customer:', error);
                alert('Error seating customer');
                button.disabled = false;
                button.textContent = 'Seated';
            }
        }
        
        async function selectCustomer(queueId, customerId) {
            if (!confirm('Are you sure you want to notify this customer?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/queue/${queueId}/call-specific`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: { 
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    },
                    body: JSON.stringify({ customerId })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(`Notified: ${result.customer.customerName}`);
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Failed to notify customer');
                }
            } catch (error) {
                console.error('Error notifying customer:', error);
                alert('Error notifying customer');
            }
        }
        
        function refreshQueue() {
            window.location.reload();
        }
        
        function copyQueueLink(queuePath) {
            const fullUrl = window.location.origin + queuePath;
            navigator.clipboard.writeText(fullUrl).then(() => {
                // Show copy feedback
                const button = event.target.closest('.btn-copy');
                const originalIcon = button.innerHTML;
                button.innerHTML = '<i class="bi bi-check"></i>';
                button.style.color = '#25D366';
                
                setTimeout(() => {
                    button.innerHTML = originalIcon;
                    button.style.color = '';
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy link:', err);
                alert('Failed to copy link');
            });
        }

        async function requeueCustomer(queueId, customerId) {
            if (!confirm('Are you sure you want to requeue this customer?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/queue/${queueId}/requeue/${customerId}`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: { 
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Customer requeued successfully');
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Failed to requeue customer');
                }
            } catch (error) {
                console.error('Error requeuing customer:', error);
                alert('Error requeuing customer');
            }
        }
    </script>
    
    <!-- Bottom Navigation for Mobile -->
    <nav class="bottom-nav">
        <a href="/dashboard" class="bottom-nav-item active">
            <i class="bi bi-speedometer2"></i>
            <span>Dashboard</span>
        </a>
        <a href="/dashboard/analytics" class="bottom-nav-item">
            <i class="bi bi-bar-chart"></i>
            <span>Analytics</span>
        </a>
        <button onclick="showQuickActions()" class="bottom-nav-item bottom-nav-fab">
            <i class="bi bi-plus-lg"></i>
        </button>
        <a href="/dashboard/whatsapp-setup" class="bottom-nav-item">
            <i class="bi bi-whatsapp"></i>
            <span>WhatsApp</span>
        </a>
        <a href="/dashboard/settings" class="bottom-nav-item">
            <i class="bi bi-gear"></i>
            <span>Settings</span>
        </a>
        <a href="/dashboard/help" class="bottom-nav-item">
            <i class="bi bi-question-circle"></i>
            <span>Help</span>
        </a>
    </nav>
    
    <script>
        // Quick Actions for FAB
        function showQuickActions() {
            // You can implement a modal or action sheet here
            const actions = [
                { label: 'Create Queue', action: () => window.location.href = '/dashboard/queues/new' },
                { label: 'Call Next', action: () => callNextCustomer() },
                { label: 'View Public Queue', action: () => {
                    const activeQueue = document.querySelector('[data-active-queue-id]');
                    if (activeQueue) {
                        window.open('/queue/' + activeQueue.dataset.activeQueueId, '_blank');
                    }
                }}
            ];
            
            // Simple implementation - you can enhance this
            const actionLabels = actions.map(a => a.label).join('\n');
            const choice = prompt('Quick Actions:\n' + actionLabels + '\n\nEnter action number (1-' + actions.length + ')');
            if (choice && actions[parseInt(choice) - 1]) {
                actions[parseInt(choice) - 1].action();
            }
        }
    </script>
    
</body>
</html> 