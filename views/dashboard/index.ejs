<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="/css/dashboard.css?v=<%= Date.now() %>" rel="stylesheet">
</head>
<body>
    <!-- Header -->
    <div class="header">
        <div class="header-content">
            <h1>StoreHub Queue Management System</h1>
            
            <!-- Mobile Hamburger Menu -->
            <button class="mobile-nav-toggle" aria-label="Toggle navigation">
                <span></span>
                <span></span>
                <span></span>
            </button>
            
            <div class="nav-container">
                <% if (typeof queues !== 'undefined' && queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <a href="/queue/<%= activeQueue.id || activeQueue._id %>" class="btn-view-public" target="_blank">
                            <i class="bi bi-eye"></i> View Public
                        </a>
                    <% } %>
                <% } %>
                <nav class="nav">
                    <a href="/dashboard" class="active">Dashboard</a>
                    <a href="/dashboard/analytics">Analytics</a>
                    <a href="/dashboard/whatsapp-setup">WhatsApp</a>
                    <a href="/dashboard/settings">Settings</a>
                    <a href="/dashboard/help">Help</a>
                </nav>
            </div>
            <div class="user-section">
                <div class="user-menu">
                    <form action="/auth/logout" method="POST" style="display: inline;">
                        <button type="submit" class="user-button">
                            <i class="bi bi-box-arrow-right"></i>
                            Logout
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Mobile Navigation Menu -->
    <div class="mobile-nav-overlay">
        <div class="mobile-nav-menu">
            <div class="mobile-nav-header">
                <h3><%= user.businessName %></h3>
                <button class="mobile-nav-close" aria-label="Close navigation">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <nav class="mobile-nav-links">
                <a href="/dashboard" class="active">
                    <i class="bi bi-speedometer2"></i>
                    Dashboard
                </a>
                <a href="/dashboard/analytics">
                    <i class="bi bi-bar-chart"></i>
                    Analytics
                </a>
                <a href="/dashboard/whatsapp-setup">
                    <i class="bi bi-whatsapp"></i>
                    WhatsApp
                </a>
                <a href="/dashboard/settings">
                    <i class="bi bi-gear"></i>
                    Settings
                </a>
                <a href="/dashboard/help">
                    <i class="bi bi-question-circle"></i>
                    Help
                </a>
                <% if (typeof queues !== 'undefined' && queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <a href="/queue/<%= activeQueue.id || activeQueue._id %>" target="_blank">
                            <i class="bi bi-eye"></i>
                            View Public Queue
                        </a>
                    <% } %>
                <% } %>
            </nav>
            <div class="mobile-nav-footer">
                <form action="/auth/logout" method="POST">
                    <button type="submit" class="mobile-logout-btn">
                        <i class="bi bi-box-arrow-right"></i>
                        Logout
                    </button>
                </form>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- WhatsApp Status Banner -->
        <div class="status-banner" id="whatsapp-status">
            <div class="status-icon">
                <i class="fab fa-whatsapp"></i>
            </div>
            <div class="status-text">
                <h6>WhatsApp Integration</h6>
                <p>Checking connection status...</p>
            </div>
        </div>

        <!-- Stats Grid -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="totalWaitingCount"><%= stats.totalWaiting %></div>
                <div class="stat-label">Customers Waiting</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="averageWaitTime"><%= stats.averageWaitTime %></div>
                <div class="stat-label">Avg Wait Time (min)</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= stats.totalServed || 0 %></div>
                <div class="stat-label">Served Today</div>
            </div>
        </div>

        <!-- Queue Management Tabs -->
        <div class="tabs-container">
            <div class="tabs-header">
                <button class="tab-button active" onclick="showTab('active-queue')">Active Queue</button>
                <button class="tab-button" onclick="showTab('seated-customers')">Seated Customers</button>
            </div>

            <!-- Active Queue Tab -->
            <div id="active-queue" class="tab-content active">
                <% if (queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <div class="queue-section">
                            <div class="queue-header">
                                <div class="queue-title">
                                    <h3><%= activeQueue.name %></h3>
                                    <p class="queue-description"><%= activeQueue.description || 'Main restaurant queue' %></p>
                                </div>
                                <div class="queue-summary">
                                    <div class="queue-stats">
                                        <div class="stat-item">
                                            <div class="number"><%= waitingCustomers.filter(c => c.status === 'waiting').length %></div>
                                            <div class="label">Waiting</div>
                                        </div>
                                        <div class="stat-item">
                                            <div class="number"><%= Math.round((waitingCustomers.filter(c => c.status === 'waiting').reduce((total, c) => total + Math.floor((new Date() - new Date(c.joinedAt)) / (1000 * 60)), 0) / Math.max(waitingCustomers.filter(c => c.status === 'waiting').length, 1)) || 0) %></div>
                                            <div class="label">Avg Wait</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Queue Actions Bar -->
                            <div class="queue-actions">
                                <div class="queue-actions-left">
                                    <button class="btn btn-outline" onclick="refreshQueue()">
                                        <i class="bi bi-arrow-clockwise"></i> Refresh
                                    </button>
                                </div>
                            </div>
                            
                            <% if (waitingCustomers.length > 0) { %>
                                <!-- Desktop Table View -->
                                <div class="customer-list customer-list-desktop">
                                    <div class="customer-list-header">
                                        <span>#</span>
                                        <span>Customer</span>
                                        <span>Phone</span>
                                        <span>Party</span>
                                        <span>Wait</span>
                                        <span>Special Requests</span>
                                        <span>Actions</span>
                                    </div>
                                    
                                    <% waitingCustomers.forEach((customer, index) => { %>
                                        <% const waitMinutes = Math.floor((new Date() - new Date(customer.joinedAt)) / (1000 * 60)); %>
                                        <div class="customer-row <%= customer.status === 'called' ? 'notified-customer' : (index === 0 && customer.status === 'waiting' ? 'next-customer' : '') %>">
                                            <div class="position">
                                                <%= customer.position %>
                                                <% if (index === 0 && customer.status === 'waiting') { %>
                                                    <div class="next-badge">NEXT</div>
                                                <% } %>
                                            </div>
                                            <div class="customer-name"><%= customer.customerName %></div>
                                            <div class="phone"><%= customer.phoneNumber %></div>
                                            <div class="party-size"><%= customer.partySize %></div>
                                            <div class="wait-time"><%= waitMinutes %> min</div>
                                            <div class="special-requests">
                                                <% if (customer.specialRequests && customer.specialRequests.trim()) { %>
                                                    <span class="special-requests-text" title="<%= customer.specialRequests %>">
                                                        <%= customer.specialRequests.length > 30 ? customer.specialRequests.substring(0, 30) + '...' : customer.specialRequests %>
                                                    </span>
                                                <% } else { %>
                                                    <span class="no-requests">-</span>
                                                <% } %>
                                            </div>
                                            <div class="actions">
                                                <% if (customer.status === 'called') { %>
                                                    <button class="btn-action btn-seated" onclick="markAsSeated('<%= activeQueue._id %>', '<%= customer.customerId %>')">Seated</button>
                                                <% } else if (index === 0) { %>
                                                    <button class="btn-action btn-notify" onclick="notifyNext('<%= activeQueue._id %>')">Notify</button>
                                                <% } else { %>
                                                    <button class="btn-action btn-select" onclick="selectCustomer('<%= activeQueue._id %>', '<%= customer.customerId %>')">Select</button>
                                                <% } %>
                                            </div>
                                        </div>
                                    <% }); %>
                                </div>
                                
                                <!-- Mobile Card View -->
                                <div class="customer-list-mobile">
                                    <% waitingCustomers.forEach((customer, index) => { %>
                                        <% const waitMinutes = Math.floor((new Date() - new Date(customer.joinedAt)) / (1000 * 60)); %>
                                        <div class="customer-card <%= customer.status === 'called' ? 'notified-customer' : (index === 0 && customer.status === 'waiting' ? 'next-customer' : '') %>">
                                            <div class="customer-card-header">
                                                <span class="position-badge"><%= customer.position %></span>
                                                <h3><%= customer.name %></h3>
                                                <% if (customer.status === 'called') { %>
                                                    <span class="status-badge notified">CALLED</span>
                                                <% } else if (index === 0 && customer.status === 'waiting') { %>
                                                    <span class="status-badge next">NEXT</span>
                                                <% } %>
                                            </div>
                                            <div class="customer-card-body">
                                                <div class="customer-info-row">
                                                    <i class="bi bi-phone"></i>
                                                    <span><%= customer.phone %></span>
                                                </div>
                                                <div class="customer-info-row">
                                                    <i class="bi bi-people"></i>
                                                    <span><%= customer.partySize %> people</span>
                                                </div>
                                                <div class="customer-info-row">
                                                    <i class="bi bi-clock"></i>
                                                    <span><%= waitMinutes %> min</span>
                                                </div>
                                                <% if (customer.specialRequests) { %>
                                                    <div class="customer-info-row">
                                                        <i class="bi bi-chat-text"></i>
                                                        <span><%= customer.specialRequests %></span>
                                                    </div>
                                                <% } %>
                                            </div>
                                            <div class="customer-card-actions">
                                                <% if (customer.status === 'waiting') { %>
                                                    <button onclick="callCustomer('<%= activeQueue._id %>', '<%= customer._id %>')" class="action-button call-button">
                                                        <i class="bi bi-megaphone"></i> Call
                                                    </button>
                                                <% } %>
                                                <button onclick="completeService('<%= activeQueue._id %>', '<%= customer._id %>')" class="action-button complete-button">
                                                    <i class="bi bi-check-circle"></i> Complete
                                                </button>
                                                <button onclick="requeueCustomer('<%= activeQueue._id %>', '<%= customer._id %>')" class="action-button requeue-button">
                                                    <i class="bi bi-arrow-repeat"></i> Requeue
                                                </button>
                                            </div>
                                        </div>
                                    <% }); %>
                                </div>
                            <% } else { %>
                                <div class="no-customers">
                                    <div class="empty-queue-icon">🍽️</div>
                                    <h4>No customers in queue</h4>
                                    <p>Your restaurant is ready to welcome the next customer!</p>
                                </div>
                            <% } %>
                        </div>
                    <% } %>
                <% } %>
            </div>
            
            <!-- Seated Customers Tab -->
            <div id="seated-customers" class="tab-content">
                <% if (queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <% const seatedCustomers = activeQueue.entries.filter(entry => entry.status === 'completed').sort((a, b) => new Date(b.completedAt) - new Date(a.completedAt)); %>
                        
                        <% if (seatedCustomers.length > 0) { %>
                            <div class="customer-list">
                                <div class="customer-list-header">
                                    <span>Table</span>
                                    <span>Customer</span>
                                    <span>Phone</span>
                                    <span>Party</span>
                                    <span>Seated Time</span>
                                    <span>Special Requests</span>
                                    <span>Actions</span>
                                </div>
                                
                                <% seatedCustomers.forEach((customer) => { %>
                                    <% const seatedMinutes = Math.floor((new Date() - new Date(customer.completedAt)) / (1000 * 60)); %>
                                    <div class="customer-row seated-customer-row">
                                        <div class="position">T<%= customer.tableNumber || '-' %></div>
                                        <div class="customer-name"><%= customer.customerName %></div>
                                        <div class="phone"><%= customer.customerPhone %></div>
                                        <div class="party-size"><%= customer.partySize %></div>
                                        <div class="wait-time"><%= seatedMinutes %> min</div>
                                        <div class="special-requests">
                                            <% if (customer.specialRequests && customer.specialRequests.trim()) { %>
                                                <span class="special-requests-text" title="<%= customer.specialRequests %>">
                                                    <%= customer.specialRequests.length > 30 ? customer.specialRequests.substring(0, 30) + '...' : customer.specialRequests %>
                                                </span>
                                            <% } else { %>
                                                <span class="no-requests">-</span>
                                            <% } %>
                                        </div>
                                        <div class="actions">
                                            <button class="btn-action btn-select" onclick="requeueCustomer('<%= activeQueue._id %>', '<%= customer.customerId %>')">Requeue</button>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        <% } else { %>
                            <div class="no-customers">
                                <div class="empty-queue-icon">🪑</div>
                                <h4>No seated customers</h4>
                                <p>Customers who are seated will appear here</p>
                            </div>
                        <% } %>
                    <% } else { %>
                        <div class="no-customers">
                            <h4>No active queue</h4>
                            <p>Activate a queue to see seated customers</p>
                        </div>
                    <% } %>
                <% } else { %>
                    <div class="no-customers">
                        <h4>No queues available</h4>
                        <p>Create a queue first to manage seated customers</p>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Indicators -->
    <div id="updating-indicator" class="updating-indicator">
        Updating dashboard...
    </div>
    
    <div id="connection-status" class="connection-status connecting">
        🔄 Connecting...
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Mobile Navigation Toggle
        const mobileNavToggle = document.querySelector('.mobile-nav-toggle');
        const mobileNavOverlay = document.querySelector('.mobile-nav-overlay');
        const mobileNavClose = document.querySelector('.mobile-nav-close');
        
        if (mobileNavToggle) {
            mobileNavToggle.addEventListener('click', () => {
                mobileNavOverlay.classList.add('active');
                document.body.style.overflow = 'hidden';
            });
        }
        
        if (mobileNavClose) {
            mobileNavClose.addEventListener('click', () => {
                mobileNavOverlay.classList.remove('active');
                document.body.style.overflow = '';
            });
        }
        
        // Close mobile nav when clicking overlay
        if (mobileNavOverlay) {
            mobileNavOverlay.addEventListener('click', (e) => {
                if (e.target === mobileNavOverlay) {
                    mobileNavOverlay.classList.remove('active');
                    document.body.style.overflow = '';
                }
            });
        }
        
        // Tab functionality
        function showTab(tabId) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Remove active class from all tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabId).classList.add('active');
            
            // Add active class to clicked button
            event.target.classList.add('active');
        }

        const socket = io();
        
        // Connection status monitoring
        socket.on('connect', () => {
            console.log('Socket.IO connected');
            updateConnectionStatus('connected');
        });
        
        socket.on('disconnect', () => {
            console.log('Socket.IO disconnected');
            updateConnectionStatus('disconnected');
        });
        
        socket.on('reconnect', () => {
            console.log('Socket.IO reconnected');
            updateConnectionStatus('connected');
            setTimeout(() => {
                refreshDashboardData();
            }, 1000);
        });
        
        function updateConnectionStatus(status) {
            const indicator = document.getElementById('connection-status');
            if (indicator) {
                indicator.className = `connection-status ${status}`;
                switch(status) {
                    case 'connected':
                        indicator.innerHTML = '🟢 Connected';
                        break;
                    case 'disconnected':
                        indicator.innerHTML = '🔴 Disconnected';
                        break;
                    case 'connecting':
                        indicator.innerHTML = '🔄 Connecting...';
                        break;
                }
            }
        }
        
        // Join merchant room for real-time updates
        const merchantId = '<%= user.merchantId || user.id || user._id %>';
        socket.emit('join-merchant-room', merchantId);
        
        // Update total waiting count on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateTotalWaitingCount();
            checkWhatsAppStatus();
            
            // Update stats every 30 seconds
            setInterval(updateTotalWaitingCount, 30000);
            setInterval(checkWhatsAppStatus, 60000);
            
            // Periodic full refresh every 2 minutes
            setInterval(refreshDashboardData, 120000);
        });
        
        // Socket.IO event listeners
        socket.on('queue-updated', (data) => {
            console.log('Queue updated event received:', data);
            handleQueueUpdate(data);
        });
        
        socket.on('customer-added', (data) => {
            console.log('Customer added event received:', data);
            handleQueueUpdate(data);
        });
        
        socket.on('customer-removed', (data) => {
            console.log('Customer removed event received:', data);
            handleQueueUpdate(data);
        });
        
        function handleQueueUpdate(data) {
            if (data && data.queue) {
                showUpdatingIndicator();
                updateQueueDisplay(data.queue);
                setTimeout(hideUpdatingIndicator, 1000);
            }
        }
        
        function showUpdatingIndicator() {
            const indicator = document.getElementById('updating-indicator');
            if (indicator) {
                indicator.classList.add('show');
            }
        }
        
        function hideUpdatingIndicator() {
            const indicator = document.getElementById('updating-indicator');
            if (indicator) {
                indicator.classList.remove('show');
            }
        }
        
        function updateQueueDisplay(queueData) {
            // Update queue stats
            const queueStatsElements = document.querySelectorAll('.queue-stats .number');
            if (queueStatsElements.length >= 2) {
                const waitingCustomers = queueData.entries.filter(entry => 
                    entry.status === 'waiting' || entry.status === 'called'
                ).length;
                
                queueStatsElements[0].textContent = waitingCustomers;
                
                // Calculate fresh average wait time
                const now = new Date();
                const waitingEntries = queueData.entries.filter(entry => entry.status === 'waiting');
                let avgWaitTime = 0;
                
                if (waitingEntries.length > 0) {
                    const totalWaitTime = waitingEntries.reduce((total, entry) => {
                        const waitMinutes = Math.floor((now - new Date(entry.joinedAt)) / (1000 * 60));
                        return total + waitMinutes;
                    }, 0);
                    avgWaitTime = Math.round(totalWaitTime / waitingEntries.length);
                }
                
                queueStatsElements[1].textContent = avgWaitTime;
                
                // Update main stats cards
                const totalWaitingElement = document.getElementById('totalWaitingCount');
                if (totalWaitingElement) {
                    totalWaitingElement.textContent = waitingCustomers;
                }
                
                const averageWaitTimeElement = document.getElementById('averageWaitTime');
                if (averageWaitTimeElement) {
                    averageWaitTimeElement.textContent = avgWaitTime;
                }
            }
            
            // Update customer list if needed
            const currentActiveTab = document.querySelector('.tab-content.active');
            if (currentActiveTab && currentActiveTab.id === 'active-queue') {
                updateActiveQueueCustomerList(queueData);
            }
        }
        
        function updateActiveQueueCustomerList(queueData) {
            // This would update the customer list dynamically
            // For now, we'll just refresh the page for simplicity
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        }
        
        function updateTotalWaitingCount() {
            // Update waiting count by counting only customers in "waiting" status from active queue tab
            const activeQueueTab = document.getElementById('active-queue');
            const totalWaitingElement = document.getElementById('totalWaitingCount');
            
            if (totalWaitingElement && activeQueueTab) {
                // Only count customers in the active queue tab that are actually waiting (not seated customers)
                const waitingElements = activeQueueTab.querySelectorAll('.customer-row');
                totalWaitingElement.textContent = waitingElements.length;
            }
        }
        
        function refreshDashboardData() {
            showUpdatingIndicator();
            fetch('/dashboard')
                .then(response => {
                    if (response.ok) {
                        setTimeout(() => {
                            window.location.reload();
                        }, 500);
                    }
                })
                .catch(error => {
                    console.error('Error refreshing dashboard:', error);
                })
                .finally(() => {
                    setTimeout(hideUpdatingIndicator, 1000);
                });
        }
        
        function checkWhatsAppStatus() {
            fetch('/api/whatsapp/status')
                .then(response => response.json())
                .then(data => {
                    const banner = document.getElementById('whatsapp-status');
                    const statusText = banner.querySelector('.status-text p');
                    
                    if (data.connected) {
                        banner.className = 'status-banner connected';
                        statusText.textContent = 'Connected and ready to receive messages';
                    } else {
                        banner.className = 'status-banner disconnected';
                        statusText.textContent = 'Not connected. Click WhatsApp tab to set up.';
                    }
                })
                .catch(error => {
                    console.error('Error checking WhatsApp status:', error);
                });
        }
        
        // Action functions
        async function notifyNext(queueId) {
            if (!confirm('Are you sure you want to notify the next customer?')) {
                return;
            }
            
            const button = event.target;
            button.disabled = true;
            button.textContent = 'Sending...';
            
            try {
                const response = await fetch(`/api/queue/${queueId}/call-next`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(`Notified: ${result.customer.customerName}`);
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Failed to notify customer');
                    button.disabled = false;
                    button.textContent = 'Notify';
                }
            } catch (error) {
                console.error('Error notifying customer:', error);
                alert('Error notifying customer');
                button.disabled = false;
                button.textContent = 'Notify';
            }
        }
        
        async function markAsSeated(queueId, customerId) {
            // Get customer name for confirmation
            const customerRow = event.target.closest('.customer-row');
            const customerName = customerRow.querySelector('.customer-name').textContent;
            
            // Confirmation dialog to prevent accidental clicks
            if (!confirm(`Are you sure you want to seat ${customerName}?\n\nThis will send them a welcome message with the menu link.`)) {
                return;
            }
            
            const button = event.target;
            button.disabled = true;
            button.textContent = 'Seating...';
            
            try {
                const response = await fetch(`/api/queue/${queueId}/complete/${customerId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(`✅ ${customerName} successfully seated!`);
                    setTimeout(() => window.location.reload(), 500);
                } else {
                    alert(result.error || 'Failed to seat customer');
                    button.disabled = false;
                    button.textContent = 'Seated';
                }
            } catch (error) {
                console.error('Error seating customer:', error);
                alert('Error seating customer');
                button.disabled = false;
                button.textContent = 'Seated';
            }
        }
        
        async function selectCustomer(queueId, customerId) {
            if (!confirm('Are you sure you want to notify this customer?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/queue/${queueId}/call-specific`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ customerId })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(`Notified: ${result.customer.customerName}`);
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Failed to notify customer');
                }
            } catch (error) {
                console.error('Error notifying customer:', error);
                alert('Error notifying customer');
            }
        }
        
        function refreshQueue() {
            window.location.reload();
        }
        
        function copyQueueLink(queuePath) {
            const fullUrl = window.location.origin + queuePath;
            navigator.clipboard.writeText(fullUrl).then(() => {
                // Show copy feedback
                const button = event.target.closest('.btn-copy');
                const originalIcon = button.innerHTML;
                button.innerHTML = '<i class="bi bi-check"></i>';
                button.style.color = '#25D366';
                
                setTimeout(() => {
                    button.innerHTML = originalIcon;
                    button.style.color = '';
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy link:', err);
                alert('Failed to copy link');
            });
        }

        async function requeueCustomer(queueId, customerId) {
            if (!confirm('Are you sure you want to requeue this customer?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/queue/${queueId}/requeue/${customerId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Customer requeued successfully');
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Failed to requeue customer');
                }
            } catch (error) {
                console.error('Error requeuing customer:', error);
                alert('Error requeuing customer');
            }
        }
    </script>
    
    <!-- Bottom Navigation for Mobile -->
    <nav class="bottom-nav">
        <a href="/dashboard" class="bottom-nav-item active">
            <i class="bi bi-speedometer2"></i>
            <span>Dashboard</span>
        </a>
        <a href="/dashboard/analytics" class="bottom-nav-item">
            <i class="bi bi-bar-chart"></i>
            <span>Analytics</span>
        </a>
        <button onclick="showQuickActions()" class="bottom-nav-item bottom-nav-fab">
            <i class="bi bi-plus-lg"></i>
        </button>
        <a href="/dashboard/whatsapp-setup" class="bottom-nav-item">
            <i class="bi bi-whatsapp"></i>
            <span>WhatsApp</span>
        </a>
        <a href="/dashboard/settings" class="bottom-nav-item">
            <i class="bi bi-gear"></i>
            <span>Settings</span>
        </a>
        <a href="/dashboard/help" class="bottom-nav-item">
            <i class="bi bi-question-circle"></i>
            <span>Help</span>
        </a>
    </nav>
    
    <script>
        // Quick Actions for FAB
        function showQuickActions() {
            // You can implement a modal or action sheet here
            const actions = [
                { label: 'Create Queue', action: () => window.location.href = '/dashboard/queues/new' },
                { label: 'Call Next', action: () => callNextCustomer() },
                { label: 'View Public Queue', action: () => {
                    const activeQueue = document.querySelector('[data-active-queue-id]');
                    if (activeQueue) {
                        window.open('/queue/' + activeQueue.dataset.activeQueueId, '_blank');
                    }
                }}
            ];
            
            // Simple implementation - you can enhance this
            const actionLabels = actions.map(a => a.label).join('\n');
            const choice = prompt('Quick Actions:\n' + actionLabels + '\n\nEnter action number (1-' + actions.length + ')');
            if (choice && actions[parseInt(choice) - 1]) {
                actions[parseInt(choice) - 1].action();
            }
        }
    </script>
</body>
</html> 