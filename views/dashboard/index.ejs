<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            min-height: 100vh;
            color: #333;
            overflow-x: hidden;
        }
        
        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .header h1 {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-size: 1.8rem;
            font-weight: 700;
            letter-spacing: -0.5px;
        }
        
        .nav {
            display: flex;
            gap: 0.5rem;
        }
        
        .nav a {
            text-decoration: none;
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
            padding: 0.75rem 1.5rem;
            border-radius: 12px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .nav a:hover {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }
        
        .nav a.active {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            box-shadow: 0 8px 25px rgba(255, 140, 0, 0.3);
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .whatsapp-status-banner {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 16px;
            padding: 1.5rem 2rem;
            margin-bottom: 2rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .whatsapp-status-banner:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
        }
        
        .whatsapp-status-banner.connected {
            background: rgba(76, 175, 80, 0.1);
            border-color: rgba(76, 175, 80, 0.3);
        }
        
        .whatsapp-status-banner.disconnected {
            background: rgba(244, 67, 54, 0.1);
            border-color: rgba(244, 67, 54, 0.3);
        }
        
        .whatsapp-status-content {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .whatsapp-status-icon {
            font-size: 1.5rem;
            color: rgba(255, 255, 255, 0.9);
        }
        
        .whatsapp-status-text h6 {
            margin: 0;
            font-size: 1rem;
            font-weight: 600;
            color: rgba(255, 255, 255, 0.9);
        }
        
        .whatsapp-status-text p {
            margin: 0;
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.7);
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 2rem;
            margin-bottom: 3rem;
        }
        
        .stat-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 2rem;
            border-radius: 20px;
            text-align: center;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
        }
        
        .stat-card:hover::before {
            opacity: 1;
        }
        
        .stat-number {
            font-size: 3rem;
            font-weight: 700;
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.5rem;
            position: relative;
            z-index: 1;
        }
        
        .stat-label {
            color: rgba(255, 255, 255, 0.8);
            font-size: 1rem;
            font-weight: 500;
            position: relative;
            z-index: 1;
        }
        
        .section {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 2.5rem;
            border-radius: 20px;
            margin-bottom: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .section:hover {
            transform: translateY(-4px);
            box-shadow: 0 16px 48px rgba(0, 0, 0, 0.15);
        }
        
        .section h2 {
            margin-bottom: 2rem;
            color: rgba(255, 255, 255, 0.9);
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: 600;
            font-size: 1.5rem;
        }
        
        .btn {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            padding: 0.875rem 2rem;
            border: none;
            border-radius: 12px;
            text-decoration: none;
            display: inline-block;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            font-weight: 600;
            font-size: 0.95rem;
            box-shadow: 0 4px 15px rgba(255, 140, 0, 0.3);
            position: relative;
            overflow: hidden;
        }
        
        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 140, 0, 0.4);
        }
        
        .btn:hover::before {
            left: 100%;
        }
        
        .btn-secondary {
            background: linear-gradient(135deg, #6c757d, #495057);
            box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
        }
        
        .btn-secondary:hover {
            box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
        }
        
        .btn-sm {
            padding: 0.625rem 1.5rem;
            font-size: 0.875rem;
        }
        
        .tabs-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            margin-bottom: 2rem;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .tabs-header {
            display: flex;
            background: rgba(255, 255, 255, 0.05);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .tab-button {
            flex: 1;
            padding: 1.5rem 2rem;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 1.1rem;
            font-weight: 500;
            color: rgba(255, 255, 255, 0.7);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border-bottom: 3px solid transparent;
            position: relative;
        }
        
        .tab-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(255, 140, 0, 0.1), rgba(255, 107, 53, 0.1));
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .tab-button.active {
            color: white;
            background: rgba(255, 255, 255, 0.1);
            border-bottom-color: #ff8c00;
        }
        
        .tab-button.active::before {
            opacity: 1;
        }
        
        .tab-button:hover:not(.active) {
            background: rgba(255, 255, 255, 0.05);
            color: rgba(255, 255, 255, 0.9);
        }
        
        .tab-content {
            display: none;
            padding: 2.5rem;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .queue-section {
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 16px;
            background: rgba(255, 255, 255, 0.05);
            overflow: hidden;
            backdrop-filter: blur(10px);
        }
        
        .queue-header {
            background: rgba(255, 255, 255, 0.1);
            padding: 2.5rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 2rem;
        }
        
        .queue-title h3 {
            margin: 0 0 0.5rem 0;
            color: rgba(255, 255, 255, 0.9);
            font-size: 1.8rem;
            font-weight: 600;
        }
        
        .queue-description {
            margin: 0;
            color: rgba(255, 255, 255, 0.7);
            font-size: 1rem;
        }
        
        .queue-summary {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 1.5rem;
        }
        
        .queue-stats {
            display: flex;
            gap: 2rem;
        }
        
        .stat-item {
            text-align: center;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }
        
        .stat-item:hover {
            transform: translateY(-2px);
            background: rgba(255, 255, 255, 0.15);
        }
        
        .stat-item .stat-number {
            display: block;
            font-size: 1.8rem;
            font-weight: 700;
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.25rem;
        }
        
        .stat-item .stat-label {
            display: block;
            font-size: 0.85rem;
            color: rgba(255, 255, 255, 0.7);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-weight: 500;
        }
        
        .customer-list {
            background: rgba(255, 255, 255, 0.05);
        }
        
        .customer-list-header {
            display: grid;
            grid-template-columns: 100px 1fr 150px 80px 100px 150px 120px;
            gap: 1rem;
            padding: 1.5rem 2rem;
            background: rgba(255, 255, 255, 0.1);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            font-weight: 600;
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.8);
        }
        
        .customer-row {
            display: grid;
            grid-template-columns: 100px 1fr 150px 80px 100px 150px 120px;
            gap: 1rem;
            padding: 1.5rem 2rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            align-items: center;
            color: rgba(255, 255, 255, 0.9);
        }
        
        .customer-row:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateX(4px);
        }
        
        .customer-row.next-customer {
            background: rgba(255, 140, 0, 0.2);
            border-left: 4px solid #ff8c00;
            box-shadow: 0 0 20px rgba(255, 140, 0, 0.3);
        }
        
        .customer-row.notified-customer {
            background: rgba(33, 150, 243, 0.2);
            border-left: 4px solid #2196f3;
            box-shadow: 0 0 20px rgba(33, 150, 243, 0.3);
        }
        
        .customer-row .position {
            font-weight: 700;
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-size: 1.1rem;
        }
        
        .next-badge {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            padding: 0.375rem 0.75rem;
            border-radius: 8px;
            font-size: 0.75rem;
            font-weight: 600;
            letter-spacing: 0.5px;
            box-shadow: 0 2px 8px rgba(255, 140, 0, 0.3);
        }
        
        .btn-action {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 8px;
            font-size: 0.8rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(10px);
        }
        
        .btn-notify {
            background: linear-gradient(135deg, #4caf50, #45a049);
            color: white;
            box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3);
        }
        
        .btn-notify:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(76, 175, 80, 0.4);
        }
        
        .btn-select {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            box-shadow: 0 2px 8px rgba(255, 140, 0, 0.3);
        }
        
        .btn-select:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(255, 140, 0, 0.4);
        }
        
        .btn-seated {
            background: linear-gradient(135deg, #4caf50, #45a049);
            color: white;
            box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3);
        }
        
        .btn-seated:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(76, 175, 80, 0.4);
        }
        
        .no-customers {
            padding: 4rem 2rem;
            text-align: center;
            color: rgba(255, 255, 255, 0.7);
        }
        
        .empty-queue-icon {
            font-size: 4rem;
            margin-bottom: 1.5rem;
            opacity: 0.6;
        }
        
        .no-customers h4 {
            margin: 0 0 1rem 0;
            color: rgba(255, 255, 255, 0.9);
            font-size: 1.3rem;
            font-weight: 600;
        }
        
        .no-customers p {
            margin: 0;
            font-size: 1rem;
        }
        
        .empty-state {
            text-align: center;
            padding: 4rem;
            color: rgba(255, 255, 255, 0.7);
        }
        
        .empty-state h3 {
            margin-bottom: 1.5rem;
            color: rgba(255, 255, 255, 0.9);
            font-size: 1.5rem;
            font-weight: 600;
        }
        
        /* Floating particles animation */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }
        
        .particle {
            position: absolute;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            animation: float 6s ease-in-out infinite;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }
        
        /* Loading animations */
        .updating-indicator {
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            font-size: 0.9rem;
            font-weight: 500;
            z-index: 1000;
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(20px);
            box-shadow: 0 8px 25px rgba(255, 140, 0, 0.3);
        }
        
        .updating-indicator.show {
            opacity: 1;
            transform: translateY(0);
        }
        
        .connection-status {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 0.75rem 1.5rem;
            border-radius: 25px;
            font-size: 0.85rem;
            font-weight: 500;
            z-index: 1000;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .connection-status.connected {
            background: rgba(76, 175, 80, 0.9);
            color: white;
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        }
        
        .connection-status.disconnected {
            background: rgba(244, 67, 54, 0.9);
            color: white;
            box-shadow: 0 4px 15px rgba(244, 67, 54, 0.3);
        }
        
        .connection-status.connecting {
            background: rgba(255, 140, 0, 0.9);
            color: white;
            box-shadow: 0 4px 15px rgba(255, 140, 0, 0.3);
        }
        
        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                gap: 1rem;
                padding: 1rem;
            }
            
            .nav {
                flex-wrap: wrap;
                justify-content: center;
                gap: 0.5rem;
            }
            
            .nav a {
                padding: 0.5rem 1rem;
                font-size: 0.9rem;
            }
            
            .container {
                padding: 1rem;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .stat-card {
                padding: 1.5rem;
            }
            
            .stat-number {
                font-size: 2.5rem;
            }
            
            .queue-header {
                flex-direction: column;
                gap: 1.5rem;
                align-items: flex-start;
                padding: 2rem;
            }
            
            .queue-summary {
                align-items: flex-start;
                width: 100%;
            }
            
            .queue-stats {
                flex-direction: column;
                gap: 1rem;
                width: 100%;
            }
            
            .stat-item {
                text-align: left;
            }
            
            .customer-list-header,
            .customer-row {
                grid-template-columns: 80px 1fr 60px 80px;
                gap: 0.5rem;
                padding: 1rem;
            }
            
            .customer-list-header span:nth-child(3),
            .customer-list-header span:nth-child(5),
            .customer-row .phone,
            .customer-row .wait-time {
                display: none;
            }
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
        }
        
        ::-webkit-scrollbar-thumb {
            background: rgba(255, 140, 0, 0.5);
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 140, 0, 0.7);
        }
    </style>
</head>
<body>
    <!-- Floating particles -->
    <div class="particles">
        <div class="particle" style="left: 10%; top: 20%; width: 4px; height: 4px; animation-delay: 0s;"></div>
        <div class="particle" style="left: 20%; top: 80%; width: 6px; height: 6px; animation-delay: 1s;"></div>
        <div class="particle" style="left: 60%; top: 30%; width: 3px; height: 3px; animation-delay: 2s;"></div>
        <div class="particle" style="left: 80%; top: 70%; width: 5px; height: 5px; animation-delay: 3s;"></div>
        <div class="particle" style="left: 30%; top: 10%; width: 4px; height: 4px; animation-delay: 4s;"></div>
        <div class="particle" style="left: 70%; top: 90%; width: 3px; height: 3px; animation-delay: 5s;"></div>
    </div>

    <header class="header">
        <h1>Smart Queue Manager</h1>
        <nav class="nav">
            <a href="/dashboard" class="active">Dashboard</a>
            <a href="/dashboard/whatsapp-setup">WhatsApp</a>
            <a href="/dashboard/analytics">Analytics</a>
            <a href="/dashboard/settings">Settings</a>
        </nav>
    </header>

    <div class="container">
        <!-- WhatsApp Status Banner -->
        <div id="whatsappStatusBanner" class="whatsapp-status-banner" style="display: none;">
            <div class="whatsapp-status-content">
                <div class="whatsapp-status-icon">
                    <i id="whatsappStatusIcon" class="bi bi-whatsapp"></i>
                </div>
                <div class="whatsapp-status-text">
                    <h6 id="whatsappStatusTitle">WhatsApp Status</h6>
                    <p id="whatsappStatusMessage">Checking connection...</p>
                </div>
            </div>
            <div>
                <a id="whatsappStatusAction" href="/dashboard/whatsapp-setup" class="btn btn-sm">Setup WhatsApp</a>
            </div>
        </div>
        
        <!-- Stats Overview -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="totalWaitingCount"><%= stats.totalWaiting || 0 %></div>
                <div class="stat-label">Currently Waiting</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="averageWaitTime"><%= stats.averageWaitTime %></div>
                <div class="stat-label">Avg Wait Time (min)</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= stats.totalCustomersToday %></div>
                <div class="stat-label">Customers Today</div>
            </div>
        </div>

        <!-- Queue Management Tabs -->
        <div class="tabs-container">
            <div class="tabs-header">
                <button class="tab-button active" onclick="switchTab('active-queue')">Active Queue</button>
                <button class="tab-button" onclick="switchTab('seated-customers')">Seated Customers</button>
            </div>
            
            <!-- Active Queue Tab -->
            <div id="active-queue" class="tab-content active">
                <% if (queues.length === 0) { %>
                    <div class="empty-state">
                        <h3>Queue not set up yet</h3>
                        <p>Set up your restaurant queue to start managing customer flow</p>
                        <button class="btn" onclick="showCreateModal()">Set Up Queue</button>
                    </div>
                <% } else { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (!activeQueue) { %>
                        <div class="no-active-queues">
                            <h3>No active queues</h3>
                            <p>Activate a queue to start managing customers</p>
                        </div>
                    <% } else { %>
                        <div class="single-queue-container">
                            <div class="queue-section">
                                <div class="queue-header">
                                    <div class="queue-title">
                                        <h3><%= activeQueue.name %></h3>
                                        <p class="queue-description"><%= activeQueue.description || 'No description provided' %></p>
                                    </div>
                                    <div class="queue-summary">
                                        <div class="queue-stats">
                                            <div class="stat-item">
                                                <span class="stat-number"><%= activeQueue.entries.filter(e => e.status === 'waiting' || e.status === 'called').length %></span>
                                                <span class="stat-label">Waiting</span>
                                            </div>
                                            <div class="stat-item">
                                                <span class="stat-number"><%= activeQueue.averageServiceTime || 0 %></span>
                                                <span class="stat-label">Avg Time</span>
                                            </div>
                                            <div class="stat-item">
                                                <span class="stat-number"><%= activeQueue.maxCapacity %></span>
                                                <span class="stat-label">Capacity</span>
                                            </div>
                                        </div>
                                        <div class="queue-actions">
                                            <button class="btn btn-sm" onclick="addCustomer('<%= activeQueue._id %>')">Add Customer</button>
                                            <button class="btn btn-secondary btn-sm" onclick="viewQueueDetails('<%= activeQueue._id %>')">View Details</button>
                                        </div>
                                    </div>
                                </div>
                                
                                <% const waitingCustomers = activeQueue.entries.filter(entry => entry.status === 'waiting' || entry.status === 'called').sort((a, b) => { if (a.status === 'called' && b.status === 'waiting') return -1; if (a.status === 'waiting' && b.status === 'called') return 1; return a.position - b.position; }); %>
                                
                                <% if (waitingCustomers.length > 0) { %>
                                    <div class="customer-list">
                                        <div class="customer-list-header">
                                            <span>Position</span>
                                            <span>Customer</span>
                                            <span>Phone</span>
                                            <span>Party</span>
                                            <span>Wait Time</span>
                                            <span>Special Requests</span>
                                            <span>Actions</span>
                                        </div>
                                        
                                        <% waitingCustomers.forEach((customer, index) => { %>
                                            <% const waitMinutes = Math.floor((new Date() - new Date(customer.joinedAt)) / (1000 * 60)); %>
                                            <div class="customer-row <%= customer.status === 'called' ? 'notified-customer' : (index === 0 && customer.status === 'waiting' ? 'next-customer' : '') %>">
                                                <div class="position">
                                                    <%= customer.position %>
                                                    <% if (index === 0 && customer.status === 'waiting') { %>
                                                        <div class="next-badge">NEXT</div>
                                                    <% } %>
                                                </div>
                                                <div class="customer-name"><%= customer.customerName %></div>
                                                <div class="phone"><%= customer.phoneNumber %></div>
                                                <div class="party-size"><%= customer.partySize %></div>
                                                <div class="wait-time"><%= waitMinutes %> min</div>
                                                <div class="special-requests">
                                                    <% if (customer.specialRequests && customer.specialRequests.trim()) { %>
                                                        <span class="special-requests-text" title="<%= customer.specialRequests %>">
                                                            <%= customer.specialRequests.length > 30 ? customer.specialRequests.substring(0, 30) + '...' : customer.specialRequests %>
                                                        </span>
                                                    <% } else { %>
                                                        <span class="no-requests">-</span>
                                                    <% } %>
                                                </div>
                                                <div class="actions">
                                                    <% if (customer.status === 'called') { %>
                                                        <button class="btn-action btn-seated" onclick="markAsSeated('<%= activeQueue._id %>', '<%= customer.customerId %>')">Seated</button>
                                                    <% } else if (index === 0) { %>
                                                        <button class="btn-action btn-notify" onclick="notifyNext('<%= activeQueue._id %>')">Notify</button>
                                                    <% } else { %>
                                                        <button class="btn-action btn-select" onclick="selectCustomer('<%= activeQueue._id %>', '<%= customer.customerId %>')">Select</button>
                                                    <% } %>
                                                </div>
                                            </div>
                                        <% }); %>
                                    </div>
                                <% } else { %>
                                    <div class="no-customers">
                                        <div class="empty-queue-icon">🍽️</div>
                                        <h4>No customers in queue</h4>
                                        <p>Your restaurant is ready to welcome the next customer!</p>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                    <% } %>
                <% } %>
            </div>
            
            <!-- Seated Customers Tab -->
            <div id="seated-customers" class="tab-content">
                <% if (queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <% const seatedCustomers = activeQueue.entries.filter(entry => entry.status === 'seated').sort((a, b) => new Date(b.seatedAt) - new Date(a.seatedAt)); %>
                        
                        <% if (seatedCustomers.length > 0) { %>
                            <div class="customer-list">
                                <div class="customer-list-header">
                                    <span>Table</span>
                                    <span>Customer</span>
                                    <span>Phone</span>
                                    <span>Party</span>
                                    <span>Seated Time</span>
                                    <span>Special Requests</span>
                                    <span>Actions</span>
                                </div>
                                
                                <% seatedCustomers.forEach((customer) => { %>
                                    <% const seatedMinutes = Math.floor((new Date() - new Date(customer.seatedAt)) / (1000 * 60)); %>
                                    <div class="customer-row seated-customer-row">
                                        <div class="position">T<%= customer.tableNumber || '-' %></div>
                                        <div class="customer-name"><%= customer.customerName %></div>
                                        <div class="phone"><%= customer.phoneNumber %></div>
                                        <div class="party-size"><%= customer.partySize %></div>
                                        <div class="seated-time"><%= seatedMinutes %> min</div>
                                        <div class="special-requests">
                                            <% if (customer.specialRequests && customer.specialRequests.trim()) { %>
                                                <span class="special-requests-text" title="<%= customer.specialRequests %>">
                                                    <%= customer.specialRequests.length > 30 ? customer.specialRequests.substring(0, 30) + '...' : customer.specialRequests %>
                                                </span>
                                            <% } else { %>
                                                <span class="no-requests">-</span>
                                            <% } %>
                                        </div>
                                        <div class="actions">
                                            <button class="requeue-btn" onclick="requeueCustomer('<%= activeQueue._id %>', '<%= customer.customerId %>')">Requeue</button>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        <% } else { %>
                            <div class="no-customers">
                                <div class="empty-queue-icon">🪑</div>
                                <h4>No seated customers</h4>
                                <p>Customers who are seated will appear here</p>
                            </div>
                        <% } %>
                    <% } else { %>
                        <div class="empty-state">
                            <h3>No active queue</h3>
                            <p>Activate a queue to see seated customers</p>
                        </div>
                    <% } %>
                <% } else { %>
                    <div class="empty-state">
                        <h3>No queues available</h3>
                        <p>Create a queue first to manage seated customers</p>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Updating Indicator -->
    <div id="updating-indicator" class="updating-indicator">
        Updating dashboard...
    </div>
    
    <!-- Connection Status Indicator -->
    <div id="connection-status" class="connection-status connecting">
        🔄 Connecting...
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        
        // Connection status monitoring
        socket.on('connect', () => {
            console.log('Socket.IO connected');
            updateConnectionStatus('connected');
        });
        
        socket.on('disconnect', () => {
            console.log('Socket.IO disconnected');
            updateConnectionStatus('disconnected');
        });
        
        socket.on('reconnect', () => {
            console.log('Socket.IO reconnected');
            updateConnectionStatus('connected');
            // Refresh data after reconnection
            setTimeout(() => {
                refreshDashboardData();
            }, 1000);
        });
        
        // Update connection status indicator
        function updateConnectionStatus(status) {
            const indicator = document.getElementById('connection-status');
            if (indicator) {
                indicator.className = `connection-status ${status}`;
                switch(status) {
                    case 'connected':
                        indicator.innerHTML = '🟢 Connected';
                        break;
                    case 'disconnected':
                        indicator.innerHTML = '🔴 Disconnected';
                        break;
                    case 'connecting':
                        indicator.innerHTML = '🔄 Connecting...';
                        break;
                }
            }
        }
        
        // Join merchant room for real-time updates
        socket.emit('join-merchant-room', '507f1f77bcf86cd799439011');
        
        // Update total waiting count on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateTotalWaitingCount();
            
            // Update stats every 30 seconds to keep wait times current
            setInterval(updateTotalWaitingCount, 30000);
            
            // Periodic full refresh every 2 minutes as fallback
            setInterval(refreshDashboardData, 120000);
        });
        
        // Enhanced Socket.IO event listeners
        socket.on('queue-updated', (data) => {
            console.log('Queue updated event received:', data);
            handleQueueUpdate(data);
        });
        
        socket.on('customer-added', (data) => {
            console.log('Customer added event received:', data);
            handleQueueUpdate(data);
        });
        
        socket.on('customer-removed', (data) => {
            console.log('Customer removed event received:', data);
            handleQueueUpdate(data);
        });
        
        // Comprehensive queue update handler
        function handleQueueUpdate(data) {
            try {
                console.log('Processing queue update:', data.action);
                
                switch(data.action) {
                    case 'customer-called':
                    case 'customer-called-specific':
                        if (data.customer) {
                            updateCustomerRowToNotified(data.customer);
                        }
                        break;
                        
                    case 'customer-completed':
                        if (data.customer) {
                            removeCustomerRow(data.customer.customerName);
                        }
                        break;
                        
                    case 'customer-requeued':
                        // Full refresh for requeue to update both tabs
                        setTimeout(() => {
                            window.location.reload();
                        }, 500);
                        return;
                        
                    default:
                        // For other actions, do a targeted refresh
                        refreshDashboardData();
                        return;
                }
                
                // Update stats after processing specific actions
                setTimeout(() => {
                    updateTotalWaitingCount();
                    updateAverageWaitTime();
                }, 200);
                
            } catch (error) {
                console.error('Error handling queue update:', error);
                // Fallback to data refresh
                refreshDashboardData();
            }
        }
        
        // Refresh dashboard data from server
        async function refreshDashboardData() {
            try {
                console.log('Refreshing dashboard data...');
                showUpdatingIndicator();
                
                const response = await fetch('/api/queue');
                const result = await response.json();
                
                if (result.success && result.queues && result.queues.length > 0) {
                    const activeQueue = result.queues.find(q => q.isActive);
                    if (activeQueue) {
                        updateQueueDisplay(activeQueue);
                        updateTotalWaitingCount();
                        updateAverageWaitTime();
                    }
                }
                
                hideUpdatingIndicator();
            } catch (error) {
                console.error('Error refreshing dashboard data:', error);
                hideUpdatingIndicator();
            }
        }
        
        // Show updating indicator
        function showUpdatingIndicator() {
            const indicator = document.getElementById('updating-indicator');
            if (indicator) {
                indicator.classList.add('show');
            }
        }
        
        // Hide updating indicator
        function hideUpdatingIndicator() {
            const indicator = document.getElementById('updating-indicator');
            if (indicator) {
                indicator.classList.remove('show');
            }
        }
        
        // Update queue display with fresh data
        function updateQueueDisplay(queueData) {
            // Update queue stats with fresh data from server
            const queueStatsElements = document.querySelectorAll('.queue-stats .stat-number');
            if (queueStatsElements.length >= 2) {
                // Calculate current waiting customers from server data
                const waitingCustomers = queueData.entries.filter(entry => 
                    entry.status === 'waiting' || entry.status === 'called'
                ).length;
                
                queueStatsElements[0].textContent = waitingCustomers;
                

                
                // Calculate fresh average wait time from server data
                const now = new Date();
                const waitingEntries = queueData.entries.filter(entry => entry.status === 'waiting');
                let avgWaitTime = 0;
                
                if (waitingEntries.length > 0) {
                    const totalWaitTime = waitingEntries.reduce((total, entry) => {
                        const waitMinutes = Math.floor((now - new Date(entry.joinedAt)) / (1000 * 60));
                        return total + waitMinutes;
                    }, 0);
                    avgWaitTime = Math.round(totalWaitTime / waitingEntries.length);
                }
                
                queueStatsElements[1].textContent = avgWaitTime;
                
                // Also update the main stats cards
                const totalWaitingElement = document.getElementById('totalWaitingCount');
                if (totalWaitingElement) {
                    totalWaitingElement.textContent = waitingCustomers;
                }
                
                const averageWaitTimeElement = document.getElementById('averageWaitTime');
                if (averageWaitTimeElement) {
                    averageWaitTimeElement.textContent = avgWaitTime;
                }
            }
            
            // Update customer list if needed
            const currentActiveTab = document.querySelector('.tab-content.active');
            if (currentActiveTab && currentActiveTab.id === 'active-queue') {
                updateActiveQueueCustomerList(queueData);
            }
        }
        
        // Update active queue customer list
        function updateActiveQueueCustomerList(queueData) {
            const customerListContainer = document.querySelector('#active-queue .customer-list');
            const noCustomersContainer = document.querySelector('#active-queue .no-customers');
            
            const waitingCustomers = queueData.entries
                .filter(entry => entry.status === 'waiting' || entry.status === 'called')
                .sort((a, b) => {
                    if (a.status === 'called' && b.status === 'waiting') return -1;
                    if (a.status === 'waiting' && b.status === 'called') return 1;
                    return a.position - b.position;
                });
            
            if (waitingCustomers.length === 0) {
                if (customerListContainer) customerListContainer.style.display = 'none';
                if (noCustomersContainer) {
                    noCustomersContainer.style.display = 'block';
                } else {
                    // Create no customers message if it doesn't exist
                    const activeQueueTab = document.getElementById('active-queue');
                    const queueSection = activeQueueTab.querySelector('.queue-section');
                    if (queueSection) {
                        const noCustomersDiv = document.createElement('div');
                        noCustomersDiv.className = 'no-customers';
                        noCustomersDiv.innerHTML = `
                            <div class="empty-queue-icon">🍽️</div>
                            <h4>No customers in queue</h4>
                            <p>Your restaurant is ready to welcome the next customer!</p>
                        `;
                        queueSection.appendChild(noCustomersDiv);
                    }
                }
            } else {
                if (noCustomersContainer) noCustomersContainer.style.display = 'none';
                if (customerListContainer) {
                    customerListContainer.style.display = 'block';
                    // Update customer rows
                    updateCustomerRows(customerListContainer, waitingCustomers, queueData._id);
                }
            }
        }
        
        // Update customer rows with fresh data
        function updateCustomerRows(container, customers, queueId) {
            const customerRowsContainer = container.querySelector('.customer-list-header').parentNode;
            const existingRows = customerRowsContainer.querySelectorAll('.customer-row');
            
            // Remove existing customer rows
            existingRows.forEach(row => row.remove());
            
            // Add fresh customer rows
            customers.forEach((customer, index) => {
                const row = createCustomerRow(customer, index, queueId);
                customerRowsContainer.appendChild(row);
            });
        }
        
        // Create a customer row element
        function createCustomerRow(customer, index, queueId) {
            const row = document.createElement('div');
            row.className = `customer-row ${customer.status === 'called' ? 'notified-customer' : (index === 0 && customer.status === 'waiting' ? 'next-customer' : '')}`;
            
            const waitMinutes = Math.floor((new Date() - new Date(customer.joinedAt)) / (1000 * 60));
            const specialRequestsDisplay = customer.specialRequests && customer.specialRequests.trim() 
                ? `<span class="special-requests-text" title="${customer.specialRequests}">${customer.specialRequests.length > 30 ? customer.specialRequests.substring(0, 30) + '...' : customer.specialRequests}</span>`
                : '<span class="no-requests">-</span>';
            
            let actionButton = '';
            if (customer.status === 'called') {
                actionButton = `<button class="btn-action btn-seated" onclick="markAsSeated('${queueId}', '${customer.customerId}')">Seated</button>`;
            } else if (index === 0) {
                actionButton = `<button class="btn-action btn-notify" onclick="notifyNext('${queueId}')">Notify</button>`;
            } else {
                actionButton = `<button class="btn-action btn-select" onclick="notifySpecificCustomer('${queueId}', '${customer._id}')">Notify</button>`;
            }
            
            // Add NEXT badge for first waiting customer
            const nextBadge = (index === 0 && customer.status === 'waiting') ? '<div class="next-badge">NEXT</div>' : '';
            
            row.innerHTML = `
                <div class="position">
                    ${customer.position}
                    ${nextBadge}
                </div>
                <div class="customer-name">${customer.customerName}</div>
                <div class="phone">${customer.phoneNumber}</div>
                <div class="party-size">${customer.partySize}</div>
                <div class="wait-time">${waitMinutes} min</div>
                <div class="special-requests">${specialRequestsDisplay}</div>
                <div class="actions">${actionButton}</div>
            `;
            
            return row;
        }
        
        // Notify next customer
        async function notifyNext(queueId) {
            // Add confirmation dialog to prevent accidental notifications
            if (!confirm('Are you sure you want to notify the next customer? This will send them a WhatsApp message that their table is ready.')) {
                return;
            }
            
            // Find and disable the button
            const notifyButton = document.querySelector(`button[onclick*="notifyNext('${queueId}')"]`);
            if (notifyButton) {
                notifyButton.disabled = true;
                notifyButton.textContent = 'Sending...';
                notifyButton.style.opacity = '0.6';
            }
            
            try {
                const response = await fetch(`/api/queue/${queueId}/call-next`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Immediately update the UI
                    updateCustomerRowToNotified(result.customer);
                    alert(`Notified: ${result.customer.customerName} (${result.customer.partySize || 1} pax)`);
                    
                    // Force refresh dashboard data after a short delay
                    setTimeout(() => {
                        refreshDashboardData();
                    }, 1000);
                } else {
                    alert(result.error || 'Failed to notify next customer');
                    // Re-enable button on error
                    if (notifyButton) {
                        notifyButton.disabled = false;
                        notifyButton.textContent = 'Notify';
                        notifyButton.style.opacity = '1';
                    }
                }
            } catch (error) {
                console.error('Error notifying next customer:', error);
                alert('Error notifying next customer');
                // Re-enable button on error
                if (notifyButton) {
                    notifyButton.disabled = false;
                    notifyButton.textContent = 'Notify';
                    notifyButton.style.opacity = '1';
                }
            }
        }
        
        // Notify specific customer (override queue order)
        async function notifySpecificCustomer(queueId, customerId) {
            if (!confirm('Are you sure you want to notify this customer out of order? This will skip ahead in the queue.')) {
                return;
            }
            
            // Find and disable the button
            const notifyButton = document.querySelector(`button[onclick*="notifySpecificCustomer('${queueId}', '${customerId}')"]`);
            if (notifyButton) {
                notifyButton.disabled = true;
                notifyButton.textContent = 'Sending...';
                notifyButton.style.opacity = '0.6';
            }
            
            try {
                const response = await fetch(`/api/queue/${queueId}/call-specific`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ customerId })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Immediately update the UI
                    updateCustomerRowToNotified(result.customer);
                    alert(`Notified: ${result.customer.customerName} (${result.customer.partySize || 1} pax) - Skipped ahead in queue`);
                    
                    // Force refresh dashboard data after a short delay
                    setTimeout(() => {
                        refreshDashboardData();
                    }, 1000);
                } else {
                    alert(result.error || 'Failed to notify specific customer');
                    // Re-enable button on error
                    if (notifyButton) {
                        notifyButton.disabled = false;
                        notifyButton.textContent = 'Notify';
                        notifyButton.style.opacity = '1';
                    }
                }
            } catch (error) {
                console.error('Error notifying specific customer:', error);
                alert('Error notifying specific customer');
                // Re-enable button on error
                if (notifyButton) {
                    notifyButton.disabled = false;
                    notifyButton.textContent = 'Notify';
                    notifyButton.style.opacity = '1';
                }
            }
        }
        
        // Update customer row to notified status immediately
        function updateCustomerRowToNotified(customer) {
            // Find the customer row by customer ID or name
            const customerRows = document.querySelectorAll('.customer-row');
            customerRows.forEach(row => {
                const nameSpan = row.querySelector('.customer-name');
                if (nameSpan && nameSpan.textContent === customer.customerName) {
                    // Update row styling
                    row.className = 'customer-row notified-customer';
                    
                    // Update position badge
                    const positionSpan = row.querySelector('.position');
                    if (positionSpan) {
                        positionSpan.innerHTML = '<span class="notified-badge">NOTIFIED</span>';
                    }
                    
                    // Update action button
                    const actionsSpan = row.querySelector('.actions');
                    if (actionsSpan) {
                        // Get queue ID from existing notify button
                        const existingButton = actionsSpan.querySelector('button[onclick*="notify"]');
                        let queueId = '';
                        if (existingButton) {
                            const onclickAttr = existingButton.getAttribute('onclick');
                            const match = onclickAttr.match(/'([^']+)'/);
                            queueId = match ? match[1] : '';
                        }
                        actionsSpan.innerHTML = `<button class="btn-action btn-seated" onclick="markAsSeated('${queueId}', '${customer.customerId}')">Seated</button>`;
                    }
                    
                    // Add smooth transition effect
                    row.style.transition = 'all 0.3s ease';
                    row.style.transform = 'scale(1.02)';
                    setTimeout(() => {
                        row.style.transform = 'scale(1)';
                    }, 300);
                }
            });
            
            // Update stats
            updateTotalWaitingCount();
        }
        
        // Mark customer as seated (remove from queue)
        async function markAsSeated(queueId, customerId) {
            // Add confirmation dialog to prevent accidental removal
            if (!confirm('Are you sure you want to mark this customer as seated? This will remove them from the queue.')) {
                return;
            }
            
            console.log('Marking customer as seated:', { queueId, customerId });
            
            try {
                const response = await fetch(`/api/queue/${queueId}/complete/${customerId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                console.log('Seat customer response:', result);
                
                if (result.success) {
                    // Immediately remove the customer row from UI
                    console.log('Removing customer row for:', result.customer.customerName);
                    removeCustomerRow(result.customer.customerName);
                    alert(`${result.customer.customerName} has been seated and removed from the queue`);
                    
                    // Force refresh dashboard data to update both tabs
                    setTimeout(() => {
                        refreshDashboardData();
                    }, 1000);
                } else {
                    console.error('Failed to seat customer:', result.error);
                    alert(result.error || 'Failed to mark customer as seated');
                }
            } catch (error) {
                console.error('Error marking customer as seated:', error);
                alert('Error marking customer as seated');
            }
        }
        
        // Remove customer row from UI immediately
        function removeCustomerRow(customerName) {
            console.log('Attempting to remove customer row for:', customerName);
            const customerRows = document.querySelectorAll('.customer-row');
            console.log('Found customer rows:', customerRows.length);
            
            let found = false;
            customerRows.forEach((row, index) => {
                const nameSpan = row.querySelector('.customer-name');
                console.log(`Row ${index}: nameSpan exists:`, !!nameSpan, 'text:', nameSpan?.textContent);
                
                if (nameSpan && nameSpan.textContent === customerName) {
                    found = true;
                    console.log('Found matching row, removing...');
                    
                    // Add fade out animation
                    row.style.transition = 'all 0.3s ease';
                    row.style.opacity = '0';
                    row.style.transform = 'translateX(-20px)';
                    
                    // Remove the row after animation
                    setTimeout(() => {
                        row.remove();
                        console.log('Customer row removed from DOM');
                        
                        // Check if no customers left
                        const remainingRows = document.querySelectorAll('.customer-row');
                        console.log('Remaining rows after removal:', remainingRows.length);
                        
                        if (remainingRows.length === 0) {
                            const customerList = document.querySelector('.customer-list');
                            if (customerList) {
                                customerList.innerHTML = `
                                    <div class="no-customers">
                                        <div class="empty-queue-icon">🍽️</div>
                                        <h4>No customers in queue</h4>
                                        <p>Your restaurant is ready to welcome the next customer!</p>
                                    </div>
                                `;
                                console.log('Added no customers message');
                            }
                        }
                    }, 300);
                }
            });
            
            if (!found) {
                console.warn('Customer row not found for:', customerName);
            }
            
            // Update stats
            updateTotalWaitingCount();
        }
        
        // Update total waiting count in stats
        function updateTotalWaitingCount() {
            // Get data from active queue tab specifically, not from currently visible tab
            const activeQueueTab = document.getElementById('active-queue');
            if (!activeQueueTab) return;
            
            const waitingCustomers = activeQueueTab.querySelectorAll('.customer-row:not(.notified-customer)').length;
            const notifiedCustomers = activeQueueTab.querySelectorAll('.notified-customer').length;
            const totalCustomers = waitingCustomers + notifiedCustomers;
            
            // Update the "Currently waiting" stat card
            const totalWaitingElement = document.getElementById('totalWaitingCount');
            if (totalWaitingElement) {
                totalWaitingElement.textContent = totalCustomers;
            }
            

            
            // Update the queue header stats
            const queueStatElements = document.querySelectorAll('.queue-stats .stat-number');
            if (queueStatElements.length > 0) {
                queueStatElements[0].textContent = totalCustomers; // First stat in queue header
            }
            
            // Calculate and update average wait time
            updateAverageWaitTime();
        }
        
        // Calculate and update average wait time
        function updateAverageWaitTime() {
            // Get data from active queue tab specifically, not from currently visible tab
            const activeQueueTab = document.getElementById('active-queue');
            if (!activeQueueTab) return;
            
            const waitingRows = activeQueueTab.querySelectorAll('.customer-row:not(.notified-customer)');
            let totalWaitTime = 0;
            
            waitingRows.forEach(row => {
                const timeElement = row.querySelector('.wait-time');
                if (timeElement) {
                    const timeText = timeElement.textContent.trim();
                    const minutes = parseInt(timeText.replace(' min', ''));
                    if (!isNaN(minutes)) {
                        totalWaitTime += minutes;
                    }
                }
            });
            
            const averageWaitTime = waitingRows.length > 0 ? Math.round(totalWaitTime / waitingRows.length) : 0;
            
            // Update the average wait time stat card
            const averageWaitTimeElement = document.getElementById('averageWaitTime');
            if (averageWaitTimeElement) {
                averageWaitTimeElement.textContent = averageWaitTime;
            }
            
            // Update the queue header average wait time
            const queueStatElements = document.querySelectorAll('.queue-stats .stat-number');
            if (queueStatElements.length > 1) {
                queueStatElements[1].textContent = averageWaitTime; // Second stat in queue header
            }
        }
        
        // Test notification system
        async function testNotifications() {
            try {
                const response = await fetch('/api/test/whatsapp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        phoneNumber: '+1234567890',
                        message: 'join',
                        merchantId: 'demo-merchant-id'
                    })
                });
                
                const result = await response.json();
                alert('Notification Test: ' + result.message);
            } catch (error) {
                console.error('Error testing notifications:', error);
                alert('Notification system ready! WhatsApp & Messenger integration coming soon.');
            }
        }
        
        // Debug function to test if JavaScript is working
        function debugTest() {
            console.log('Debug test clicked!');
            alert('JavaScript is working!');
        }
        
        // Test API call
        async function testApiCall() {
            console.log('Testing API call...');
            try {
                const response = await fetch('/api/queue');
                const result = await response.json();
                console.log('API response:', result);
                alert('API call successful! Check console for details.');
            } catch (error) {
                console.error('API call failed:', error);
                alert('API call failed: ' + error.message);
            }
        }
        
        // Check WhatsApp connection status
        async function checkWhatsAppStatus() {
            try {
                const response = await fetch('/api/whatsapp/status');
                const data = await response.json();
                
                const banner = document.getElementById('whatsappStatusBanner');
                const icon = document.getElementById('whatsappStatusIcon');
                const title = document.getElementById('whatsappStatusTitle');
                const message = document.getElementById('whatsappStatusMessage');
                const action = document.getElementById('whatsappStatusAction');
                
                if (data.isReady && data.deviceInfo) {
                    // WhatsApp is connected
                    banner.className = 'whatsapp-status-banner connected';
                    icon.className = 'bi bi-whatsapp whatsapp-status-icon';
                    title.textContent = 'WhatsApp Connected';
                    message.textContent = `Connected to ${data.deviceInfo.phoneNumber || 'WhatsApp Device'}`;
                    action.textContent = 'Manage';
                    action.href = '/dashboard/whatsapp-setup';
                    banner.style.display = 'flex';
                } else if (data.status === 'waiting_for_scan') {
                    // QR code is ready to scan
                    banner.className = 'whatsapp-status-banner';
                    icon.className = 'bi bi-qr-code whatsapp-status-icon';
                    title.textContent = 'WhatsApp Setup Required';
                    message.textContent = 'QR code is ready - scan to connect WhatsApp for customer notifications';
                    action.textContent = 'Scan QR Code';
                    action.href = '/dashboard/whatsapp-setup';
                    banner.style.display = 'flex';
                } else {
                    // WhatsApp is not connected
                    banner.className = 'whatsapp-status-banner disconnected';
                    icon.className = 'bi bi-exclamation-triangle whatsapp-status-icon';
                    title.textContent = 'WhatsApp Not Connected';
                    message.textContent = 'Connect WhatsApp to send automatic notifications to customers';
                    action.textContent = 'Setup WhatsApp';
                    action.href = '/dashboard/whatsapp-setup';
                    banner.style.display = 'flex';
                }
            } catch (error) {
                console.error('Error checking WhatsApp status:', error);
                // Show error state
                const banner = document.getElementById('whatsappStatusBanner');
                const icon = document.getElementById('whatsappStatusIcon');
                const title = document.getElementById('whatsappStatusTitle');
                const message = document.getElementById('whatsappStatusMessage');
                const action = document.getElementById('whatsappStatusAction');
                
                banner.className = 'whatsapp-status-banner disconnected';
                icon.className = 'bi bi-exclamation-triangle whatsapp-status-icon';
                title.textContent = 'WhatsApp Status Unknown';
                message.textContent = 'Unable to check WhatsApp connection status';
                action.textContent = 'Check Setup';
                action.href = '/dashboard/whatsapp-setup';
                banner.style.display = 'flex';
            }
        }
        
        // Initialize WhatsApp status check when page loads
        document.addEventListener('DOMContentLoaded', function() {
            checkWhatsAppStatus();
            
            // Check status every 30 seconds
            setInterval(checkWhatsAppStatus, 30000);
        });
        
        // Tab switching functionality
        function switchTab(tabId) {
            // Hide all tab contents
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(content => {
                content.classList.remove('active');
            });
            
            // Remove active class from all tab buttons
            const tabButtons = document.querySelectorAll('.tab-button');
            tabButtons.forEach(button => {
                button.classList.remove('active');
            });
            
            // Show selected tab content
            const selectedTab = document.getElementById(tabId);
            if (selectedTab) {
                selectedTab.classList.add('active');
            }
            
            // Add active class to clicked button
            const clickedButton = event.target;
            if (clickedButton) {
                clickedButton.classList.add('active');
            }
        }
        
        // Requeue customer back to waiting list
        async function requeueCustomer(queueId, customerId) {
            // Add confirmation dialog
            if (!confirm('Are you sure you want to requeue this customer back to the waiting list? They will be added to the end of the queue.')) {
                return;
            }
            
            console.log('Requeuing customer:', { queueId, customerId });
            
            try {
                const response = await fetch(`/api/queue/${queueId}/requeue/${customerId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                console.log('Requeue customer response:', result);
                
                if (result.success) {
                    alert(`${result.customer.customerName} has been requeued and added back to the waiting list`);
                    // Refresh the page to update both tabs
                    window.location.reload();
                } else {
                    console.error('Failed to requeue customer:', result.error);
                    alert(result.error || 'Failed to requeue customer');
                }
            } catch (error) {
                console.error('Error requeuing customer:', error);
                alert('Error requeuing customer');
            }
        }
    </script>
    
    <!-- Queue Creation Modal -->
    <div id="createModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Create New Queue</h3>
                <span class="close" onclick="hideCreateModal()">&times;</span>
            </div>
            <form id="createQueueForm">
                <div class="form-group">
                    <label for="queueName">Queue Name</label>
                    <input type="text" id="queueName" name="name" required placeholder="e.g., Restaurant Queue">
                </div>
                <div class="form-group">
                    <label for="queueDescription">Description</label>
                    <textarea id="queueDescription" name="description" placeholder="Brief description of this queue"></textarea>
                </div>
                <div class="form-group">
                    <label for="maxCapacity">Maximum Capacity</label>
                    <input type="number" id="maxCapacity" name="maxCapacity" min="1" max="1000" value="50" required>
                </div>
                <div class="form-group">
                    <label for="averageServiceTime">Average Service Time (minutes)</label>
                    <input type="number" id="averageServiceTime" name="averageServiceTime" min="1" max="120" value="15" required>
                </div>
                <div class="form-group">
                    <label>
                        <input type="checkbox" name="isActive" checked> Activate queue immediately
                    </label>
                </div>
                <div class="form-actions">
                    <button type="button" onclick="hideCreateModal()" class="btn-secondary">Cancel</button>
                    <button type="submit" class="btn">Create Queue</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Queue creation modal functions
        function showCreateModal() { 
            document.getElementById('createModal').style.display = 'block'; 
        }
        
        function hideCreateModal() { 
            document.getElementById('createModal').style.display = 'none'; 
            document.getElementById('createQueueForm').reset(); 
        }
        
        // Handle queue creation form submission
        document.getElementById('createQueueForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const queueData = Object.fromEntries(formData);
            
            // Convert checkbox to boolean
            queueData.isActive = formData.has('isActive');
            
            try {
                const response = await fetch('/api/queue', { 
                    method: 'POST', 
                    headers: { 'Content-Type': 'application/json' }, 
                    body: JSON.stringify(queueData) 
                });
                
                const result = await response.json();
                
                if (result.success) { 
                    hideCreateModal(); 
                    alert('Queue created successfully!');
                    location.reload(); 
                } else { 
                    alert(result.error || 'Failed to create queue'); 
                }
            } catch (error) { 
                console.error('Error creating queue:', error); 
                alert('Error creating queue'); 
            }
        });
        
        // Activate queue function
        async function activateQueue() {
            try {
                // Get the first inactive queue and activate it
                const response = await fetch('/api/queue');
                const result = await response.json();
                
                if (result.success && result.queues.length > 0) {
                    const inactiveQueue = result.queues.find(q => !q.isActive);
                    if (inactiveQueue) {
                        const updateResponse = await fetch(`/api/queue/${inactiveQueue._id}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ isActive: true })
                        });
                        
                        const updateResult = await updateResponse.json();
                        if (updateResult.success) {
                            alert('Queue activated successfully!');
                            location.reload();
                        } else {
                            alert(updateResult.error || 'Failed to activate queue');
                        }
                    } else {
                        alert('No inactive queues found');
                    }
                } else {
                    alert('No queues found. Please create a queue first.');
                }
            } catch (error) {
                console.error('Error activating queue:', error);
                alert('Error activating queue');
            }
        }
        
        // Close modal when clicking outside
        window.onclick = function(event) { 
            const createModal = document.getElementById('createModal'); 
            if (event.target === createModal) { 
                hideCreateModal(); 
            }
        }
    </script>
</body>
</html> 