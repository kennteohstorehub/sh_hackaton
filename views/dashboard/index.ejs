<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="/css/common-header.css" rel="stylesheet">
    <link href="/css/dashboard.css" rel="stylesheet">
    <link href="/css/design-tokens.css" rel="stylesheet">
    <link href="/css/minimalist-framework.css" rel="stylesheet">
    <link href="/css/queue-drag-drop.css" rel="stylesheet">
    <link href="/css/accessibility.css" rel="stylesheet">
    <!-- Preload critical resources for faster navigation -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://cdn.jsdelivr.net">
    <script src="/js/navigation-preload.js" defer></script>
    <script src="/js/queue-drag-drop.js" defer></script>
    <%- csrfMeta() %>
    <style>
        /* New Customer Animation */
        @keyframes slideInRight {
            0% {
                transform: translateX(100%);
                opacity: 0;
            }
            100% {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        @keyframes highlightPulse {
            0%, 100% {
                background-color: rgba(255, 140, 0, 0.1);
            }
            50% {
                background-color: rgba(255, 140, 0, 0.3);
            }
        }
        
        .new-customer-row {
            animation: slideInRight 0.5s ease-out, highlightPulse 2s ease-in-out;
        }
        
        /* Mobile-specific animations */
        @media (max-width: 768px) {
            .new-customer-row {
                animation: slideInRight 0.3s ease-out, highlightPulse 1.5s ease-in-out;
            }
            
            .new-customer-notification {
                right: 10px;
                left: 10px;
                max-width: calc(100% - 20px);
            }
        }
        
        .new-customer-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #28a745;
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            display: flex;
            align-items: center;
            gap: 12px;
            z-index: 9999;
            animation: slideInRight 0.3s ease-out;
            max-width: 350px;
        }
        
        .new-customer-notification i {
            font-size: 1.5rem;
        }
        
        .new-customer-notification .notification-text {
            flex: 1;
        }
        
        .new-customer-notification .notification-title {
            font-weight: 600;
            margin-bottom: 2px;
        }
        
        .new-customer-notification .notification-details {
            font-size: 0.9rem;
            opacity: 0.9;
        }
        
        /* Audio Control Button */
        .audio-control {
            position: fixed;
            bottom: 100px;
            right: 20px;
            background: #ff8c00;
            color: white;
            border: none;
            width: 48px;
            height: 48px;
            border-radius: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            transition: all 0.2s;
            z-index: 1000;
        }
        
        .audio-control:hover {
            transform: scale(1.1);
        }
        
        .audio-control.muted {
            background: #6c757d;
        }
        
        @media (max-width: 768px) {
            .audio-control {
                bottom: 80px;
                right: 15px;
                width: 44px;
                height: 44px;
            }
        }
        
        /* Notification Modal Styles */
        .notification-modal, .verification-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
        }
        
        /* Customer Card Status Styles */
        .customer-card.notified-customer {
            /* No visual changes - status is shown by button change */
        }
        
        .customer-row.notified-customer {
            /* No visual changes - status is shown by button change */
        }
        
        .status-badge.notified {
            background-color: #666666;  /* Dark gray */
            color: #ffffff;  /* White text */
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.02); }
            100% { transform: scale(1); }
        }
        
        .notification-content, .verification-content {
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            max-width: 500px;
            width: 90%;
            overflow: hidden;
        }
        
        .notification-header, .verification-header {
            background: #ff8c00;
            color: #ffffff;
            padding: 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .notification-header h2, .verification-header h2 {
            margin: 0;
            font-size: 1.5rem;
        }
        
        .close-btn {
            background: none;
            border: none;
            color: #ffffff;
            font-size: 2rem;
            cursor: pointer;
            line-height: 1;
            opacity: 0.8;
            transition: opacity 0.2s;
        }
        
        .close-btn:hover {
            opacity: 1;
        }
        
        .notification-body, .verification-body {
            padding: 2rem;
            text-align: center;
        }
        
        .customer-info {
            font-size: 1.2rem;
            margin-bottom: 1.5rem;
            color: #333;
        }
        
        .verification-code-display {
            margin: 2rem 0;
        }
        
        .verification-code-display label {
            display: block;
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 0.5rem;
        }
        
        .code-box {
            background: #f8f9fa;
            border: 3px solid #ff8c00;
            border-radius: 8px;
            font-size: 2.5rem;
            font-weight: bold;
            letter-spacing: 0.3rem;
            padding: 1rem;
            color: #ff8c00;
            font-family: monospace;
        }
        
        .instruction {
            color: #666;
            font-size: 0.95rem;
            margin-top: 1rem;
        }
        
        .notification-footer, .verification-footer {
            background: #f8f9fa;
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }
        
        .btn-primary, .btn-secondary {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .btn-primary {
            background: #ff8c00;
            color: #ffffff;
        }
        
        .btn-primary:hover {
            background: #e67e00;
            transform: translateY(-1px);
        }
        
        .btn-secondary {
            background: #e9ecef;
            color: #495057;
        }
        
        .btn-secondary:hover {
            background: #dee2e6;
        }
        
        /* WebChat and Connection Status Styles */
        .webchat-badge {
            background: #007bff;
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            display: inline-flex;
            align-items: center;
            gap: 4px;
        }
        
        .connection-status {
            margin-left: 5px;
            display: inline-block;
        }
        
        .connection-status.online i {
            color: #28a745 !important;
        }
        
        .connection-status.offline i {
            color: #dc3545 !important;
        }
        
        /* Code Input Styles */
        .code-input {
            width: 100%;
            max-width: 300px;
            font-size: 2rem;
            text-align: center;
            padding: 1rem;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            letter-spacing: 0.5rem;
            font-family: monospace;
            margin: 1rem 0;
        }
        
        .code-input:focus {
            outline: none;
            border-color: #ff8c00;
            box-shadow: 0 0 0 3px rgba(255, 140, 0, 0.1);
        }
        
        .error-message {
            color: #dc3545;
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }
        
        /* Pending Button Style */
        .btn-pending {
            background: #666666;
            color: #fff;
            border-color: #666666;
        }
        
        .btn-pending:hover {
            background: #555555;
            border-color: #555555;
        }
        
        /* Revoke Button Style */
        .btn-revoke {
            background: #dc3545;
            color: #fff;
            border-color: #dc3545;
            font-size: 0.8rem;
            padding: 4px 8px;
        }
        
        .btn-revoke:hover {
            background: #c82333;
            border-color: #bd2130;
        }
        
        /* Update grid for extra column */
        .customer-list-header,
        .customer-row {
            display: grid;
            grid-template-columns: 60px 1fr 120px 80px 80px 80px 70px 1fr 160px;
            gap: 10px;
            padding: 10px;
            align-items: center;
        }
        
        /* Seated customers table has different columns */
        #seated-customers .customer-list-header,
        #seated-customers .customer-row {
            grid-template-columns: 80px 1fr 120px 70px 80px 100px 1fr 120px;
        }
        
        .notified-time {
            text-align: center;
        }
        
        .notified-time .timer {
            color: #ffc107;
            font-weight: 600;
        }
        
        /* Verification Code Styling */
        .verification-code {
            text-align: center;
        }
        
        .code-badge {
            display: inline-block;
            background: #007bff;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            font-size: 1.1rem;
            font-weight: bold;
            letter-spacing: 1px;
        }
        
        /* Shake Animation */
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-10px); }
            75% { transform: translateX(10px); }
        }
        
        .shake {
            animation: shake 0.5s ease-in-out;
        }
        
        /* Acknowledgment Status */
        .ack-status {
            display: inline-flex;
            align-items: center;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.85rem;
            font-weight: 600;
        }
        
        .ack-status.on-way {
            background: rgba(40, 167, 69, 0.2);
            color: #28a745;
        }
        
        .ack-status.need-time {
            background: rgba(255, 193, 7, 0.2);
            color: #e0a800;
        }
        
        .customer-row.acknowledged {
            background: rgba(40, 167, 69, 0.05);
        }
        
        .customer-card.acknowledged {
            border-left: 4px solid #28a745;
        }
        
        /* Acknowledgment Pulse Animation */
        @keyframes acknowledgmentPulse {
            0% {
                box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.7);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(40, 167, 69, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(40, 167, 69, 0);
            }
        }
        
        .acknowledgment-pulse {
            animation: acknowledgmentPulse 1s ease-out;
        }
        
        /* Queue Performance Card Animations */
        @keyframes fadeInScale {
            0% {
                opacity: 0;
                transform: scale(0.9) translateY(20px);
            }
            100% {
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }
        
        @keyframes rotateGlow {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }
        
        @keyframes shimmer {
            0% {
                transform: translateX(-100%);
            }
            100% {
                transform: translateX(100%);
            }
        }
        
        /* Queue Actions Styles */
        .queue-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding: 1rem;
            background: rgba(255, 140, 0, 0.05);
            border: 1px solid rgba(255, 140, 0, 0.3);
            border-radius: 8px;
        }
        
        .queue-actions-left {
            display: flex;
            gap: 1rem;
            align-items: center;
        }
        
        .queue-status-badge {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.9rem;
        }
        
        .queue-status-badge.accepting {
            background: rgba(37, 211, 102, 0.2);
            color: #25D366;
            border: 1px solid rgba(37, 211, 102, 0.3);
        }
        
        .queue-status-badge.not-accepting {
            background: rgba(244, 67, 54, 0.2);
            color: #f44336;
            border: 1px solid rgba(244, 67, 54, 0.3);
        }
        
        .btn-danger {
            background: #dc3545;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .btn-danger:hover {
            background: #c82333;
        }
        
        .btn-success {
            background: #28a745;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .btn-success:hover {
            background: #218838;
        }
        
        /* Empty State Styles */
        .no-queue-section {
            padding: 60px 20px;
            text-align: center;
        }
        
        .empty-state {
            max-width: 400px;
            margin: 0 auto;
        }
        
        .empty-state .empty-icon {
            font-size: 48px;
            margin-bottom: 20px;
            opacity: 0.7;
        }
        
        .empty-state h3 {
            color: #e0e0e0;
            margin-bottom: 10px;
            font-size: 24px;
        }
        
        .empty-state p {
            color: #999;
            margin-bottom: 30px;
            font-size: 16px;
        }
        
        .empty-state .btn {
            padding: 12px 30px;
            font-size: 16px;
        }
        
        /* Stop Queue Modal Styles - Improved for Accessibility */
        .stop-queue-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.75); /* Slightly darker backdrop */
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            backdrop-filter: blur(2px); /* Modern blur effect */
        }
        
        .stop-queue-content {
            background: #ffffff;
            border-radius: 16px; /* Slightly more rounded */
            box-shadow: 0 25px 70px rgba(0, 0, 0, 0.35); /* Enhanced shadow */
            max-width: 520px; /* Slightly wider */
            width: 92%;
            overflow: hidden;
            border: 1px solid rgba(220, 53, 69, 0.1); /* Subtle red border */
        }
        
        .stop-queue-header {
            background: linear-gradient(135deg, #dc3545, #b02a37); /* Gradient header */
            color: #ffffff;
            padding: 1.75rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .stop-queue-header h2 {
            margin: 0;
            font-size: 1.375rem; /* Slightly smaller for better balance */
            font-weight: 600;
            letter-spacing: -0.02em;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }
        
        .stop-queue-header .close-btn {
            background: none;
            border: none;
            color: #ffffff;
            font-size: 1.75rem;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }
        
        .stop-queue-header .close-btn:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: scale(1.1);
        }
        
        .stop-queue-body {
            padding: 2.25rem;
        }
        
        /* Improved warning message with better contrast */
        .warning-message {
            background: #fef8e7; /* Warmer, more accessible background */
            border: 2px solid #f59e0b; /* Stronger amber border */
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            position: relative;
            overflow: hidden;
        }
        
        /* Add subtle pattern to warning background */
        .warning-message::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #f59e0b, #d97706);
        }
        
        .warning-message i {
            font-size: 1.75rem;
            color: #d97706; /* Darker amber for better contrast */
            margin-bottom: 0.75rem;
            display: block;
        }
        
        .warning-message p {
            margin: 0.75rem 0;
            color: #1f2937; /* Much darker text for better readability */
            font-size: 1rem;
            line-height: 1.5;
            font-weight: 500;
        }
        
        .warning-message p:first-of-type {
            font-weight: 600; /* Make the first warning line bolder */
        }
        
        .confirmation-input {
            margin-top: 2rem;
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 1.5rem;
        }
        
        .confirmation-input p {
            margin-bottom: 1.25rem;
            color: #1f2937; /* Dark text for better contrast */
            font-size: 1rem;
            font-weight: 500;
            line-height: 1.5;
        }
        
        .confirmation-input strong {
            color: #dc3545; /* Red for the required text */
            font-weight: 600;
            background: #fef2f2;
            padding: 0.125rem 0.375rem;
            border-radius: 4px;
            font-family: 'SF Mono', 'Monaco', 'Cascadia Code', 'Roboto Mono', monospace;
        }
        
        .confirm-input {
            width: 100%;
            padding: 1rem;
            font-size: 1rem;
            border: 2px solid #d1d5db;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            background: #ffffff;
            transition: all 0.2s ease;
            font-family: 'SF Mono', 'Monaco', 'Cascadia Code', 'Roboto Mono', monospace;
        }
        
        .confirm-input:focus {
            outline: none;
            border-color: #dc3545;
            box-shadow: 0 0 0 4px rgba(220, 53, 69, 0.1);
            background: #ffffff;
        }
        
        .confirm-input::placeholder {
            color: #9ca3af;
            font-style: italic;
        }
        
        /* Error message styling */
        .error-message {
            background: #fee2e2;
            border: 1px solid #fca5a5;
            color: #991b1b;
            padding: 0.75rem 1rem;
            border-radius: 6px;
            font-size: 0.875rem;
            font-weight: 500;
            margin-top: 0.5rem;
        }
        
        .stop-queue-footer {
            background: #f8fafc;
            border-top: 1px solid #e2e8f0;
            padding: 1.25rem 2.25rem;
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }
        
        /* Improved button styles */
        .stop-queue-footer .btn-secondary {
            background: #ffffff;
            border: 2px solid #d1d5db;
            color: #374151;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            font-size: 0.9375rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .stop-queue-footer .btn-secondary:hover {
            background: #f9fafb;
            border-color: #9ca3af;
            transform: translateY(-1px);
        }
        
        .stop-queue-footer .btn-danger {
            background: linear-gradient(135deg, #dc3545, #b02a37);
            border: 2px solid #dc3545;
            color: #ffffff;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            font-size: 0.9375rem;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 2px 4px rgba(220, 53, 69, 0.2);
        }
        
        .stop-queue-footer .btn-danger:hover {
            background: linear-gradient(135deg, #c82333, #a02133);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
        }
        
        .stop-queue-footer .btn-danger:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        /* Animation for modal entrance */
        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: scale(0.9) translateY(-20px);
            }
            to {
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }
        
        .stop-queue-content {
            animation: modalSlideIn 0.3s ease-out;
        }
        
        /* Shake animation for input error */
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }
        
        .confirm-input.shake {
            animation: shake 0.5s ease-in-out;
            border-color: #dc3545;
            background: #fef2f2;
        }
        
        /* Toast Notifications */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #fff;
            border-radius: 8px;
            padding: 1rem 1.5rem;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transform: translateX(400px);
            transition: transform 0.3s ease;
            z-index: 1000;
            max-width: 350px;
        }
        
        .toast.show {
            transform: translateX(0);
        }
        
        .toast-content {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        
        .toast-icon {
            font-size: 1.25rem;
        }
        
        .toast-success {
            border-left: 4px solid #22c55e;
        }
        
        .toast-error {
            border-left: 4px solid #ef4444;
        }
        
        .toast-info {
            border-left: 4px solid #3b82f6;
        }
        
        /* Acknowledgment Status */
        .ack-status {
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.875rem;
            font-weight: 500;
        }
        
        .ack-status.on-way {
            background-color: #dcfce7;
            color: #166534;
        }
        
        .customer-card.acknowledged,
        tr.acknowledged {
            background-color: #f0fdf4;
        }
        
        .status-acknowledged {
            color: #22c55e;
            font-weight: 600;
        }
        
        @media (max-width: 768px) {
            .toast {
                right: 10px;
                left: 10px;
                max-width: none;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header">
        <div class="header-content">
            <h1>StoreHub QMS</h1>
            <% if (typeof user !== 'undefined' && user && user.businessName) { %>
            <div class="tenant-badge" style="display: inline-flex; align-items: center; gap: 0.5rem; background: rgba(255, 140, 0, 0.1); border: 1px solid rgba(255, 140, 0, 0.3); padding: 0.4rem 0.8rem; border-radius: 8px; margin-left: 1rem;">
                <span style="color: rgba(255, 255, 255, 0.7); font-size: 0.75rem; text-transform: uppercase; letter-spacing: 0.5px;">Account:</span>
                <span style="color: #ff8c00; font-weight: 600; font-size: 0.9rem;"><%= user.businessName %></span>
            </div>
            <% } %>
            
            <!-- Mobile Hamburger Menu -->
            <button class="mobile-nav-toggle" aria-label="Toggle navigation">
                <span></span>
                <span></span>
                <span></span>
            </button>
            
            <div class="nav-container">
                <% if (typeof queues !== 'undefined' && queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <a href="/queue/<%= activeQueue.id || activeQueue._id %>" class="btn-view-public" target="_blank">
                            <i class="bi bi-eye"></i> View Public
                        </a>
                    <% } %>
                <% } %>
                <nav class="nav">
                    <a href="/dashboard" class="active">Dashboard</a>
                    <a href="/dashboard/analytics">Analytics</a>
                    <a href="/dashboard/settings">Settings</a>
                    <a href="/dashboard/help">Help</a>
                </nav>
            </div>
            <div class="user-section">
                <div class="user-menu">
                    <form action="/auth/logout" method="POST" style="display: inline;">
                        <%- csrfInput() %>
                        <button type="submit" class="user-button">
                            <i class="bi bi-box-arrow-right"></i>
                            Logout
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Mobile Navigation Menu -->
    <div class="mobile-nav-overlay">
        <div class="mobile-nav-menu">
            <div class="mobile-nav-header">
                <h2><%= user.businessName %></h2>
                <button class="mobile-nav-close" aria-label="Close navigation">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <nav class="mobile-nav-links">
                <a href="/dashboard" class="active">
                    <i class="bi bi-speedometer2"></i>
                    Dashboard
                </a>
                <a href="/dashboard/analytics">
                    <i class="bi bi-bar-chart"></i>
                    Analytics
                </a>
                <a href="/dashboard/settings">
                    <i class="bi bi-gear"></i>
                    Settings
                </a>
                <a href="/dashboard/help">
                    <i class="bi bi-question-circle"></i>
                    Help
                </a>
                <% if (typeof queues !== 'undefined' && queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <a href="/queue/<%= activeQueue.id || activeQueue._id %>" target="_blank">
                            <i class="bi bi-eye"></i>
                            View Public Queue
                        </a>
                    <% } %>
                <% } %>
            </nav>
            <div class="mobile-nav-footer">
                <form action="/auth/logout" method="POST">
                    <%- csrfInput() %>
                    <button type="submit" class="mobile-logout-btn">
                        <i class="bi bi-box-arrow-right"></i>
                        Logout
                    </button>
                </form>
            </div>
        </div>
    </div>

    <main id="main-content" class="container" role="main" aria-label="Queue Management Dashboard">
        <!-- Tenant Context Banner -->
        <% if (typeof user !== 'undefined' && user && user.businessName) { %>
        <div class="tenant-context-banner" style="background: linear-gradient(135deg, rgba(255, 140, 0, 0.05), rgba(255, 107, 53, 0.05)); border: 1px solid rgba(255, 140, 0, 0.2); padding: 1rem 2rem; margin-bottom: 2rem; border-radius: 12px; display: flex; align-items: center; justify-content: space-between;">
            <div class="tenant-info" style="display: flex; align-items: center; gap: 1rem;">
                <div class="tenant-icon" style="width: 48px; height: 48px; background: linear-gradient(135deg, #ff8c00, #ff6b35); border-radius: 12px; display: flex; align-items: center; justify-content: center; font-size: 1.5rem; color: white; font-weight: bold;">
                    <%= user.businessName.charAt(0).toUpperCase() %>
                </div>
                <div class="tenant-details">
                    <h3 style="color: white; font-size: 1.25rem; margin: 0 0 0.25rem 0;"><%= user.businessName %></h3>
                    <p style="color: rgba(255, 255, 255, 0.7); font-size: 0.9rem; margin: 0;">Business Account Dashboard</p>
                </div>
            </div>
            <% if (user.email) { %>
            <div style="color: rgba(255, 255, 255, 0.6); font-size: 0.85rem;">
                <i class="bi bi-envelope"></i> <%= user.email %>
            </div>
            <% } %>
        </div>
        <% } %>


        <!-- Stats Grid -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="totalWaitingCount"><%= stats.totalWaiting %></div>
                <div class="stat-label">Customers Waiting</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="averageWaitTime"><%= stats.averageWaitTime %></div>
                <div class="stat-label">Avg Wait Time (min)</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= stats.totalServed || 0 %></div>
                <div class="stat-label">Served Today</div>
            </div>
        </div>


        <!-- Queue Management Tabs -->
        <section id="queue-management" class="tabs-container" role="tabpanel" aria-label="Queue Management">
            <div class="tabs-header">
                <button class="tab-button active" onclick="showTab('active-queue')">Active Queue</button>
                <button class="tab-button" onclick="showTab('seated-customers')">Seated Customers</button>
            </div>

            <!-- Active Queue Tab -->
            <div id="active-queue" class="tab-content active">
                <% if (queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <div class="queue-section">
                            <div class="queue-header">
                                <div class="queue-title">
                                    <h2><%= activeQueue.name %></h2>
                                    <p class="queue-description"><%= activeQueue.description || 'Main restaurant queue' %></p>
                                </div>
                                <div class="queue-summary">
                                    <div class="queue-stats">
                                        <div class="stat-item">
                                            <div class="number"><%= waitingCustomers.filter(c => c.status === 'waiting').length %></div>
                                            <div class="label">Waiting</div>
                                        </div>
                                        <div class="stat-item">
                                            <div class="number"><%= Math.round((waitingCustomers.filter(c => c.status === 'waiting').reduce((total, c) => total + Math.floor((new Date() - new Date(c.joinedAt)) / (1000 * 60)), 0) / Math.max(waitingCustomers.filter(c => c.status === 'waiting').length, 1)) || 0) %></div>
                                            <div class="label">Avg Wait</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Queue Actions Bar -->
                            <div class="queue-actions">
                                <div class="queue-actions-left">
                                    <button class="btn btn-outline" onclick="refreshQueue()">
                                        <i class="bi bi-arrow-clockwise"></i> Refresh
                                    </button>
                                    <% if (activeQueue.acceptingCustomers !== false) { %>
                                        <button class="btn btn-danger" onclick="toggleQueueAccepting('<%= activeQueue._id || activeQueue.id %>')">
                                            <i class="bi bi-stop-circle"></i> Stop Queue
                                        </button>
                                    <% } else { %>
                                        <button class="btn btn-success" onclick="toggleQueueAccepting('<%= activeQueue._id || activeQueue.id %>')">
                                            <i class="bi bi-play-circle"></i> Start Queue
                                        </button>
                                    <% } %>
                                </div>
                                <div class="queue-actions-right">
                                    <span class="queue-status-badge <%= activeQueue.acceptingCustomers !== false ? 'accepting' : 'not-accepting' %>">
                                        <i class="bi <%= activeQueue.acceptingCustomers !== false ? 'bi-check-circle-fill' : 'bi-x-circle-fill' %>"></i>
                                        <%= activeQueue.acceptingCustomers !== false ? 'Accepting Customers' : 'Not Accepting New Customers' %>
                                    </span>
                                </div>
                            </div>
                            
                            <% if (waitingCustomers.length > 0) { %>
                                <!-- Desktop Table View -->
                                <div class="customer-list customer-list-desktop">
                                    <div class="customer-list-header">
                                        <span>#</span>
                                        <span>Customer</span>
                                        <span>Contact</span>
                                        <span>Party</span>
                                        <span>Wait</span>
                                        <span>Notified</span>
                                        <span>Code</span>
                                        <span>Special Requests</span>
                                        <span>Actions</span>
                                    </div>
                                    
                                    <% waitingCustomers.forEach((customer, index) => { %>
                                        <% const waitMinutes = Math.floor((new Date() - new Date(customer.joinedAt)) / (1000 * 60)); %>
                                        <% const notifiedMinutes = customer.calledAt ? Math.floor((new Date() - new Date(customer.calledAt)) / (1000 * 60)) : null; %>
                                        <div class="customer-row <%= customer.status === 'called' ? 'notified-customer' : (index === 0 && customer.status === 'waiting' ? 'next-customer' : '') %>" data-customer-id="<%= customer._id || customer.id %>" data-called-at="<%= customer.calledAt || '' %>">
                                            <div class="position">
                                                <%= customer.position %>
                                                <% if (index === 0 && customer.status === 'waiting') { %>
                                                    <div class="next-badge">NEXT</div>
                                                <% } %>
                                            </div>
                                            <div class="customer-name">
                                                <%= customer.customerName %>
                                                <% if (customer.platform === 'webchat') { %>
                                                    <span class="connection-status" data-session-id="<%= customer.sessionId %>" title="WebChat Customer">
                                                        <i class="bi bi-circle-fill" style="font-size: 8px; color: #ccc;"></i>
                                                    </span>
                                                <% } %>
                                            </div>
                                            <div class="phone">
                                                <% if (customer.platform === 'webchat') { %>
                                                    <span class="webchat-badge" title="Session: <%= customer.sessionId || 'Unknown' %>">
                                                        <i class="bi bi-chat-dots"></i> WebChat
                                                    </span>
                                                <% } else { %>
                                                    <%= customer.phoneNumber || customer.customerPhone || '-' %>
                                                <% } %>
                                            </div>
                                            <div class="party-size"><%= customer.partySize %></div>
                                            <div class="wait-time"><%= waitMinutes %> min</div>
                                            <div class="notified-time">
                                                <% if (customer.status === 'called' && customer.calledAt) { %>
                                                    <span class="timer" data-minutes="<%= notifiedMinutes %>"><%= notifiedMinutes %> min</span>
                                                <% } else { %>
                                                    <span>-</span>
                                                <% } %>
                                            </div>
                                            <div class="verification-code">
                                                <% if (customer.verificationCode) { %>
                                                    <span class="code-badge"><%= customer.verificationCode %></span>
                                                <% } else { %>
                                                    <span>-</span>
                                                <% } %>
                                            </div>
                                            <div class="special-requests">
                                                <% if (customer.specialRequests && customer.specialRequests.trim()) { %>
                                                    <span class="special-requests-text" title="<%= customer.specialRequests %>">
                                                        <%= customer.specialRequests.length > 30 ? customer.specialRequests.substring(0, 30) + '...' : customer.specialRequests %>
                                                    </span>
                                                <% } else { %>
                                                    <span class="no-requests">-</span>
                                                <% } %>
                                            </div>
                                            <div class="actions">
                                                <% if (customer.status === 'called') { %>
                                                    <button class="btn-action btn-pending" onclick="showCodeVerificationModal('<%= activeQueue.id || activeQueue._id %>', '<%= customer._id || customer.id %>')">Pending Arrival</button>
                                                    <button class="btn-action btn-revoke" onclick="revokeNotification('<%= activeQueue.id || activeQueue._id %>', '<%= customer._id || customer.id %>')">Revoke</button>
                                                <% } else if (index === 0) { %>
                                                    <button class="btn-action btn-notify" onclick="notifyNext('<%= activeQueue.id || activeQueue._id %>')">Notify</button>
                                                <% } else { %>
                                                    <button class="btn-action btn-select" onclick="selectCustomer('<%= activeQueue.id || activeQueue._id %>', '<%= customer._id || customer.id %>')">Select</button>
                                                <% } %>
                                            </div>
                                        </div>
                                    <% }); %>
                                </div>
                                
                                <!-- Mobile Card View -->
                                <div class="customer-list-mobile">
                                    <% waitingCustomers.forEach((customer, index) => { %>
                                        <% const waitMinutes = Math.floor((new Date() - new Date(customer.joinedAt)) / (1000 * 60)); %>
                                        <div class="customer-card <%= customer.status === 'called' ? 'notified-customer' : (index === 0 && customer.status === 'waiting' ? 'next-customer' : '') %>">
                                            <div class="customer-card-header">
                                                <span class="position-badge"><%= customer.position %></span>
                                                <h3><%= customer.customerName %></h3>
                                                <% if (customer.status === 'called') { %>
                                                    <span class="status-badge notified">CALLED</span>
                                                <% } else if (index === 0 && customer.status === 'waiting') { %>
                                                    <span class="status-badge next">NEXT</span>
                                                <% } %>
                                            </div>
                                            <div class="customer-card-body">
                                                <% if (customer.verificationCode) { %>
                                                    <div class="customer-info-row" style="margin-bottom: 10px;">
                                                        <i class="bi bi-key-fill"></i>
                                                        <span class="code-badge" style="font-size: 1.2rem;"><%= customer.verificationCode %></span>
                                                    </div>
                                                <% } %>
                                                <div class="customer-info-row">
                                                    <i class="bi bi-phone"></i>
                                                    <span><%= customer.phoneNumber || customer.customerPhone || '-' %></span>
                                                </div>
                                                <div class="customer-info-row">
                                                    <i class="bi bi-people"></i>
                                                    <span><%= customer.partySize %> people</span>
                                                </div>
                                                <div class="customer-info-row">
                                                    <i class="bi bi-clock"></i>
                                                    <span><%= waitMinutes %> min</span>
                                                </div>
                                                <% if (customer.specialRequests) { %>
                                                    <div class="customer-info-row">
                                                        <i class="bi bi-chat-text"></i>
                                                        <span><%= customer.specialRequests %></span>
                                                    </div>
                                                <% } %>
                                            </div>
                                            <div class="customer-card-actions">
                                                <% if (customer.status === 'called') { %>
                                                    <button onclick="showCodeVerificationModal('<%= activeQueue.id || activeQueue._id %>', '<%= customer._id || customer.id %>')" class="action-button btn-pending">
                                                        <i class="bi bi-person-check"></i> Pending Arrival
                                                    </button>
                                                    <button onclick="revokeNotification('<%= activeQueue.id || activeQueue._id %>', '<%= customer._id || customer.id %>')" class="action-button btn-revoke">
                                                        <i class="bi bi-x-circle"></i> Revoke
                                                    </button>
                                                <% } else if (customer.status === 'waiting') { %>
                                                    <button onclick="callCustomer('<%= activeQueue.id || activeQueue._id %>', '<%= customer._id || customer.id %>')" class="action-button call-button">
                                                        <i class="bi bi-megaphone"></i> Call
                                                    </button>
                                                <% } %>
                                            </div>
                                        </div>
                                    <% }); %>
                                </div>
                            <% } else { %>
                                <div class="no-customers">
                                    <div class="empty-queue-icon">🍽️</div>
                                    <h4>No customers in queue</h4>
                                    <p>Your restaurant is ready to welcome the next customer!</p>
                                </div>
                            <% } %>
                        </div>
                    <% } else { %>
                        <!-- No active queue found -->
                        <div class="no-queue-section">
                            <div class="empty-state">
                                <div class="empty-icon">📋</div>
                                <h3>No Active Queue</h3>
                                <p>All queues are currently inactive. Start a queue to begin accepting customers.</p>
                                <a href="/dashboard/settings" class="btn btn-primary">
                                    <i class="bi bi-gear"></i> Manage Queues
                                </a>
                            </div>
                        </div>
                    <% } %>
                <% } else { %>
                    <!-- No queues exist -->
                    <div class="no-queue-section">
                        <div class="empty-state">
                            <div class="empty-icon">🚀</div>
                            <h3>No Queues Created</h3>
                            <p>Create your first queue to start managing customers.</p>
                            <a href="/dashboard/settings" class="btn btn-primary">
                                <i class="bi bi-plus-circle"></i> Create Queue
                            </a>
                        </div>
                    </div>
                <% } %>
            </div>
            
            <!-- Seated Customers Tab -->
            <div id="seated-customers" class="tab-content">
                <% if (queues.length > 0) { %>
                    <% const activeQueue = queues.find(queue => queue.isActive); %>
                    <% if (activeQueue) { %>
                        <% const seatedCustomers = activeQueue.entries.filter(entry => entry.status === 'completed').sort((a, b) => new Date(b.completedAt) - new Date(a.completedAt)); %>
                        
                        <% if (seatedCustomers.length > 0) { %>
                            <div class="customer-list">
                                <div class="customer-list-header">
                                    <span>Table</span>
                                    <span>Customer</span>
                                    <span>Phone</span>
                                    <span>Code</span>
                                    <span>Party</span>
                                    <span>Seated Time</span>
                                    <span>Special Requests</span>
                                    <span>Actions</span>
                                </div>
                                
                                <% seatedCustomers.forEach((customer) => { %>
                                    <% const seatedMinutes = Math.floor((new Date() - new Date(customer.completedAt)) / (1000 * 60)); %>
                                    <div class="customer-row seated-customer-row">
                                        <div class="position" style="font-weight: bold;">Table <%= customer.tableNumber || '-' %></div>
                                        <div class="customer-name"><%= customer.customerName %></div>
                                        <div class="phone"><%= customer.customerPhone %></div>
                                        <div class="verification-code">
                                            <% if (customer.verificationCode) { %>
                                                <span class="code-badge"><%= customer.verificationCode %></span>
                                            <% } else { %>
                                                <span>-</span>
                                            <% } %>
                                        </div>
                                        <div class="party-size"><%= customer.partySize %></div>
                                        <div class="wait-time"><%= seatedMinutes %> min</div>
                                        <div class="special-requests">
                                            <% if (customer.specialRequests && customer.specialRequests.trim()) { %>
                                                <span class="special-requests-text" title="<%= customer.specialRequests %>">
                                                    <%= customer.specialRequests.length > 30 ? customer.specialRequests.substring(0, 30) + '...' : customer.specialRequests %>
                                                </span>
                                            <% } else { %>
                                                <span class="no-requests">-</span>
                                            <% } %>
                                        </div>
                                        <div class="actions">
                                            <button class="btn-action btn-select" onclick="requeueCustomer('<%= activeQueue.id || activeQueue._id %>', '<%= customer._id || customer.id %>')">Requeue</button>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        <% } else { %>
                            <div class="no-customers">
                                <div class="empty-queue-icon">🪑</div>
                                <h4>No seated customers</h4>
                                <p>Customers who are seated will appear here</p>
                            </div>
                        <% } %>
                    <% } else { %>
                        <div class="no-customers">
                            <h4>No active queue</h4>
                            <p>Activate a queue to see seated customers</p>
                        </div>
                    <% } %>
                <% } else { %>
                    <div class="no-customers">
                        <h4>No queues available</h4>
                        <p>Create a queue first to manage seated customers</p>
                    </div>
                <% } %>
            </div>
        </section>
    </main>

    <!-- Indicators -->
    <div id="updating-indicator" class="updating-indicator">
        Updating dashboard...
    </div>
    
    <div id="connection-status" class="connection-status connecting">
        🔄 Connecting...
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        <%- csrfAjaxSetup %>
    </script>
    <script>
        // Mobile Navigation Toggle
        const mobileNavToggle = document.querySelector('.mobile-nav-toggle');
        const mobileNavOverlay = document.querySelector('.mobile-nav-overlay');
        const mobileNavClose = document.querySelector('.mobile-nav-close');
        
        if (mobileNavToggle) {
            mobileNavToggle.addEventListener('click', () => {
                mobileNavOverlay.classList.add('active');
                document.body.style.overflow = 'hidden';
            });
        }
        
        if (mobileNavClose) {
            mobileNavClose.addEventListener('click', () => {
                mobileNavOverlay.classList.remove('active');
                document.body.style.overflow = '';
            });
        }
        
        // Close mobile nav when clicking overlay
        if (mobileNavOverlay) {
            mobileNavOverlay.addEventListener('click', (e) => {
                if (e.target === mobileNavOverlay) {
                    mobileNavOverlay.classList.remove('active');
                    document.body.style.overflow = '';
                }
            });
        }
        
        // Tab functionality
        function showTab(tabId) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Remove active class from all tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabId).classList.add('active');
            
            // Add active class to clicked button
            event.target.classList.add('active');
        }

        const socket = io();
        
        // Queue for managing rapid customer additions
        const customerAdditionQueue = [];
        let isProcessingQueue = false;
        
        async function processCustomerQueue() {
            if (isProcessingQueue || customerAdditionQueue.length === 0) {
                return;
            }
            
            isProcessingQueue = true;
            
            while (customerAdditionQueue.length > 0) {
                const customerData = customerAdditionQueue.shift();
                addNewCustomerToQueue(customerData.customer, customerData.queueId);
                showNewCustomerNotification(customerData.customer);
                
                // Small delay between additions for smooth animation
                await new Promise(resolve => setTimeout(resolve, 200));
            }
            
            updateQueueStats();
            isProcessingQueue = false;
        }
        
        // Connection status monitoring
        socket.on('connect', () => {
            console.log('Socket.IO connected');
            updateConnectionStatus('connected');
        });
        
        socket.on('disconnect', () => {
            console.log('Socket.IO disconnected');
            updateConnectionStatus('disconnected');
        });
        
        socket.on('reconnect', () => {
            console.log('Socket.IO reconnected');
            updateConnectionStatus('connected');
            setTimeout(() => {
                refreshDashboardData();
            }, 1000);
        });
        
        function updateConnectionStatus(status) {
            const indicator = document.getElementById('connection-status');
            if (indicator) {
                indicator.className = `connection-status ${status}`;
                switch(status) {
                    case 'connected':
                        indicator.innerHTML = '🟢 Connected';
                        break;
                    case 'disconnected':
                        indicator.innerHTML = '🔴 Disconnected';
                        break;
                    case 'connecting':
                        indicator.innerHTML = '🔄 Connecting...';
                        break;
                }
            }
        }
        
        // CSRF Token for API calls
        const csrfToken = '<%- csrfToken %>';
        
        // Join merchant room for real-time updates
        const merchantId = '<%= user.merchantId || user.id || user._id %>';
        socket.emit('join-merchant-room', merchantId);
        
        // Update total waiting count on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateTotalWaitingCount();
            
            // Update stats every 30 seconds
            setInterval(updateTotalWaitingCount, 30000);
            
            // Update wait times every 30 seconds
            setInterval(updateWaitTimes, 30000);
            
            // Initialize audio button state
            updateAudioButton();
            
            // Store joined times for wait time calculations
            document.querySelectorAll('.customer-row').forEach(row => {
                const waitTimeText = row.querySelector('.wait-time')?.textContent || '0 min';
                const waitMinutes = parseInt(waitTimeText.match(/\d+/)?.[0] || 0);
                const joinedAt = new Date(Date.now() - (waitMinutes * 60 * 1000));
                row.setAttribute('data-joined-at', joinedAt.toISOString());
            });
        });
        
        // Socket.IO event listeners
        socket.on('queue-updated', (data) => {
            console.log('Queue updated event received:', data);
            handleQueueUpdate(data);
        });
        
        socket.on('customer-added', (data) => {
            console.log('Customer added event received:', data);
            handleQueueUpdate(data);
        });
        
        socket.on('new-customer', (data) => {
            console.log('New customer event received:', data);
            // Add to queue for processing
            if (data && data.customer && data.queueId) {
                customerAdditionQueue.push(data);
                processCustomerQueue();
            }
        });
        
        socket.on('customer-removed', (data) => {
            console.log('Customer removed event received:', data);
            if (data && data.customerId) {
                removeCustomerFromQueue(data.customerId);
                updateQueueStats();
            } else {
                handleQueueUpdate(data);
            }
        });
        
        // Track webchat customer connections
        const connectedSessions = new Set();
        
        socket.on('webchat-connected', (data) => {
            if (data.sessionId) {
                connectedSessions.add(data.sessionId);
                updateSessionStatus(data.sessionId, true);
            }
        });
        
        socket.on('webchat-disconnected', (data) => {
            if (data.sessionId) {
                connectedSessions.delete(data.sessionId);
                updateSessionStatus(data.sessionId, false);
            }
        });
        
        // Listen for customer acknowledgments
        socket.on('customer-acknowledged', (data) => {
            console.log('Customer acknowledged:', data);
            updateCustomerAcknowledgment(data);
        });
        
        function updateSessionStatus(sessionId, isOnline) {
            const statusElements = document.querySelectorAll(`[data-session-id="${sessionId}"]`);
            statusElements.forEach(element => {
                if (isOnline) {
                    element.classList.add('online');
                    element.classList.remove('offline');
                    element.title = 'Customer Online';
                } else {
                    element.classList.add('offline');
                    element.classList.remove('online');
                    element.title = 'Customer Offline';
                }
            });
        }
        
        function updateCustomerAcknowledgment(data) {
            // Find customer by entry ID or customer ID
            const customerRow = document.querySelector(`[data-customer-id="${data.entryId}"]`) || 
                               document.querySelector(`[data-customer-id="${data.customerId}"]`);
            
            if (customerRow) {
                // Update the notified time column to show acknowledgment status
                const notifiedTimeElement = customerRow.querySelector('.notified-time');
                if (notifiedTimeElement) {
                    const time = new Date(data.acknowledgedAt).toLocaleTimeString([], { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                    });
                    
                    // Different icons and messages based on acknowledgment type
                    let statusIcon = '✅';
                    let statusText = 'On way';
                    let statusClass = 'on-way';
                    
                    if (data.type === 'need_time') {
                        statusIcon = '⏱️';
                        statusText = 'Needs time';
                        statusClass = 'need-time';
                    }
                    
                    notifiedTimeElement.innerHTML = `
                        <span class="ack-status ${statusClass}" 
                              title="${data.customerName} acknowledged at ${time}">
                            ${statusIcon} ${statusText} (${time})
                        </span>`;
                }
                
                // Add acknowledgment indicator to the row with animation
                customerRow.classList.add('acknowledged', 'acknowledgment-pulse');
                setTimeout(() => customerRow.classList.remove('acknowledgment-pulse'), 1000);
                
                // Update status text if present
                const statusElement = customerRow.querySelector('.customer-status');
                if (statusElement) {
                    statusElement.textContent = data.type === 'need_time' ? 'Needs more time' : 'On the way';
                    statusElement.classList.add('status-acknowledged');
                }
                
                // Show acknowledgment in mobile view too
                const customerCard = document.querySelector(`.customer-card[data-customer-id="${data.entryId}"]`) || 
                                   document.querySelector(`.customer-card[data-customer-id="${data.customerId}"]`);
                if (customerCard) {
                    customerCard.classList.add('acknowledged', 'acknowledgment-pulse');
                    setTimeout(() => customerCard.classList.remove('acknowledgment-pulse'), 1000);
                    
                    const mobileStatus = customerCard.querySelector('.customer-status');
                    if (mobileStatus) {
                        mobileStatus.textContent = data.type === 'need_time' ? 'Needs more time' : 'On the way';
                        mobileStatus.classList.add('status-acknowledged');
                    }
                }
                
                // Show enhanced toast notification with sound
                const toastMessage = data.type === 'need_time' 
                    ? `${data.customerName} needs more time` 
                    : `${data.customerName} is on their way!`;
                
                showToast(toastMessage, 'success');
                
                // Play notification sound
                playNotificationSound();
                
                // Update queue statistics if needed
                updateQueueStats();
            }
        }
        
        function handleQueueUpdate(data) {
            if (data && data.queue) {
                showUpdatingIndicator();
                updateQueueDisplay(data.queue);
                setTimeout(hideUpdatingIndicator, 1000);
            }
        }
        
        function showUpdatingIndicator() {
            const indicator = document.getElementById('updating-indicator');
            if (indicator) {
                indicator.classList.add('show');
            }
        }
        
        function hideUpdatingIndicator() {
            const indicator = document.getElementById('updating-indicator');
            if (indicator) {
                indicator.classList.remove('show');
            }
        }
        
        function showToast(message, type = 'info') {
            // Create toast element
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.innerHTML = `
                <div class="toast-content">
                    <span class="toast-icon">${type === 'success' ? '✅' : type === 'error' ? '❌' : 'ℹ️'}</span>
                    <span class="toast-message">${message}</span>
                </div>
            `;
            
            // Add to body
            document.body.appendChild(toast);
            
            // Trigger animation
            setTimeout(() => toast.classList.add('show'), 10);
            
            // Remove after 3 seconds
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }
        
        function updateQueueDisplay(queueData) {
            // Update queue stats
            const queueStatsElements = document.querySelectorAll('.queue-stats .number');
            if (queueStatsElements.length >= 2) {
                const waitingCustomers = queueData.entries.filter(entry => 
                    entry.status === 'waiting' || entry.status === 'called'
                ).length;
                
                queueStatsElements[0].textContent = waitingCustomers;
                
                // Calculate fresh average wait time
                const now = new Date();
                const waitingEntries = queueData.entries.filter(entry => entry.status === 'waiting');
                let avgWaitTime = 0;
                
                if (waitingEntries.length > 0) {
                    const totalWaitTime = waitingEntries.reduce((total, entry) => {
                        const waitMinutes = Math.floor((now - new Date(entry.joinedAt)) / (1000 * 60));
                        return total + waitMinutes;
                    }, 0);
                    avgWaitTime = Math.round(totalWaitTime / waitingEntries.length);
                }
                
                queueStatsElements[1].textContent = avgWaitTime;
                
                // Update main stats cards
                const totalWaitingElement = document.getElementById('totalWaitingCount');
                if (totalWaitingElement) {
                    totalWaitingElement.textContent = waitingCustomers;
                }
                
                const averageWaitTimeElement = document.getElementById('averageWaitTime');
                if (averageWaitTimeElement) {
                    averageWaitTimeElement.textContent = avgWaitTime;
                }
            }
            
            // Update customer list if needed
            const currentActiveTab = document.querySelector('.tab-content.active');
            if (currentActiveTab && currentActiveTab.id === 'active-queue') {
                updateActiveQueueCustomerList(queueData);
            }
        }
        
        function updateActiveQueueCustomerList(queueData) {
            // Update the customer list dynamically without page reload
            const activeQueueTab = document.getElementById('active-queue');
            if (!activeQueueTab || !activeQueueTab.classList.contains('active')) {
                return;
            }
            
            // For now, still reload for complete queue updates
            // In future, this can be enhanced to do full dynamic updates
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        }
        
        function removeCustomerFromQueue(customerId) {
            // Remove from desktop view
            const desktopRow = document.querySelector(`.customer-row[data-customer-id="${customerId}"]`);
            if (desktopRow) {
                desktopRow.style.animation = 'slideInRight 0.3s ease-out reverse';
                setTimeout(() => {
                    desktopRow.remove();
                    // Re-number remaining customers
                    renumberCustomers();
                }, 300);
            }
            
            // Remove from mobile view
            const mobileCard = document.querySelector(`.customer-card[data-customer-id="${customerId}"]`);
            if (mobileCard) {
                mobileCard.style.animation = 'slideInRight 0.3s ease-out reverse';
                setTimeout(() => {
                    mobileCard.remove();
                }, 300);
            }
        }
        
        function renumberCustomers() {
            const rows = document.querySelectorAll('#active-queue .customer-row');
            rows.forEach((row, index) => {
                const position = index + 1;
                const positionDiv = row.querySelector('.position');
                
                // Update position number
                const currentBadge = positionDiv.querySelector('.next-badge');
                positionDiv.innerHTML = position.toString();
                
                // Handle NEXT badge and button updates
                if (position === 1 && rows.length > 0) {
                    row.classList.add('next-customer');
                    positionDiv.innerHTML += '<div class="next-badge">NEXT</div>';
                    
                    // Update action button
                    const actionDiv = row.querySelector('.actions');
                    const customerId = row.getAttribute('data-customer-id');
                    const queueId = getActiveQueueId();
                    
                    if (actionDiv && queueId) {
                        actionDiv.innerHTML = `<button class="btn-action btn-notify" onclick="notifyNext('${queueId}')">Notify</button>`;
                    }
                } else {
                    row.classList.remove('next-customer');
                    
                    // Update select button if needed
                    const notifyBtn = row.querySelector('.btn-notify');
                    if (notifyBtn) {
                        const customerId = row.getAttribute('data-customer-id');
                        const queueId = getActiveQueueId();
                        const actionDiv = row.querySelector('.actions');
                        
                        if (actionDiv && queueId) {
                            actionDiv.innerHTML = `<button class="btn-action btn-select" onclick="selectCustomer('${queueId}', '${customerId}')">Select</button>`;
                        }
                    }
                }
            });
            
            // Update mobile cards
            const cards = document.querySelectorAll('#active-queue .customer-card');
            cards.forEach((card, index) => {
                const position = index + 1;
                const badge = card.querySelector('.position-badge');
                if (badge) {
                    badge.textContent = position;
                }
                
                // Update NEXT status
                if (position === 1 && cards.length > 0) {
                    card.classList.add('next-customer');
                    if (!card.querySelector('.status-badge.next')) {
                        const header = card.querySelector('.customer-card-header');
                        const nextBadge = document.createElement('span');
                        nextBadge.className = 'status-badge next';
                        nextBadge.textContent = 'NEXT';
                        header.appendChild(nextBadge);
                    }
                } else {
                    card.classList.remove('next-customer');
                    const nextBadge = card.querySelector('.status-badge.next');
                    if (nextBadge) {
                        nextBadge.remove();
                    }
                }
            });
            
            // Check if queue is now empty
            if (rows.length === 0) {
                showEmptyQueueState();
            }
        }
        
        function showEmptyQueueState() {
            const activeQueueTab = document.getElementById('active-queue');
            const queueSection = activeQueueTab.querySelector('.queue-section');
            
            if (queueSection) {
                // Remove customer lists
                const desktopList = queueSection.querySelector('.customer-list-desktop');
                const mobileList = queueSection.querySelector('.customer-list-mobile');
                
                if (desktopList) desktopList.remove();
                if (mobileList) mobileList.remove();
                
                // Add empty state
                const emptyState = document.createElement('div');
                emptyState.className = 'no-customers';
                emptyState.innerHTML = `
                    <div class="empty-queue-icon">🍽️</div>
                    <h4>No customers in queue</h4>
                    <p>Your restaurant is ready to welcome the next customer!</p>
                `;
                
                queueSection.appendChild(emptyState);
            }
        }
        
        function updateTotalWaitingCount() {
            // Update waiting count by counting only customers in "waiting" status from active queue tab
            const activeQueueTab = document.getElementById('active-queue');
            const totalWaitingElement = document.getElementById('totalWaitingCount');
            
            if (totalWaitingElement && activeQueueTab) {
                // Only count customers in the active queue tab that are actually waiting (not seated customers)
                const waitingElements = activeQueueTab.querySelectorAll('.customer-row');
                totalWaitingElement.textContent = waitingElements.length;
            }
        }
        
        function refreshDashboardData() {
            showUpdatingIndicator();
            fetch('/dashboard')
                .then(response => {
                    if (response.ok) {
                        setTimeout(() => {
                            window.location.reload();
                        }, 500);
                    }
                })
                .catch(error => {
                    console.error('Error refreshing dashboard:', error);
                })
                .finally(() => {
                    setTimeout(hideUpdatingIndicator, 1000);
                });
        }
        
        
        
        // Action functions
        async function notifyNext(queueId) {
            if (!confirm('Are you sure you want to notify the next customer?')) {
                return;
            }
            
            const button = event.target;
            button.disabled = true;
            button.textContent = 'Sending...';
            
            console.log('Notifying next customer, CSRF token:', csrfToken);
            
            try {
                const response = await fetch(`/api/queue/${queueId}/call-next`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: { 
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    }
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Response not OK:', response.status, errorText);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    // Show popup with verification code
                    showVerificationCodePopup(result.customer);
                    
                    // Update button state
                    button.textContent = 'Pending Arrival';
                    button.className = 'btn-action btn-pending';
                    button.onclick = function() { 
                        showCodeVerificationModal(queueId, result.customer.customerId || result.customer.id);
                    };
                    
                    // Don't reload immediately to let user see the code
                } else {
                    alert(result.error || 'Failed to notify customer');
                    button.disabled = false;
                    button.textContent = 'Notify';
                }
            } catch (error) {
                console.error('Error notifying customer:', error);
                alert('Error notifying customer: ' + error.message);
                button.disabled = false;
                button.textContent = 'Notify';
            }
        }
        
        function showVerificationCodePopup(customer) {
            // Create popup modal
            const modal = document.createElement('div');
            modal.className = 'notification-modal';
            modal.innerHTML = `
                <div class="notification-content">
                    <div class="notification-header">
                        <h2>✅ Customer Notified!</h2>
                        <button onclick="closeNotificationModal()" class="close-btn">&times;</button>
                    </div>
                    <div class="notification-body">
                        <p class="customer-info">
                            <strong>${customer.customerName}</strong> has been notified.
                        </p>
                        <div class="verification-code-display">
                            <label>Verification Code:</label>
                            <div class="code-box">${customer.verificationCode}</div>
                        </div>
                        <p class="instruction">
                            The customer will show this code when they arrive.
                            Click "Pending Arrival" button to verify and seat them.
                        </p>
                    </div>
                    <div class="notification-footer">
                        <button onclick="closeNotificationModal()" class="btn-primary">OK</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            // Auto-refresh after 3 seconds
            setTimeout(() => {
                if (document.querySelector('.notification-modal')) {
                    window.location.reload();
                }
            }, 3000);
        }
        
        function closeNotificationModal() {
            const modal = document.querySelector('.notification-modal');
            if (modal) {
                modal.remove();
                window.location.reload();
            }
        }
        
        function showCodeVerificationModal(queueId, customerId) {
            // Get customer info from the row
            const customerRow = document.querySelector(`[data-customer-id="${customerId}"]`);
            const customerName = customerRow ? customerRow.querySelector('.customer-name').textContent.trim() : 'Customer';
            const verificationCode = customerRow ? customerRow.querySelector('.code-badge')?.textContent : '';
            
            const modal = document.createElement('div');
            modal.className = 'verification-modal';
            modal.innerHTML = `
                <div class="verification-content">
                    <div class="verification-header">
                        <h2>🪑 Assign Table</h2>
                        <button onclick="closeVerificationModal()" class="close-btn">&times;</button>
                    </div>
                    <div class="verification-body">
                        <div style="margin-bottom: 15px; color: #333;">
                            <strong style="color: #333;">Customer:</strong> <span style="color: #333;">${customerName}</span><br>
                            <strong style="color: #333;">Verification Code:</strong> <span class="code-badge" style="margin-left: 10px;">${verificationCode}</span>
                        </div>
                        <p style="color: #333;">Please enter the table number to assign:</p>
                        <input type="text" 
                               id="tableNumberInput" 
                               class="code-input" 
                               maxlength="10" 
                               placeholder="Table number (e.g., 1, 2A, VIP1)"
                               autofocus>
                        <div id="verificationError" class="error-message" style="display: none;"></div>
                    </div>
                    <div class="verification-footer">
                        <button onclick="closeVerificationModal()" class="btn-secondary">Cancel</button>
                        <button onclick="assignTableAndSeatCustomer('${queueId}', '${customerId}')" class="btn-primary">Assign & Seat</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            // Focus on input
            setTimeout(() => {
                document.getElementById('tableNumberInput').focus();
            }, 100);
            
            // Handle Enter key
            document.getElementById('tableNumberInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    assignTableAndSeatCustomer(queueId, customerId);
                }
            });
        }
        
        function closeVerificationModal() {
            const modal = document.querySelector('.verification-modal');
            if (modal) modal.remove();
        }
        
        async function assignTableAndSeatCustomer(queueId, customerId) {
            const tableInput = document.getElementById('tableNumberInput');
            const tableNumber = tableInput.value.trim();
            
            if (!tableNumber) {
                showVerificationError('Please enter a table number');
                return;
            }
            
            try {
                const response = await fetch(`/api/queue/${queueId}/assign-table/${customerId}`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    },
                    body: JSON.stringify({ tableNumber })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    closeVerificationModal();
                    alert(`✅ ${result.customer.customerName} has been seated!`);
                    window.location.reload();
                } else {
                    showVerificationError(result.error || 'Failed to assign table');
                }
            } catch (error) {
                console.error('Error assigning table:', error);
                showVerificationError('Error assigning table. Please try again.');
            }
        }
        
        function showVerificationError(message) {
            const errorDiv = document.getElementById('verificationError');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            
            // Shake the input (works for both table and code inputs)
            const input = document.getElementById('tableNumberInput') || document.getElementById('verificationCodeInput');
            if (input) {
                input.classList.add('shake');
                setTimeout(() => input.classList.remove('shake'), 500);
            }
        }
        
        async function toggleQueueAccepting(queueId) {
            const button = event.target;
            const isCurrentlyAccepting = button.classList.contains('btn-danger');
            const action = isCurrentlyAccepting ? 'stop' : 'start';
            
            // For stopping, show confirmation dialog with text input
            if (isCurrentlyAccepting) {
                showStopQueueConfirmation(queueId);
                return;
            }
            
            // For starting, just use simple confirm
            if (!confirm('Are you sure you want to start accepting new customers?')) {
                return;
            }
            
            button.disabled = true;
            button.textContent = 'Starting...';
            
            console.log('Toggling queue accepting, CSRF token:', csrfToken);
            
            try {
                const response = await fetch(`/api/queue/${queueId}/toggle-accepting`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    }
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Response not OK:', response.status, errorText);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    alert(result.message);
                    window.location.reload();
                } else {
                    alert(result.error || 'Failed to update queue status');
                    button.disabled = false;
                    button.textContent = button.classList.contains('btn-danger') ? 'Stop Queue' : 'Start Queue';
                }
            } catch (error) {
                console.error('Error toggling queue status:', error);
                alert('Error updating queue status: ' + error.message);
                button.disabled = false;
                button.textContent = button.classList.contains('btn-danger') ? 'Stop Queue' : 'Start Queue';
            }
        }
        
        function showStopQueueConfirmation(queueId) {
            const modal = document.createElement('div');
            modal.className = 'stop-queue-modal';
            modal.innerHTML = `
                <div class="stop-queue-content">
                    <div class="stop-queue-header">
                        <h2>⚠️ Stop Queue Confirmation</h2>
                        <button onclick="closeStopQueueModal()" class="close-btn">&times;</button>
                    </div>
                    <div class="stop-queue-body">
                        <div class="warning-message">
                            <i class="bi bi-exclamation-triangle-fill"></i>
                            <p><strong>Warning:</strong> Stopping the queue will prevent new customers from joining.</p>
                            <p>Existing customers in the queue will still be served.</p>
                        </div>
                        <div class="confirmation-input">
                            <p>To confirm, please type: <strong>Yes I want to stop queue</strong></p>
                            <input type="text" 
                                   id="stopQueueConfirmInput" 
                                   class="confirm-input" 
                                   placeholder="Type confirmation text here"
                                   autocomplete="off">
                            <div id="stopQueueError" class="error-message" style="display: none;"></div>
                        </div>
                    </div>
                    <div class="stop-queue-footer">
                        <button onclick="closeStopQueueModal()" class="btn-secondary">Cancel</button>
                        <button onclick="confirmStopQueue('${queueId}')" class="btn-danger">Stop Queue</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            // Focus on input
            setTimeout(() => {
                document.getElementById('stopQueueConfirmInput').focus();
            }, 100);
            
            // Handle Enter key
            document.getElementById('stopQueueConfirmInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    confirmStopQueue(queueId);
                }
            });
        }
        
        function closeStopQueueModal() {
            const modal = document.querySelector('.stop-queue-modal');
            if (modal) modal.remove();
        }
        
        async function confirmStopQueue(queueId) {
            const input = document.getElementById('stopQueueConfirmInput');
            const confirmText = input.value.trim();
            const expectedText = "Yes I want to stop queue";
            
            // Case-insensitive comparison
            if (confirmText.toLowerCase() !== expectedText.toLowerCase()) {
                const errorDiv = document.getElementById('stopQueueError');
                errorDiv.textContent = `Please type exactly: "${expectedText}"`;
                errorDiv.style.display = 'block';
                
                // Shake the input
                input.classList.add('shake');
                setTimeout(() => input.classList.remove('shake'), 500);
                return;
            }
            
            // Disable button to prevent double-click
            const button = event.target;
            button.disabled = true;
            button.textContent = 'Stopping...';
            
            console.log('Stopping queue, CSRF token:', csrfToken);
            
            try {
                const response = await fetch(`/api/queue/${queueId}/toggle-accepting`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    }
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Response not OK:', response.status, errorText);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    closeStopQueueModal();
                    alert('✅ ' + result.message);
                    window.location.reload();
                } else {
                    alert('❌ ' + (result.error || 'Failed to stop queue'));
                    button.disabled = false;
                    button.textContent = 'Stop Queue';
                }
            } catch (error) {
                console.error('Error stopping queue:', error);
                alert('❌ Error stopping queue: ' + error.message);
                button.disabled = false;
                button.textContent = 'Stop Queue';
            }
        }
        
        async function markAsSeated(queueId, customerId) {
            // Get customer name for confirmation
            const customerRow = event.target.closest('.customer-row');
            const customerName = customerRow.querySelector('.customer-name').textContent;
            
            // Confirmation dialog to prevent accidental clicks
            if (!confirm(`Are you sure you want to seat ${customerName}?\n\nThis will send them a welcome message with the menu link.`)) {
                return;
            }
            
            const button = event.target;
            button.disabled = true;
            button.textContent = 'Seating...';
            
            try {
                const response = await fetch(`/api/queue/${queueId}/complete/${customerId}`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(`✅ ${customerName} successfully seated!`);
                    setTimeout(() => window.location.reload(), 500);
                } else {
                    alert(result.error || 'Failed to seat customer');
                    button.disabled = false;
                    button.textContent = 'Seated';
                }
            } catch (error) {
                console.error('Error seating customer:', error);
                alert('Error seating customer');
                button.disabled = false;
                button.textContent = 'Seated';
            }
        }
        
        async function selectCustomer(queueId, customerId) {
            if (!confirm('Are you sure you want to notify this customer?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/queue/${queueId}/call-specific`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: { 
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    },
                    body: JSON.stringify({ customerId })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(`Notified: ${result.customer.customerName}`);
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Failed to notify customer');
                }
            } catch (error) {
                console.error('Error notifying customer:', error);
                alert('Error notifying customer');
            }
        }
        
        function refreshQueue() {
            window.location.reload();
        }
        
        function copyQueueLink(queuePath) {
            const fullUrl = window.location.origin + queuePath;
            navigator.clipboard.writeText(fullUrl).then(() => {
                // Show copy feedback
                const button = event.target.closest('.btn-copy');
                const originalIcon = button.innerHTML;
                button.innerHTML = '<i class="bi bi-check"></i>';
                button.style.color = '#25D366';
                
                setTimeout(() => {
                    button.innerHTML = originalIcon;
                    button.style.color = '';
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy link:', err);
                alert('Failed to copy link');
            });
        }

        async function callCustomer(queueId, customerId) {
            if (!confirm('Are you sure you want to notify this customer?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/queue/${queueId}/call-specific`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: { 
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    },
                    body: JSON.stringify({ customerId })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(`✅ Notified: ${result.customer.customerName}`);
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Failed to notify customer');
                }
            } catch (error) {
                console.error('Error notifying customer:', error);
                alert('Error notifying customer');
            }
        }

        async function completeService(queueId, customerId) {
            const customerCard = event.target.closest('.customer-card');
            const customerName = customerCard.querySelector('.customer-name').textContent;
            
            if (!confirm(`Are you sure you want to complete service for ${customerName}?`)) {
                return;
            }
            
            try {
                const response = await fetch(`/api/queue/${queueId}/complete/${customerId}`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: { 
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(`✅ Service completed for ${customerName}`);
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Failed to complete service');
                }
            } catch (error) {
                console.error('Error completing service:', error);
                alert('Error completing service');
            }
        }

        async function requeueCustomer(queueId, customerId) {
            if (!confirm('Are you sure you want to requeue this customer?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/queue/${queueId}/requeue/${customerId}`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: { 
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Customer requeued successfully');
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Failed to requeue customer');
                }
            } catch (error) {
                console.error('Error requeuing customer:', error);
                alert('Error requeuing customer');
            }
        }
        
        async function revokeNotification(queueId, customerId) {
            if (!confirm('Are you sure you want to revoke this notification? The customer will need to be notified again.')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/queue/${queueId}/revoke/${customerId}`, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: { 
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Notification revoked successfully');
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Failed to revoke notification');
                }
            } catch (error) {
                console.error('Error revoking notification:', error);
                alert('Error revoking notification');
            }
        }
        
        // Add new customer to the queue display dynamically
        function addNewCustomerToQueue(customer, queueId) {
            const activeQueueTab = document.getElementById('active-queue');
            if (!activeQueueTab || !activeQueueTab.classList.contains('active')) {
                return; // Only update if viewing active queue
            }
            
            // Save scroll position
            const scrollPosition = window.pageYOffset || document.documentElement.scrollTop;
            
            const noCustomersDiv = activeQueueTab.querySelector('.no-customers');
            if (noCustomersDiv) {
                // Replace empty state with customer list structure
                createCustomerListStructure(activeQueueTab);
            }
            
            const customerListDesktop = activeQueueTab.querySelector('.customer-list-desktop');
            const customerListMobile = activeQueueTab.querySelector('.customer-list-mobile');
            
            if (customerListDesktop) {
                // Update existing customer positions
                updateCustomerPositions();
                
                // Create new customer row
                const newRow = createCustomerRow(customer, getNextPosition());
                customerListDesktop.appendChild(newRow);
                
                // Store joined time for wait time calculations
                newRow.setAttribute('data-joined-at', new Date().toISOString());
                
                // Animate the new row
                setTimeout(() => {
                    newRow.classList.add('new-customer-row');
                    
                    // Restore scroll position
                    window.scrollTo(0, scrollPosition);
                    
                    // If list is near bottom, auto-scroll to show new customer
                    const listBottom = customerListDesktop.getBoundingClientRect().bottom;
                    const windowHeight = window.innerHeight;
                    if (listBottom < windowHeight + 200) {
                        newRow.scrollIntoView({ behavior: 'smooth', block: 'end' });
                    }
                }, 10);
            }
            
            if (customerListMobile) {
                const newCard = createCustomerCard(customer, getNextPosition());
                customerListMobile.appendChild(newCard);
                
                // Animate mobile card
                setTimeout(() => {
                    newCard.classList.add('new-customer-row');
                }, 10);
            }
        }
        
        function createCustomerListStructure(container) {
            const queueSection = container.querySelector('.queue-section');
            if (!queueSection) return;
            
            // Remove no-customers div
            const noCustomersDiv = container.querySelector('.no-customers');
            if (noCustomersDiv) {
                noCustomersDiv.remove();
            }
            
            // Create desktop list
            const desktopList = document.createElement('div');
            desktopList.className = 'customer-list customer-list-desktop';
            desktopList.innerHTML = `
                <div class="customer-list-header">
                    <span>#</span>
                    <span>Customer</span>
                    <span>Contact</span>
                    <span>Party</span>
                    <span>Wait</span>
                    <span>Notified</span>
                    <span>Code</span>
                    <span>Special Requests</span>
                    <span>Actions</span>
                </div>
            `;
            
            // Create mobile list
            const mobileList = document.createElement('div');
            mobileList.className = 'customer-list-mobile';
            
            queueSection.appendChild(desktopList);
            queueSection.appendChild(mobileList);
        }
        
        function createCustomerRow(customer, position) {
            const row = document.createElement('div');
            row.className = 'customer-row';
            row.setAttribute('data-customer-id', customer._id || customer.id);
            
            const isNext = position === 1;
            if (isNext) {
                row.classList.add('next-customer');
            }
            
            row.innerHTML = `
                <div class="position">
                    ${position}
                    ${isNext ? '<div class="next-badge">NEXT</div>' : ''}
                </div>
                <div class="customer-name">
                    ${customer.customerName}
                    ${customer.platform === 'webchat' ? `
                        <span class="connection-status" data-session-id="${customer.sessionId}" title="WebChat Customer">
                            <i class="bi bi-circle-fill" style="font-size: 8px; color: #ccc;"></i>
                        </span>
                    ` : ''}
                </div>
                <div class="phone">
                    ${customer.platform === 'webchat' ? 
                        `<span class="webchat-badge" title="Session: ${customer.sessionId || 'Unknown'}">
                            <i class="bi bi-chat-dots"></i> WebChat
                        </span>` : 
                        (customer.phoneNumber || customer.customerPhone || '-')
                    }
                </div>
                <div class="party-size">${customer.partySize}</div>
                <div class="wait-time">0 min</div>
                <div class="notified-time">
                    <span>-</span>
                </div>
                <div class="verification-code">
                    <span>-</span>
                </div>
                <div class="special-requests">
                    ${customer.specialRequests && customer.specialRequests.trim() ? 
                        `<span class="special-requests-text" title="${customer.specialRequests}">
                            ${customer.specialRequests.length > 30 ? customer.specialRequests.substring(0, 30) + '...' : customer.specialRequests}
                        </span>` : 
                        '<span class="no-requests">-</span>'
                    }
                </div>
                <div class="actions">
                    ${isNext ? 
                        `<button class="btn-action btn-notify" onclick="notifyNext('${customer.queueId || customer.queue || getActiveQueueId()}')">Notify</button>` :
                        `<button class="btn-action btn-select" onclick="selectCustomer('${customer.queueId || customer.queue}', '${customer._id || customer.id}')">Select</button>`
                    }
                </div>
            `;
            
            return row;
        }
        
        function createCustomerCard(customer, position) {
            const card = document.createElement('div');
            card.className = 'customer-card';
            if (position === 1) {
                card.classList.add('next-customer');
            }
            
            card.innerHTML = `
                <div class="customer-card-header">
                    <span class="position-badge">${position}</span>
                    <h3>${customer.customerName}</h3>
                    ${position === 1 ? '<span class="status-badge next">NEXT</span>' : ''}
                </div>
                <div class="customer-card-body">
                    <div class="customer-info-row">
                        <i class="bi bi-phone"></i>
                        <span>${customer.phoneNumber || customer.customerPhone || '-'}</span>
                    </div>
                    <div class="customer-info-row">
                        <i class="bi bi-people"></i>
                        <span>${customer.partySize} people</span>
                    </div>
                    <div class="customer-info-row">
                        <i class="bi bi-clock"></i>
                        <span>0 min</span>
                    </div>
                    ${customer.specialRequests ? `
                        <div class="customer-info-row">
                            <i class="bi bi-chat-text"></i>
                            <span>${customer.specialRequests}</span>
                        </div>
                    ` : ''}
                </div>
                <div class="customer-card-actions">
                    <button onclick="callCustomer('${customer.queueId || customer.queue}', '${customer._id || customer.id}')" class="action-button call-button">
                        <i class="bi bi-megaphone"></i> Call
                    </button>
                </div>
            `;
            
            return card;
        }
        
        function getNextPosition() {
            const rows = document.querySelectorAll('#active-queue .customer-row');
            return rows.length + 1;
        }
        
        function updateCustomerPositions() {
            const rows = document.querySelectorAll('#active-queue .customer-row');
            rows.forEach((row, index) => {
                const positionDiv = row.querySelector('.position');
                const oldPosition = parseInt(positionDiv.textContent);
                const newPosition = index + 2; // New customer will be at the end
                
                if (oldPosition !== newPosition) {
                    positionDiv.innerHTML = newPosition.toString();
                    
                    // Remove NEXT badge from previous first customer
                    if (oldPosition === 1) {
                        row.classList.remove('next-customer');
                        const nextBadge = positionDiv.querySelector('.next-badge');
                        if (nextBadge) nextBadge.remove();
                        
                        // Update button
                        const actionBtn = row.querySelector('.btn-notify');
                        if (actionBtn) {
                            actionBtn.className = 'btn-action btn-select';
                            actionBtn.textContent = 'Select';
                            const customerId = row.getAttribute('data-customer-id');
                            const queueId = getActiveQueueId();
                            actionBtn.onclick = () => selectCustomer(queueId, customerId);
                        }
                    }
                }
            });
            
            // Update mobile cards too
            const cards = document.querySelectorAll('#active-queue .customer-card');
            cards.forEach((card, index) => {
                const badge = card.querySelector('.position-badge');
                if (badge) {
                    badge.textContent = index + 2;
                }
            });
        }
        
        function getActiveQueueId() {
            // Extract queue ID from existing elements or store it globally
            const notifyBtn = document.querySelector('.btn-notify');
            if (notifyBtn && notifyBtn.onclick) {
                const onclickStr = notifyBtn.onclick.toString();
                const match = onclickStr.match(/notifyNext\('([^']+)'\)/);
                if (match) return match[1];
            }
            return null;
        }
        
        function showNewCustomerNotification(customer) {
            const notification = document.createElement('div');
            notification.className = 'new-customer-notification';
            notification.innerHTML = `
                <i class="bi bi-person-plus-fill"></i>
                <div class="notification-text">
                    <div class="notification-title">New Customer Joined!</div>
                    <div class="notification-details">${customer.customerName} • Party of ${customer.partySize}</div>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            // Play notification sound if enabled
            playNotificationSound();
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                notification.style.animation = 'slideInRight 0.3s ease-out reverse';
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }, 5000);
        }
        
        function updateQueueStats() {
            // Update the stats in the header
            const waitingCount = document.querySelectorAll('#active-queue .customer-row').length;
            
            // Update queue summary stats
            const queueStats = document.querySelectorAll('.queue-stats .number');
            if (queueStats[0]) {
                queueStats[0].textContent = waitingCount;
            }
            
            // Update main stats cards
            const totalWaitingElement = document.getElementById('totalWaitingCount');
            if (totalWaitingElement) {
                totalWaitingElement.textContent = waitingCount;
            }
            
            // Recalculate average wait time
            updateAverageWaitTime();
        }
        
        function updateAverageWaitTime() {
            const rows = document.querySelectorAll('#active-queue .customer-row');
            let totalWait = 0;
            let count = 0;
            
            rows.forEach(row => {
                const waitTimeElement = row.querySelector('.wait-time');
                if (waitTimeElement) {
                    const waitText = waitTimeElement.textContent;
                    const minutes = parseInt(waitText.match(/\d+/)?.[0] || 0);
                    totalWait += minutes;
                    count++;
                }
            });
            
            const avgWait = count > 0 ? Math.round(totalWait / count) : 0;
            
            // Update average wait time displays
            const queueStats = document.querySelectorAll('.queue-stats .number');
            if (queueStats[1]) {
                queueStats[1].textContent = avgWait;
            }
            
            const averageWaitTimeElement = document.getElementById('averageWaitTime');
            if (averageWaitTimeElement) {
                averageWaitTimeElement.textContent = avgWait;
            }
        }
        
        // Audio notification support
        let audioEnabled = localStorage.getItem('queueAudioEnabled') !== 'false';
        
        function playNotificationSound() {
            if (!audioEnabled) return;
            
            const audio = new Audio('data:audio/wav;base64,UklGRhwGAABXQVZFZm10IBAAAAABAAEAQB8AAIA+AAACABAAZGF0YQAGAACAhYiLjo+Rk5WXmZqcnZ+ho6WmqKmrrK6vsLGys7S1t7i5uru8vL29vr6/v8DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwL+/v7+/vr69vby7uru6ubm4t7a2tbSzsrGwr66trKuqqainpqWko6GgnpybmpmXlpSSkZCOjIuJh4WEgoB+fHp4dnRycG5sa2llY2FeXFpYVlRSUE5MSklGREJAPjw6ODY0MjAuLCooJiQiIB4cGhgWFBIQDgwKCAYEAgABAwUHCQsMDhASFBYYGhweICIkJigqLC4wMjQ2ODo8PkBCREdJSk1OUFFTVFZYW1xeYGNlZ2lrbG5vcXN1d3l7fX+AgoSGiImLjY6QkpOVl5iZm52eoKKkpaanqaqrrK2ur7CxsrO0tba3uLm6uru8vb6+v7/AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcG/vLm1sq+rp6Sgm5eTj4uHg4B8eHRwbGhkYFxYVFBMSERAOzc0MC0oJCEcGRUNDAkFAv78+vj29PPx7+zq6Obk4uDe3Nva2NbU0tDOzMvJyMbEw8HAwL++vby7urm4t7a1tLOysbCvrq2sq6qpqKempaSjoqGhoKCfn56enZ2cnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJybnZybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJybnJydnZ2enp+fn6ChoaKio6SlpqeoqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/wABAgMEBQYHCAkKCwwNDg8QERITFBUWFxgZGhscHR4fICEiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/gIGCg4SFhoeIiYqLjI2Oj5CRkpOUlZaXmJmam5ydnp+goaKjpKWmp6ipqqusra6vsLGys7S1tre4ubq7vL2+v8DBwsPExcbHyMnKy8zNzs/Q0dLT1NXW19jZ2tvc3d7f4OHi4+Tl5ufo6err7O3u7/Dx8vP09fb3+Pn6+/z9/v8=');
            audio.volume = 0.5;
            audio.play().catch(e => {
                console.log('Audio playback failed:', e);
            });
        }
        
        function toggleAudioNotifications() {
            audioEnabled = !audioEnabled;
            localStorage.setItem('queueAudioEnabled', audioEnabled.toString());
            updateAudioButton();
        }
        
        function updateAudioButton() {
            const btn = document.getElementById('audioControlBtn');
            if (btn) {
                if (audioEnabled) {
                    btn.classList.remove('muted');
                    btn.innerHTML = '<i class="bi bi-volume-up-fill"></i>';
                    btn.title = 'Mute notifications';
                } else {
                    btn.classList.add('muted');
                    btn.innerHTML = '<i class="bi bi-volume-mute-fill"></i>';
                    btn.title = 'Enable notification sounds';
                }
            }
        }
        
        // Update wait times dynamically
        function updateWaitTimes() {
            const now = new Date();
            
            document.querySelectorAll('.customer-row').forEach(row => {
                const customerId = row.getAttribute('data-customer-id');
                const joinedAt = row.getAttribute('data-joined-at');
                
                if (joinedAt) {
                    const waitMinutes = Math.floor((now - new Date(joinedAt)) / (1000 * 60));
                    const waitTimeElement = row.querySelector('.wait-time');
                    if (waitTimeElement) {
                        waitTimeElement.textContent = `${waitMinutes} min`;
                    }
                }
            });
            
            updateAverageWaitTime();
        }
        
        // Update notification timers every minute
        function updateNotificationTimers() {
            const timerElements = document.querySelectorAll('.notified-time .timer');
            timerElements.forEach(timer => {
                const row = timer.closest('.customer-row');
                const calledAt = row.getAttribute('data-called-at');
                
                if (calledAt) {
                    const calledTime = new Date(calledAt);
                    const now = new Date();
                    const diffMinutes = Math.floor((now - calledTime) / (1000 * 60));
                    
                    if (diffMinutes < 60) {
                        timer.textContent = `${diffMinutes} min`;
                    } else {
                        const hours = Math.floor(diffMinutes / 60);
                        const minutes = diffMinutes % 60;
                        timer.textContent = `${hours}h ${minutes}m`;
                    }
                }
            });
        }
        
        // Start timer updates
        setInterval(updateNotificationTimers, 60000); // Update every minute
        updateNotificationTimers(); // Initial update
    </script>
    
    <!-- Audio Control Button -->
    <button id="audioControlBtn" class="audio-control" onclick="toggleAudioNotifications()" title="Toggle notification sounds">
        <i class="bi bi-volume-up-fill"></i>
    </button>
    
    <!-- Bottom Navigation for Mobile -->
    <nav class="bottom-nav">
        <a href="/dashboard" class="bottom-nav-item active">
            <i class="bi bi-speedometer2"></i>
            <span>Dashboard</span>
        </a>
        <a href="/dashboard/analytics" class="bottom-nav-item">
            <i class="bi bi-bar-chart"></i>
            <span>Analytics</span>
        </a>
        <a href="/dashboard/settings" class="bottom-nav-item">
            <i class="bi bi-gear"></i>
            <span>Settings</span>
        </a>
        <a href="/dashboard/help" class="bottom-nav-item">
            <i class="bi bi-question-circle"></i>
            <span>Help</span>
        </a>
    </nav>
    
    <script>
        // Quick Actions for FAB
        function showQuickActions() {
            // You can implement a modal or action sheet here
            const actions = [
                { label: 'Call Next', action: () => callNextCustomer() },
                { label: 'View Public Queue', action: () => {
                    const activeQueue = document.querySelector('[data-active-queue-id]');
                    if (activeQueue) {
                        window.open('/queue/' + activeQueue.dataset.activeQueueId, '_blank');
                    }
                }}
            ];
            
            // Simple implementation - you can enhance this
            const actionLabels = actions.map(a => a.label).join('\n');
            const choice = prompt('Quick Actions:\n' + actionLabels + '\n\nEnter action number (1-' + actions.length + ')');
            if (choice && actions[parseInt(choice) - 1]) {
                actions[parseInt(choice) - 1].action();
            }
        }
    </script>
    
</body>
</html> 