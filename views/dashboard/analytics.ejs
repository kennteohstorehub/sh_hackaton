<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #000000 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            min-height: 100vh;
            color: #ffffff;
            overflow-x: hidden;
        }
        
        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        @keyframes fadeInScale {
            0% {
                opacity: 0;
                transform: scale(0.9) translateY(20px);
            }
            100% {
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }
        
        @keyframes rotateGlow {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }
        
        @keyframes shimmer {
            0% {
                transform: translateX(-100%);
            }
            100% {
                transform: translateX(100%);
            }
        }
        
        .header {
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 140, 0, 0.3);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header h1 {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-size: 1.5rem;
            font-weight: 700;
            min-width: 200px;
        }
        
        /* Fixed Navigation */
        .nav {
            display: flex;
            gap: 0;
            background: rgba(0, 0, 0, 0.5);
            border-radius: 12px;
            padding: 0.25rem;
            border: 1px solid rgba(255, 140, 0, 0.2);
        }
        
        .nav a {
            text-decoration: none;
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-size: 0.85rem;
            white-space: nowrap;
            text-align: center;
            min-width: 100px; /* Fixed minimum width for all nav items */
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            z-index: 1;
        }
        
        .nav a:hover {
            background: rgba(255, 140, 0, 0.15);
            color: white;
            transform: translateY(-1px);
        }
        
        .nav a.active {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            box-shadow: 0 2px 8px rgba(255, 140, 0, 0.3);
        }
        
        /* User Section */
        .user-section {
            display: flex;
            align-items: center;
            gap: 1rem;
            min-width: 120px; /* Prevent user section from shifting */
        }
        
        .user-menu {
            position: relative;
        }
        
        .user-button {
            background: rgba(255, 140, 0, 0.1);
            border: 1px solid rgba(255, 140, 0, 0.3);
            color: rgba(255, 255, 255, 0.9);
            padding: 0.6rem 1rem;
            border-radius: 8px;
            font-size: 0.85rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }
        
        .user-button:hover {
            background: rgba(255, 140, 0, 0.2);
            border-color: rgba(255, 140, 0, 0.5);
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .section {
            background: rgba(255, 140, 0, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 140, 0, 0.3);
            padding: 2.5rem;
            border-radius: 20px;
            margin-bottom: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }
        
        .section:hover {
            transform: translateY(-4px);
            box-shadow: 0 16px 48px rgba(255, 140, 0, 0.2);
            border-color: rgba(255, 140, 0, 0.4);
        }
        
        .section h2 {
            margin-bottom: 2rem;
            color: #ffffff;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 600;
            font-size: 1.5rem;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 2rem;
            margin-bottom: 3rem;
        }
        
        .stat-card {
            background: rgba(255, 140, 0, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 140, 0, 0.3);
            padding: 2rem;
            border-radius: 20px;
            text-align: center;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        }
        
        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(255, 140, 0, 0.1), rgba(255, 140, 0, 0.05));
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 20px 60px rgba(255, 140, 0, 0.3);
            border-color: rgba(255, 140, 0, 0.5);
        }
        
        .stat-card:hover::before {
            opacity: 1;
        }
        
        .stat-number {
            font-size: 3rem;
            font-weight: 700;
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.5rem;
            position: relative;
            z-index: 1;
        }
        
        .stat-label {
            color: rgba(255, 255, 255, 0.9);
            font-size: 1rem;
            font-weight: 500;
            position: relative;
            z-index: 1;
        }
        
        .period-selector {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
        }
        
        .period-btn {
            padding: 0.75rem 1.5rem;
            border: 2px solid rgba(255, 140, 0, 0.3);
            background: rgba(255, 140, 0, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            font-size: 0.9rem;
            font-weight: 500;
            color: rgba(255, 255, 255, 0.9);
        }
        
        .period-btn.active {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            border-color: transparent;
            box-shadow: 0 4px 15px rgba(255, 140, 0, 0.3);
        }
        
        .period-btn:hover:not(.active) {
            border-color: rgba(255, 140, 0, 0.5);
            background: rgba(255, 140, 0, 0.15);
            transform: translateY(-2px);
        }
        
        /* Hourly Heatmap Styles */
        
        .heatmap-container {
            overflow-x: auto;
            padding: 1rem 0;
            border-radius: 12px;
            background: rgba(255, 140, 0, 0.05);
            border: 1px solid rgba(255, 140, 0, 0.2);
        }
        
        .heatmap {
            display: grid;
            /* Grid columns will be set dynamically via inline style */
            gap: 3px;
            min-width: 800px;
            font-size: 0.8rem;
            padding: 1rem;
        }
        
        .heatmap-header {
            background: rgba(255, 140, 0, 0.1);
            padding: 0.5rem;
            text-align: center;
            font-weight: 600;
            border-radius: 8px;
            color: #ffffff;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 140, 0, 0.2);
            font-size: 0.75rem;
            min-height: 45px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .heatmap-day {
            background: rgba(255, 140, 0, 0.1);
            padding: 0.5rem;
            text-align: center;
            font-weight: 600;
            border-radius: 8px;
            color: #ffffff;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 140, 0, 0.2);
            font-size: 0.75rem;
            min-height: 45px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .heatmap-cell {
            padding: 0.5rem;
            text-align: center;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            min-height: 45px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 500;
            backdrop-filter: blur(10px);
            font-size: 0.75rem;
        }
        
        .heatmap-cell:hover {
            transform: scale(1.1);
            z-index: 10;
            position: relative;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }
        
        /* Operating Hours Specific Styles */
        .closed-day {
            color: rgba(255, 255, 255, 0.4) !important;
            background: rgba(128, 128, 128, 0.1) !important;
        }
        
        .closed-day-cell {
            background: rgba(128, 128, 128, 0.1) !important;
            color: rgba(255, 255, 255, 0.3) !important;
            cursor: not-allowed;
        }
        
        .closed-day-cell:hover {
            transform: none !important;
            box-shadow: none !important;
        }
        
        .non-operating-hour {
            background: rgba(64, 64, 64, 0.2) !important;
            color: rgba(255, 255, 255, 0.2) !important;
            cursor: help;
        }
        
        .non-operating-hour:hover {
            transform: scale(1.05);
            box-shadow: 0 2px 8px rgba(64, 64, 64, 0.3);
        }
        
        /* Heat intensity colors with glassmorphism */
        .heat-0 { background: rgba(255, 140, 0, 0.1); color: rgba(255, 255, 255, 0.6); border: 1px solid rgba(255, 140, 0, 0.1); }
        .heat-1 { background: rgba(255, 140, 0, 0.2); color: rgba(255, 255, 255, 0.9); border: 1px solid rgba(255, 140, 0, 0.2); }
        .heat-2 { background: rgba(255, 140, 0, 0.3); color: rgba(255, 255, 255, 0.9); border: 1px solid rgba(255, 140, 0, 0.3); }
        .heat-3 { background: rgba(255, 140, 0, 0.4); color: white; border: 1px solid rgba(255, 140, 0, 0.4); }
        .heat-4 { background: rgba(255, 140, 0, 0.6); color: white; border: 1px solid rgba(255, 140, 0, 0.5); }
        .heat-5 { background: rgba(255, 140, 0, 0.8); color: white; border: 1px solid rgba(255, 140, 0, 0.6); }
        
        /* Non-operating hour cells */
        .non-operating-hour {
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: rgba(255, 255, 255, 0.3);
            font-style: italic;
        }
        
        .non-operating-hour:hover {
            transform: none;
            cursor: not-allowed;
        }
        
        /* Peak Hours Chart */
        .peak-hours-container {
            overflow-x: auto;
            padding: 1rem 0;
            border-radius: 12px;
            background: rgba(255, 140, 0, 0.05);
            border: 1px solid rgba(255, 140, 0, 0.2);
        }
        
        .peak-hours-chart {
            display: flex;
            align-items: end;
            gap: 2px;
            height: 280px;
            margin: 1.5rem 0;
            padding: 2rem 1rem;
            background: rgba(255, 140, 0, 0.05);
            border: 1px solid rgba(255, 140, 0, 0.2);
            border-radius: 16px;
            backdrop-filter: blur(10px);
            min-width: auto;
            width: 100%;
            justify-content: center;
        }
        
        .peak-bar {
            flex: 0 0 auto;
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            border-radius: 8px 8px 0 0;
            position: relative;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            min-height: 8px;
            width: 30px;
            box-shadow: 0 4px 15px rgba(255, 140, 0, 0.3);
        }
        
        .peak-bar:hover {
            background: linear-gradient(135deg, #ff6b35, #ff8c00);
            transform: scaleY(1.05) translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 140, 0, 0.4);
        }
        
        .peak-bar-label {
            position: absolute;
            bottom: -35px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 0.75rem;
            color: rgba(255, 255, 255, 0.8);
            font-weight: 600;
            white-space: nowrap;
        }
        
        .peak-bar-value {
            position: absolute;
            top: -35px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 0.75rem;
            color: rgba(255, 255, 255, 0.95);
            font-weight: 700;
            background: rgba(0, 0, 0, 0.4);
            padding: 0.3rem 0.6rem;
            border-radius: 8px;
            backdrop-filter: blur(15px);
            white-space: nowrap;
            border: 1px solid rgba(255, 140, 0, 0.3);
        }
        
        /* Insights Cards */
        .insights-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }
        
        .insight-card {
            background: rgba(255, 140, 0, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 140, 0, 0.3);
            color: #ffffff;
            padding: 2rem;
            border-radius: 20px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        }
        
        .insight-card::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 120px;
            height: 120px;
            background: rgba(255, 140, 0, 0.05);
            border-radius: 50%;
            transform: translate(40px, -40px);
        }
        
        .insight-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 16px 48px rgba(255, 140, 0, 0.2);
            border-color: rgba(255, 140, 0, 0.4);
        }
        
        .insight-card h4 {
            margin-bottom: 1rem;
            font-size: 1.2rem;
            font-weight: 600;
            position: relative;
            z-index: 1;
        }
        
        .insight-card p {
            font-size: 1rem;
            opacity: 0.9;
            line-height: 1.5;
            position: relative;
            z-index: 1;
        }
        
        .insight-card.warning::before {
            background: rgba(244, 67, 54, 0.1);
        }
        
        .insight-card.success::before {
            background: rgba(76, 175, 80, 0.1);
        }
        
        .insight-card.info::before {
            background: rgba(33, 150, 243, 0.1);
        }
        
        /* Day comparison line chart */
        .day-line-chart-container {
            overflow-x: auto;
            padding: 1rem 0;
            border-radius: 12px;
            background: rgba(255, 140, 0, 0.05);
            border: 1px solid rgba(255, 140, 0, 0.2);
        }
        
        .day-line-chart {
            position: relative;
            height: 300px;
            margin: 2rem;
            padding: 2rem;
            background: rgba(255, 140, 0, 0.05);
            border: 1px solid rgba(255, 140, 0, 0.2);
            border-radius: 16px;
            backdrop-filter: blur(10px);
            min-width: 600px;
        }
        
        .chart-grid {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
        }
        
        .grid-line-horizontal {
            position: absolute;
            left: 0;
            right: 0;
            height: 1px;
            background: rgba(255, 255, 255, 0.1);
        }
        
        .grid-line-vertical {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 1px;
            background: rgba(255, 255, 255, 0.1);
        }
        
        .chart-line {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
        }
        
        .chart-svg {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }
        
        .chart-path {
            fill: none;
            stroke: url(#lineGradient);
            stroke-width: 3;
            stroke-linecap: round;
            stroke-linejoin: round;
            filter: drop-shadow(0 2px 8px rgba(255, 140, 0, 0.4));
            stroke-dasharray: 1000;
            stroke-dashoffset: 1000;
            animation: drawLine 2s ease-in-out forwards;
        }
        
        .chart-area {
            fill: url(#areaGradient);
            opacity: 0;
            animation: fadeInArea 2s ease-in-out 0.5s forwards;
        }
        
        @keyframes drawLine {
            to {
                stroke-dashoffset: 0;
            }
        }
        
        @keyframes fadeInArea {
            to {
                opacity: 0.3;
            }
        }
        
        .day-line-chart .chart-point:nth-child(1) { animation-delay: 1.8s; }
        .day-line-chart .chart-point:nth-child(2) { animation-delay: 1.9s; }
        .day-line-chart .chart-point:nth-child(3) { animation-delay: 2.0s; }
        .day-line-chart .chart-point:nth-child(4) { animation-delay: 2.1s; }
        .day-line-chart .chart-point:nth-child(5) { animation-delay: 2.2s; }
        .day-line-chart .chart-point:nth-child(6) { animation-delay: 2.3s; }
        .day-line-chart .chart-point:nth-child(7) { animation-delay: 2.4s; }
        
        @keyframes fadeInPoint {
            0% {
                opacity: 0;
                transform: translate(-50%, -50%) scale(0);
            }
            50% {
                transform: translate(-50%, -50%) scale(1.3);
            }
            100% {
                opacity: 1;
                transform: translate(-50%, -50%) scale(1);
            }
        }
        
        .day-line-chart .chart-point {
            position: absolute;
            width: 12px;
            height: 12px;
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            border: 3px solid rgba(255, 255, 255, 0.9);
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 4px 15px rgba(255, 140, 0, 0.3);
            z-index: 10;
            opacity: 0;
            animation: fadeInPoint 0.6s ease-out forwards;
        }
        
        .chart-point:hover {
            transform: scale(1.3);
            box-shadow: 0 6px 20px rgba(255, 140, 0, 0.5);
        }
        
        .chart-point.peak-point {
            background: linear-gradient(135deg, #ff6b35, #ff4500);
            box-shadow: 0 6px 20px rgba(255, 107, 53, 0.5);
            transform: scale(1.2);
        }
        
        .chart-label {
            position: absolute;
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.75rem;
            font-weight: 600;
            white-space: nowrap;
            pointer-events: none;
        }
        
        .chart-label.x-axis {
            bottom: -25px;
            transform: translateX(-50%);
        }
        
        .chart-label.y-axis {
            left: -35px;
            transform: translateY(-50%);
        }
        
        .chart-value-label {
            position: absolute;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 0.3rem 0.6rem;
            border-radius: 8px;
            font-size: 0.7rem;
            font-weight: 700;
            white-space: nowrap;
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 140, 0, 0.3);
            pointer-events: none;
            z-index: 20;
        }
        
        /* Legacy day comparison styles for fallback */
        .day-comparison {
            display: flex;
            gap: 1.5rem;
            margin: 1.5rem 0;
            overflow-x: auto;
            padding: 0.5rem 0;
            scroll-behavior: smooth;
        }
        
        .day-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 1.5rem;
            border-radius: 16px;
            text-align: center;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            min-width: 140px;
            flex-shrink: 0;
        }
        
        .day-card:hover {
            border-color: rgba(255, 140, 0, 0.5);
            transform: translateY(-4px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }
        
        .day-card.peak-day {
            background: linear-gradient(135deg, rgba(255, 140, 0, 0.2), rgba(255, 107, 53, 0.2));
            border-color: rgba(255, 140, 0, 0.5);
            box-shadow: 0 8px 25px rgba(255, 140, 0, 0.2);
        }
        
        .day-name {
            font-weight: 600;
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 0.75rem;
            font-size: 1rem;
        }
        
        .day-customers {
            font-size: 2rem;
            font-weight: 700;
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.5rem;
        }
        
        .day-label {
            font-size: 0.85rem;
            color: rgba(255, 255, 255, 0.7);
            font-weight: 500;
        }
        
        .btn {
            background: linear-gradient(135deg, #ff8c00, #ff6b35);
            color: white;
            padding: 0.875rem 2rem;
            border: none;
            border-radius: 12px;
            text-decoration: none;
            display: inline-block;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            font-weight: 600;
            font-size: 0.95rem;
            box-shadow: 0 4px 15px rgba(255, 140, 0, 0.3);
            position: relative;
            overflow: hidden;
        }
        
        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 140, 0, 0.4);
        }
        
        .btn:hover::before {
            left: 100%;
        }
        
        .btn-secondary {
            background: linear-gradient(135deg, #6c757d, #495057);
            box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
        }
        
        .btn-secondary:hover {
            box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
        }
        
        .loading {
            text-align: center;
            padding: 3rem;
            color: rgba(255, 255, 255, 0.7);
            font-size: 1.1rem;
        }
        

        
        /* Floating particles animation */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }
        
        .particle {
            position: absolute;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            animation: float 6s ease-in-out infinite;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }
        
        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                gap: 1rem;
                padding: 1rem;
            }
            
            .nav {
                flex-wrap: wrap;
                justify-content: center;
                gap: 0.5rem;
            }
            
            .nav a {
                padding: 0.5rem 1rem;
                font-size: 0.9rem;
            }
            
            .container {
                padding: 1rem;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .stat-card {
                padding: 1.5rem;
            }
            
            .stat-number {
                font-size: 2.5rem;
            }
            
            .heatmap-container {
                padding: 0.5rem 0;
            }
            
            .heatmap {
                font-size: 0.6rem;
                min-width: 600px;
                padding: 0.5rem;
                gap: 2px;
            }
            
            .heatmap-cell,
            .heatmap-header,
            .heatmap-day {
                min-height: 35px;
                padding: 0.25rem;
                font-size: 0.6rem;
            }
            
            .insights-grid {
                grid-template-columns: 1fr;
            }
            
            .day-comparison {
                gap: 1rem;
                padding: 0.5rem;
            }
            
            .day-card {
                min-width: 120px;
                padding: 1rem;
            }
            
            .day-customers {
                font-size: 1.5rem;
            }
            
            .day-name {
                font-size: 0.9rem;
            }
            
            .day-label {
                font-size: 0.75rem;
            }
            
            .peak-hours-container {
                padding: 0.5rem 0;
            }
            
            .peak-hours-chart {
                min-width: 1000px;
                height: 250px;
                padding: 1rem;
                gap: 3px;
            }
            
            .peak-bar {
                min-width: 35px;
                max-width: 40px;
            }
            
            .peak-bar-label {
                font-size: 0.65rem;
                bottom: -30px;
            }
            
            .peak-bar-value {
                font-size: 0.65rem;
                top: -30px;
                padding: 0.2rem 0.4rem;
            }
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
        }
        
        ::-webkit-scrollbar-thumb {
            background: rgba(255, 140, 0, 0.5);
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 140, 0, 0.7);
        }
    </style>
</head>
<body>
    <!-- Floating particles -->
    <div class="particles">
        <div class="particle" style="left: 15%; top: 25%; width: 4px; height: 4px; animation-delay: 0s;"></div>
        <div class="particle" style="left: 25%; top: 75%; width: 6px; height: 6px; animation-delay: 1s;"></div>
        <div class="particle" style="left: 65%; top: 35%; width: 3px; height: 3px; animation-delay: 2s;"></div>
        <div class="particle" style="left: 85%; top: 65%; width: 5px; height: 5px; animation-delay: 3s;"></div>
        <div class="particle" style="left: 35%; top: 15%; width: 4px; height: 4px; animation-delay: 4s;"></div>
        <div class="particle" style="left: 75%; top: 85%; width: 3px; height: 3px; animation-delay: 5s;"></div>
    </div>

    <header class="header">
        <div class="header-content">
            <h1>StoreHub Queue Management System</h1>
            <nav class="nav">
                <a href="/dashboard">Dashboard</a>
                <a href="/dashboard/analytics" class="active">Analytics</a>
                <a href="/dashboard/whatsapp-setup">WhatsApp</a>
                <a href="/dashboard/settings">Settings</a>
                <a href="/dashboard/help">Help</a>
            </nav>
            <div class="user-section">
                <div class="user-menu">
                    <a href="/auth/logout" class="user-button">
                        <i class="bi bi-box-arrow-right"></i>
                        Logout
                    </a>
                </div>
            </div>
        </div>
    </header>

    <div class="container">
        <!-- Period Selector -->
        <div class="period-selector">
            <button class="period-btn active" onclick="changePeriod('7d')" data-period="7d">Last 7 Days</button>
            <button class="period-btn" onclick="changePeriod('30d')" data-period="30d">Last 30 Days</button>
            <button class="period-btn" onclick="changePeriod('90d')" data-period="90d">Last 90 Days</button>
        </div>

        <!-- Analytics Overview -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="totalCustomers">-</div>
                <div class="stat-label">Total Customers Served</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="avgWaitTime">-</div>
                <div class="stat-label">Avg Wait Time (min)</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="peakHour">-</div>
                <div class="stat-label">Peak Hour</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="busiestDay">-</div>
                <div class="stat-label">Busiest Day</div>
            </div>
        </div>

        <!-- Hourly Heatmap -->
        <div class="section">
            <h2>📊 Hourly Customer Flow Heatmap</h2>
            <p style="color: rgba(255, 255, 255, 0.7); margin-bottom: 1.5rem; font-size: 1rem;">Visual representation of customer activity by hour and day. Darker colors indicate higher customer volume.</p>
            <div class="heatmap-container">
                <div id="hourlyHeatmap" style="min-height: 300px; display: flex; align-items: center; justify-content: center; color: rgba(255, 255, 255, 0.7); font-size: 1rem;">Hourly customer flow data will be displayed here</div>
            </div>
        </div>

        <!-- Peak Hours Analysis -->
        <div class="section">
            <h2>⏰ Peak Hours Analysis</h2>
            <p style="color: rgba(255, 255, 255, 0.7); margin-bottom: 1.5rem; font-size: 1rem;">Identify your busiest hours to optimize staffing and operations. Scroll horizontally to view all 24 hours.</p>
            <div class="peak-hours-container">
                <div id="peakHoursChart" style="min-height: 350px; display: flex; align-items: center; justify-content: center; color: rgba(255, 255, 255, 0.7); font-size: 1rem;">Peak hours analysis will be displayed here</div>
            </div>
        </div>

        <!-- Day of Week Comparison -->
        <div class="section">
            <h2>📅 Day of Week Performance</h2>
            <p style="color: rgba(255, 255, 255, 0.7); margin-bottom: 1.5rem; font-size: 1rem;">Track customer volume trends across your operating days of the week.</p>
            <div class="day-line-chart-container">
                <div id="dayComparison" style="min-height: 300px; display: flex; align-items: center; justify-content: center; color: rgba(255, 255, 255, 0.7); font-size: 1rem;">Day of week performance comparison will be displayed here</div>
            </div>
        </div>

        <!-- Operational Insights -->
        <div class="section">
            <h2>💡 Operational Insights & Recommendations</h2>
            <div id="operationalInsights" style="min-height: 200px; display: flex; align-items: center; justify-content: center; color: rgba(255, 255, 255, 0.7); font-size: 1rem;">Operational insights and recommendations will be displayed here</div>
        </div>

        <!-- Queue Performance -->
        <div class="section">
            <h2>🏪 Queue Performance</h2>
            <div id="queuePerformance" style="min-height: 200px; display: flex; align-items: center; justify-content: center; color: rgba(255, 255, 255, 0.7); font-size: 1rem;">Queue performance metrics will be displayed here</div>
        </div>

        <!-- Actions -->
        <div class="section">
            <h2>📤 Export & Actions</h2>
            <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                <button class="btn" onclick="exportData('json')">Export JSON</button>
                <button class="btn btn-secondary" onclick="exportData('csv')">Export CSV</button>
                <button class="btn btn-secondary" onclick="refreshData()">Refresh Data</button>
            </div>
        </div>
    </div>

    <script>
        let currentPeriod = '7d';
        let analyticsData = null;

        // Change time period
        function changePeriod(period) {
            currentPeriod = period;
            
            // Update active button
            document.querySelectorAll('.period-btn').forEach(btn => {
                btn.classList.remove('active');
                if (btn.dataset.period === period) {
                    btn.classList.add('active');
                }
            });
            
            loadAnalytics();
        }

        // Load analytics data
        async function loadAnalytics() {
            try {
                const response = await fetch(`/api/analytics/dashboard?period=${currentPeriod}`);
                const data = await response.json();
                
                if (data.success) {
                    analyticsData = data.analytics;
                    updateDashboard(analyticsData);
                }
            } catch (error) {
                console.error('Error loading analytics:', error);
                alert('Error loading analytics data');
            }
        }

        // Update dashboard with analytics data
        function updateDashboard(analytics) {
            // Update basic stats
            document.getElementById('totalCustomers').textContent = analytics.totalCustomersServed || 0;
            document.getElementById('avgWaitTime').textContent = analytics.averageWaitTime || 0;
            
            // Find peak hour
            const peakHour = findPeakHour(analytics.peakHours);
            document.getElementById('peakHour').textContent = peakHour;
            
            // Find busiest day
            const busiestDay = findBusiestDay(analytics.dailyStats);
            document.getElementById('busiestDay').textContent = busiestDay;
            
            // Update visualizations
            updateHourlyHeatmap(analytics);
            updatePeakHoursChart(analytics.peakHours);
            updateDayComparison(analytics.dailyStats);
            updateOperationalInsights(analytics);
            updateQueuePerformance(analytics.queuePerformance);
        }

        // Find peak hour from peakHours data
        function findPeakHour(peakHours) {
            if (!peakHours || Object.keys(peakHours).length === 0) return 'N/A';
            
            let maxHour = 0;
            let maxCount = 0;
            
            for (const [hour, count] of Object.entries(peakHours)) {
                if (count > maxCount) {
                    maxCount = count;
                    maxHour = parseInt(hour);
                }
            }
            
            return `${maxHour}:00`;
        }

        // Find busiest day from daily stats
        function findBusiestDay(dailyStats) {
            if (!dailyStats || dailyStats.length === 0) return 'N/A';
            
            const dayTotals = {};
            
            dailyStats.forEach(day => {
                const dayName = new Date(day.date).toLocaleDateString('en-US', { weekday: 'short' });
                dayTotals[dayName] = (dayTotals[dayName] || 0) + day.customers;
            });
            
            let busiestDay = 'N/A';
            let maxCustomers = 0;
            
            for (const [day, customers] of Object.entries(dayTotals)) {
                if (customers > maxCustomers) {
                    maxCustomers = customers;
                    busiestDay = day;
                }
            }
            
            return busiestDay;
        }

        // Update hourly heatmap
        function updateHourlyHeatmap(analytics) {
            const container = document.getElementById('hourlyHeatmap');
            
            // Get business hours from server-side data
            const businessHours = window.merchantData?.businessHours || {};
            
            // Create heatmap data structure
            const heatmapData = {};
            const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
            const dayMapping = {
                'Mon': 'monday',
                'Tue': 'tuesday', 
                'Wed': 'wednesday',
                'Thu': 'thursday',
                'Fri': 'friday',
                'Sat': 'saturday',
                'Sun': 'sunday'
            };
            
            // Filter out closed days and calculate the overall operating hours range
            const operatingDays = [];
            let minOperatingHour = 24;
            let maxOperatingHour = 0;
            
            days.forEach(day => {
                const dayKey = dayMapping[day];
                const dayHours = businessHours[dayKey];
                const isClosed = dayHours?.closed || false;
                
                if (!isClosed) {
                    operatingDays.push(day);
                    heatmapData[day] = Array(24).fill(0);
                    
                    // Track minimum and maximum operating hours across all days
                    if (dayHours?.start && dayHours?.end) {
                        const startHour = parseInt(dayHours.start.split(':')[0]);
                        const endHour = parseInt(dayHours.end.split(':')[0]);
                        minOperatingHour = Math.min(minOperatingHour, startHour);
                        maxOperatingHour = Math.max(maxOperatingHour, endHour);
                    }
                }
            });
            
            // If no valid operating hours found, use defaults
            if (minOperatingHour === 24 || maxOperatingHour === 0) {
                minOperatingHour = 9;
                maxOperatingHour = 17;
            }
            
            // Create array of hours to display (only operating hours)
            const hoursToDisplay = [];
            for (let hour = minOperatingHour; hour <= maxOperatingHour; hour++) {
                hoursToDisplay.push(hour);
            }
            
            // Populate with actual data from dailyStats and peakHours
            if (analytics.dailyStats) {
                analytics.dailyStats.forEach(dayData => {
                    const date = new Date(dayData.date);
                    const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
                    
                    // Only process data for operating days
                    if (operatingDays.includes(dayName)) {
                        // Distribute customers across hours (simplified simulation)
                        if (analytics.peakHours) {
                            Object.entries(analytics.peakHours).forEach(([hour, count]) => {
                                const hourIndex = parseInt(hour);
                                if (heatmapData[dayName]) {
                                    heatmapData[dayName][hourIndex] = Math.round(count / 7); // Average across week
                                }
                            });
                        }
                    }
                });
            }
            
            // Find max value for normalization (only from operating hours)
            let maxValue = 0;
            operatingDays.forEach(day => {
                const dayKey = dayMapping[day];
                const dayHours = businessHours[dayKey];
                if (dayHours?.start && dayHours?.end) {
                    const startHour = parseInt(dayHours.start.split(':')[0]);
                    const endHour = parseInt(dayHours.end.split(':')[0]);
                    for (let hour = startHour; hour <= endHour; hour++) {
                        if (heatmapData[day][hour] > maxValue) {
                            maxValue = heatmapData[day][hour];
                        }
                    }
                }
            });
            
            // Generate heatmap HTML - only show operational hours
            // Update CSS grid columns dynamically based on hours displayed
            const gridColumns = `80px repeat(${hoursToDisplay.length}, 1fr)`;
            let html = `<div class="heatmap" style="grid-template-columns: ${gridColumns}">`;
            
            // Header row - only show operational hours
            html += '<div class="heatmap-header"></div>';
            hoursToDisplay.forEach(hour => {
                const hourLabel = hour.toString().padStart(2, '0') + ':00';
                html += `<div class="heatmap-header">${hourLabel}</div>`;
            });
            
            // Data rows - only show operating days and operational hours
            operatingDays.forEach(day => {
                const dayKey = dayMapping[day];
                const dayHours = businessHours[dayKey];
                
                html += `<div class="heatmap-day">${day}</div>`;
                
                hoursToDisplay.forEach(hour => {
                    const value = heatmapData[day][hour];
                    const hourLabel = hour.toString().padStart(2, '0') + ':00';
                    
                    // Check if this hour is within this day's business hours
                    let isOperatingHour = false;
                    if (dayHours?.start && dayHours?.end) {
                        const startHour = parseInt(dayHours.start.split(':')[0]);
                        const endHour = parseInt(dayHours.end.split(':')[0]);
                        isOperatingHour = hour >= startHour && hour <= endHour;
                    }
                    
                    let cellClass = 'heatmap-cell';
                    let displayValue = '';
                    let tooltip = `${day} ${hourLabel}`;
                    
                    if (isOperatingHour) {
                        const intensity = maxValue > 0 ? Math.ceil((value / maxValue) * 5) : 0;
                        cellClass += ` heat-${intensity}`;
                        displayValue = value || 0;
                        tooltip += ` - ${value || 0} customers`;
                    } else {
                        cellClass += ' non-operating-hour';
                        tooltip += ' - Closed';
                    }
                    
                    html += `<div class="${cellClass}" title="${tooltip}">${displayValue}</div>`;
                });
            });
            
            html += '</div>';
            container.innerHTML = html;
        }

        // Update peak hours chart
        function updatePeakHoursChart(peakHours) {
            const container = document.getElementById('peakHoursChart');
            
            if (!peakHours || Object.keys(peakHours).length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #666;">No peak hours data available</p>';
                return;
            }
            
            // Get business hours from server-side data
            const businessHours = window.merchantData?.businessHours || {};
            
            // Calculate the overall operating hours range
            let minOperatingHour = 24;
            let maxOperatingHour = 0;
            
            Object.values(businessHours).forEach(dayHours => {
                if (!dayHours.closed && dayHours.start && dayHours.end) {
                    const startHour = parseInt(dayHours.start.split(':')[0]);
                    const endHour = parseInt(dayHours.end.split(':')[0]);
                    minOperatingHour = Math.min(minOperatingHour, startHour);
                    maxOperatingHour = Math.max(maxOperatingHour, endHour);
                }
            });
            
            // If no valid operating hours found, use defaults
            if (minOperatingHour === 24 || maxOperatingHour === 0) {
                minOperatingHour = 9;
                maxOperatingHour = 17;
            }
            
            // Create array for operational hours only
            const operationalHours = [];
            for (let hour = minOperatingHour; hour <= maxOperatingHour; hour++) {
                operationalHours.push({
                    hour: hour,
                    count: peakHours[hour] || 0
                });
            }
            
            // Find max for scaling
            const maxCount = Math.max(...operationalHours.map(h => h.count));
            
            // Generate chart HTML
            let html = '<div class="peak-hours-chart">';
            
            operationalHours.forEach(({hour, count}) => {
                const height = maxCount > 0 ? (count / maxCount) * 100 : 0;
                const hourLabel = hour.toString().padStart(2, '0') + ':00';
                
                html += `
                    <div class="peak-bar" style="height: ${height}%" title="${hourLabel} - ${count} customers">
                        <div class="peak-bar-value">${count}</div>
                        <div class="peak-bar-label">${hourLabel}</div>
                    </div>
                `;
            });
            
            html += '</div>';
            container.innerHTML = html;
        }

        // Update day comparison with line chart
        function updateDayComparison(dailyStats) {
            const container = document.getElementById('dayComparison');
            
            if (!dailyStats || dailyStats.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #666;">No daily data available</p>';
                return;
            }
            
            // Get business hours to filter out closed days
            const businessHours = window.merchantData?.businessHours || {};
            const dayMapping = {
                'Sun': 'sunday',
                'Mon': 'monday',
                'Tue': 'tuesday',
                'Wed': 'wednesday',
                'Thu': 'thursday',
                'Fri': 'friday',
                'Sat': 'saturday'
            };
            
            // Group by day of week - only include operating days
            const dayTotals = {};
            const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            const operatingDays = [];
            
            dayNames.forEach(day => {
                const dayKey = dayMapping[day];
                const dayHours = businessHours[dayKey];
                const isClosed = dayHours?.closed || false;
                
                if (!isClosed) {
                    operatingDays.push(day);
                    dayTotals[day] = { customers: 0, count: 0 };
                }
            });
            
            // Only process data for operating days
            dailyStats.forEach(day => {
                const date = new Date(day.date);
                const dayName = dayNames[date.getDay()];
                if (operatingDays.includes(dayName)) {
                    dayTotals[dayName].customers += day.customers;
                    dayTotals[dayName].count += 1;
                }
            });
            
            // Calculate averages and prepare data for line chart
            const chartData = [];
            operatingDays.forEach(day => {
                const data = dayTotals[day];
                const avgCustomers = data.count > 0 ? Math.round(data.customers / data.count) : 0;
                chartData.push({ day, value: avgCustomers });
            });
            
            if (chartData.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #666;">No operating days configured</p>';
                return;
            }
            
            // Dynamic scaling with padding for better visualization
            const values = chartData.map(d => d.value);
            const maxValue = Math.max(...values);
            const minValue = Math.min(...values);
            const range = maxValue - minValue;
            
            // Add 20% padding to top and bottom for better visual spacing
            const padding = Math.max(range * 0.2, 5); // Minimum 5 units padding
            const chartMax = maxValue + padding;
            const chartMin = Math.max(0, minValue - padding);
            const chartRange = chartMax - chartMin;
            
            // Find peak day
            const peakDay = chartData.find(d => d.value === maxValue)?.day || '';
            
            // Generate smooth curve points using SVG
            const svgWidth = 100; // percentage
            const svgHeight = 100; // percentage
            const chartPadding = 10; // percentage padding from edges
            
            // Convert data to SVG coordinates
            const svgPoints = chartData.map((point, index) => {
                const x = chartPadding + (index / (chartData.length - 1)) * (svgWidth - 2 * chartPadding);
                const y = chartPadding + ((chartMax - point.value) / chartRange) * (svgHeight - 2 * chartPadding);
                return { x, y, ...point };
            });
            
            // Generate smooth curve path using cubic bezier curves
            let pathData = '';
            let areaData = '';
            
            if (svgPoints.length > 0) {
                // Start the path
                pathData = `M ${svgPoints[0].x} ${svgPoints[0].y}`;
                areaData = `M ${svgPoints[0].x} ${svgHeight - chartPadding} L ${svgPoints[0].x} ${svgPoints[0].y}`;
                
                if (svgPoints.length === 1) {
                    // Single point - just draw a horizontal line
                    pathData += ` L ${svgPoints[0].x + 10} ${svgPoints[0].y}`;
                    areaData += ` L ${svgPoints[0].x + 10} ${svgPoints[0].y} L ${svgPoints[0].x + 10} ${svgHeight - chartPadding}`;
                } else {
                    // Multiple points - create smooth curves
                    for (let i = 1; i < svgPoints.length; i++) {
                        const prevPoint = svgPoints[i - 1];
                        const currentPoint = svgPoints[i];
                        const nextPoint = svgPoints[i + 1];
                        
                        // Calculate control points for smooth curve
                        const tension = 0.3; // Curve smoothness (0 = straight lines, 1 = very curved)
                        
                        let cp1x, cp1y, cp2x, cp2y;
                        
                        if (i === 1) {
                            // First curve
                            cp1x = prevPoint.x + (currentPoint.x - prevPoint.x) * tension;
                            cp1y = prevPoint.y;
                            cp2x = currentPoint.x - (nextPoint ? (nextPoint.x - prevPoint.x) * tension : (currentPoint.x - prevPoint.x) * tension);
                            cp2y = currentPoint.y;
                        } else if (i === svgPoints.length - 1) {
                            // Last curve
                            const prevPrevPoint = svgPoints[i - 2];
                            cp1x = prevPoint.x + (currentPoint.x - prevPrevPoint.x) * tension;
                            cp1y = prevPoint.y;
                            cp2x = currentPoint.x - (currentPoint.x - prevPoint.x) * tension;
                            cp2y = currentPoint.y;
                        } else {
                            // Middle curves
                            const prevPrevPoint = svgPoints[i - 2];
                            cp1x = prevPoint.x + (currentPoint.x - prevPrevPoint.x) * tension;
                            cp1y = prevPoint.y;
                            cp2x = currentPoint.x - (nextPoint.x - prevPoint.x) * tension;
                            cp2y = currentPoint.y;
                        }
                        
                        pathData += ` C ${cp1x} ${cp1y}, ${cp2x} ${cp2y}, ${currentPoint.x} ${currentPoint.y}`;
                        areaData += ` C ${cp1x} ${cp1y}, ${cp2x} ${cp2y}, ${currentPoint.x} ${currentPoint.y}`;
                    }
                }
                
                // Close the area path
                areaData += ` L ${svgPoints[svgPoints.length - 1].x} ${svgHeight - chartPadding} Z`;
            }
            
            // Generate line chart HTML
            let html = '<div class="day-line-chart">';
            
            // Add SVG with smooth curves
            html += `
                <svg class="chart-svg" viewBox="0 0 ${svgWidth} ${svgHeight}" preserveAspectRatio="none">
                    <defs>
                        <linearGradient id="lineGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                            <stop offset="0%" style="stop-color:#ff8c00;stop-opacity:1" />
                            <stop offset="50%" style="stop-color:#ff6b35;stop-opacity:1" />
                            <stop offset="100%" style="stop-color:#ff4500;stop-opacity:1" />
                        </linearGradient>
                        <linearGradient id="areaGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                            <stop offset="0%" style="stop-color:#ff8c00;stop-opacity:0.3" />
                            <stop offset="100%" style="stop-color:#ff8c00;stop-opacity:0.05" />
                        </linearGradient>
                    </defs>
                    
                    <!-- Grid lines -->
                    ${Array.from({length: 5}, (_, i) => {
                        const y = chartPadding + (i / 4) * (svgHeight - 2 * chartPadding);
                        return `<line x1="${chartPadding}" y1="${y}" x2="${svgWidth - chartPadding}" y2="${y}" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/>`;
                    }).join('')}
                    
                    ${svgPoints.map((_, index) => {
                        const x = chartPadding + (index / (chartData.length - 1)) * (svgWidth - 2 * chartPadding);
                        return `<line x1="${x}" y1="${chartPadding}" x2="${x}" y2="${svgHeight - chartPadding}" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/>`;
                    }).join('')}
                    
                    <!-- Area under curve -->
                    <path d="${areaData}" class="chart-area"/>
                    
                    <!-- Main curve -->
                    <path d="${pathData}" class="chart-path"/>
                </svg>
            `;
            
            // Add data points and labels
            svgPoints.forEach((point, index) => {
                const isPeak = point.day === peakDay;
                
                // Data point
                html += `
                    <div class="chart-point ${isPeak ? 'peak-point' : ''}" 
                         style="left: ${point.x}%; top: ${point.y}%; transform: translate(-50%, -50%)"
                         title="${point.day}: ${point.value} avg customers">
                    </div>
                `;
                
                // X-axis label (day name)
                html += `
                    <div class="chart-label x-axis" style="left: ${point.x}%">
                        ${point.day}
                    </div>
                `;
                
                // Value label above point
                html += `
                    <div class="chart-value-label" style="left: ${point.x}%; top: ${point.y}%; transform: translate(-50%, -120%)">
                        ${point.value}
                    </div>
                `;
            });
            
            // Add Y-axis labels with dynamic scaling
            for (let i = 0; i <= 4; i++) {
                const y = chartPadding + (i / 4) * (svgHeight - 2 * chartPadding);
                const value = Math.round(chartMax - (i * chartRange / 4));
                html += `
                    <div class="chart-label y-axis" style="top: ${y}%">
                        ${value}
                    </div>
                `;
            }
            
            html += '</div>';
            container.innerHTML = html;
        }

        // Update operational insights
        function updateOperationalInsights(analytics) {
            const container = document.getElementById('operationalInsights');
            const insights = generateInsights(analytics);
            
            let html = '<div class="insights-grid">';
            
            insights.forEach(insight => {
                html += `
                    <div class="insight-card ${insight.type}">
                        <h4>${insight.title}</h4>
                        <p>${insight.message}</p>
                    </div>
                `;
            });
            
            html += '</div>';
            container.innerHTML = html;
        }

        // Generate operational insights
        function generateInsights(analytics) {
            const insights = [];
            
            // Peak hour insight
            if (analytics.peakHours) {
                const peakHour = findPeakHour(analytics.peakHours);
                if (peakHour !== 'N/A') {
                    insights.push({
                        type: 'info',
                        title: '⏰ Peak Hour Optimization',
                        message: `Your busiest hour is ${peakHour}. Consider increasing staff during this time to reduce wait times and improve customer satisfaction.`
                    });
                }
            }
            
            // Wait time insight
            if (analytics.averageWaitTime > 15) {
                insights.push({
                    type: 'warning',
                    title: '⚠️ High Wait Times',
                    message: `Average wait time is ${analytics.averageWaitTime} minutes. Consider optimizing service processes or implementing a reservation system during peak hours.`
                });
            } else if (analytics.averageWaitTime > 0) {
                insights.push({
                    type: 'success',
                    title: '✅ Efficient Service',
                    message: `Great job! Your average wait time of ${analytics.averageWaitTime} minutes is within acceptable range. Keep up the good work!`
                });
            }
            
            // Customer volume insight
            if (analytics.totalCustomersServed > 100) {
                insights.push({
                    type: 'success',
                    title: '📈 High Customer Volume',
                    message: `You've served ${analytics.totalCustomersServed} customers! Consider implementing loyalty programs to retain these customers.`
                });
            }
            
            // Busiest day insight
            const busiestDay = findBusiestDay(analytics.dailyStats);
            if (busiestDay !== 'N/A') {
                insights.push({
                    type: 'info',
                    title: '📅 Weekly Pattern',
                    message: `${busiestDay} is your busiest day. Plan inventory and staffing accordingly. Consider special promotions on slower days to balance the load.`
                });
            }
            
            return insights;
        }

        // Update queue performance
        function updateQueuePerformance(queuePerformance) {
            const container = document.getElementById('queuePerformance');
            
            if (!queuePerformance || queuePerformance.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; padding: 3rem;">
                        <div style="width: 80px; height: 80px; margin: 0 auto 1.5rem; 
                                    background: linear-gradient(135deg, rgba(255, 140, 0, 0.1), rgba(255, 107, 53, 0.1));
                                    border-radius: 50%; display: flex; align-items: center; justify-content: center;
                                    border: 2px solid rgba(255, 140, 0, 0.2);">
                            <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="rgba(255, 140, 0, 0.5)" stroke-width="2">
                                <path d="M3 12h18m-9-9v18"/>
                            </svg>
                        </div>
                        <p style="color: rgba(255, 255, 255, 0.5); font-size: 1.1rem;">No queue data available</p>
                        <p style="color: rgba(255, 255, 255, 0.3); font-size: 0.9rem; margin-top: 0.5rem;">
                            Queue performance metrics will appear here once customers start joining
                        </p>
                    </div>`;
                return;
            }
            
            let html = '<div style="display: grid; gap: 1.5rem;">';
            
            queuePerformance.forEach((queue, index) => {
                const efficiency = queue.totalCustomers > 0 ? 
                    Math.round((queue.completedCustomers / queue.totalCustomers) * 100) : 0;
                
                // Determine gradient and glow based on efficiency
                let gradientColors, glowColor, efficiencyIcon;
                if (efficiency > 80) {
                    gradientColors = 'linear-gradient(135deg, #4ade80, #22c55e)';
                    glowColor = 'rgba(34, 197, 94, 0.3)';
                    efficiencyIcon = '🚀';
                } else if (efficiency > 60) {
                    gradientColors = 'linear-gradient(135deg, #fbbf24, #f59e0b)';
                    glowColor = 'rgba(245, 158, 11, 0.3)';
                    efficiencyIcon = '⚡';
                } else {
                    gradientColors = 'linear-gradient(135deg, #f87171, #ef4444)';
                    glowColor = 'rgba(239, 68, 68, 0.3)';
                    efficiencyIcon = '⚠️';
                }
                
                html += `
                    <div style="background: linear-gradient(135deg, rgba(255, 255, 255, 0.03), rgba(255, 255, 255, 0.01));
                                backdrop-filter: blur(20px);
                                border: 1px solid rgba(255, 255, 255, 0.1);
                                border-radius: 20px;
                                padding: 2rem;
                                position: relative;
                                overflow: hidden;
                                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                                animation: fadeInScale 0.6s ease-out ${index * 0.1}s both;">
                        
                        <!-- Animated background gradient -->
                        <div style="position: absolute; top: -50%; right: -50%; width: 200%; height: 200%;
                                    background: radial-gradient(circle, ${glowColor} 0%, transparent 50%);
                                    opacity: 0.3; pointer-events: none;
                                    animation: rotateGlow 20s linear infinite;"></div>
                        
                        <!-- Header with queue name and efficiency -->
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; position: relative;">
                            <div style="display: flex; align-items: center; gap: 1rem;">
                                <div style="width: 50px; height: 50px; 
                                            background: linear-gradient(135deg, rgba(255, 140, 0, 0.2), rgba(255, 107, 53, 0.2));
                                            border-radius: 12px; display: flex; align-items: center; justify-content: center;
                                            border: 1px solid rgba(255, 140, 0, 0.3);
                                            box-shadow: 0 4px 20px rgba(255, 140, 0, 0.2);">
                                    <span style="font-size: 1.5rem;">🏪</span>
                                </div>
                                <div>
                                    <h4 style="margin: 0; color: #ffffff; font-size: 1.3rem; font-weight: 600;">${queue.name}</h4>
                                    <p style="margin: 0; color: rgba(255, 255, 255, 0.5); font-size: 0.85rem;">Queue Performance</p>
                                </div>
                            </div>
                            <div style="text-align: right;">
                                <div style="background: ${gradientColors}; 
                                            color: white; 
                                            padding: 0.5rem 1rem; 
                                            border-radius: 16px; 
                                            font-size: 1.1rem;
                                            font-weight: 700;
                                            box-shadow: 0 4px 20px ${glowColor};
                                            display: inline-flex;
                                            align-items: center;
                                            gap: 0.5rem;">
                                    <span>${efficiencyIcon}</span>
                                    <span>${efficiency}%</span>
                                </div>
                                <p style="margin: 0.25rem 0 0 0; color: rgba(255, 255, 255, 0.6); font-size: 0.75rem;">Efficiency Rate</p>
                            </div>
                        </div>
                        
                        <!-- Metrics Grid -->
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 1rem;">
                            <!-- Total Customers -->
                            <div style="background: linear-gradient(135deg, rgba(255, 140, 0, 0.1), rgba(255, 140, 0, 0.05));
                                        border: 1px solid rgba(255, 140, 0, 0.2);
                                        border-radius: 16px;
                                        padding: 1.25rem;
                                        text-align: center;
                                        transition: all 0.3s ease;
                                        position: relative;
                                        overflow: hidden;">
                                <div style="position: absolute; top: 0; right: 0; width: 60px; height: 60px;
                                            background: radial-gradient(circle, rgba(255, 140, 0, 0.2), transparent);
                                            border-radius: 50%;
                                            transform: translate(20px, -20px);"></div>
                                <div style="font-weight: 700; 
                                            font-size: 2rem; 
                                            background: linear-gradient(135deg, #ff8c00, #ff6b35);
                                            -webkit-background-clip: text;
                                            -webkit-text-fill-color: transparent;
                                            background-clip: text;
                                            position: relative;">
                                    ${queue.totalCustomers}
                                </div>
                                <div style="font-size: 0.85rem; color: rgba(255, 255, 255, 0.7); margin-top: 0.25rem;">Total Customers</div>
                            </div>
                            
                            <!-- Completed -->
                            <div style="background: linear-gradient(135deg, rgba(34, 197, 94, 0.1), rgba(34, 197, 94, 0.05));
                                        border: 1px solid rgba(34, 197, 94, 0.2);
                                        border-radius: 16px;
                                        padding: 1.25rem;
                                        text-align: center;
                                        transition: all 0.3s ease;
                                        position: relative;
                                        overflow: hidden;">
                                <div style="position: absolute; top: 0; right: 0; width: 60px; height: 60px;
                                            background: radial-gradient(circle, rgba(34, 197, 94, 0.2), transparent);
                                            border-radius: 50%;
                                            transform: translate(20px, -20px);"></div>
                                <div style="font-weight: 700; 
                                            font-size: 2rem; 
                                            background: linear-gradient(135deg, #4ade80, #22c55e);
                                            -webkit-background-clip: text;
                                            -webkit-text-fill-color: transparent;
                                            background-clip: text;
                                            position: relative;">
                                    ${queue.completedCustomers}
                                </div>
                                <div style="font-size: 0.85rem; color: rgba(255, 255, 255, 0.7); margin-top: 0.25rem;">Completed</div>
                            </div>
                            
                            <!-- Average Wait Time -->
                            <div style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(59, 130, 246, 0.05));
                                        border: 1px solid rgba(59, 130, 246, 0.2);
                                        border-radius: 16px;
                                        padding: 1.25rem;
                                        text-align: center;
                                        transition: all 0.3s ease;
                                        position: relative;
                                        overflow: hidden;">
                                <div style="position: absolute; top: 0; right: 0; width: 60px; height: 60px;
                                            background: radial-gradient(circle, rgba(59, 130, 246, 0.2), transparent);
                                            border-radius: 50%;
                                            transform: translate(20px, -20px);"></div>
                                <div style="font-weight: 700; 
                                            font-size: 2rem; 
                                            background: linear-gradient(135deg, #60a5fa, #3b82f6);
                                            -webkit-background-clip: text;
                                            -webkit-text-fill-color: transparent;
                                            background-clip: text;
                                            position: relative;">
                                    ${queue.averageWaitTime}
                                </div>
                                <div style="font-size: 0.85rem; color: rgba(255, 255, 255, 0.7); margin-top: 0.25rem;">Avg Wait (min)</div>
                            </div>
                            
                            <!-- Current Length -->
                            <div style="background: linear-gradient(135deg, rgba(168, 85, 247, 0.1), rgba(168, 85, 247, 0.05));
                                        border: 1px solid rgba(168, 85, 247, 0.2);
                                        border-radius: 16px;
                                        padding: 1.25rem;
                                        text-align: center;
                                        transition: all 0.3s ease;
                                        position: relative;
                                        overflow: hidden;">
                                <div style="position: absolute; top: 0; right: 0; width: 60px; height: 60px;
                                            background: radial-gradient(circle, rgba(168, 85, 247, 0.2), transparent);
                                            border-radius: 50%;
                                            transform: translate(20px, -20px);"></div>
                                <div style="font-weight: 700; 
                                            font-size: 2rem; 
                                            background: linear-gradient(135deg, #c084fc, #a855f7);
                                            -webkit-background-clip: text;
                                            -webkit-text-fill-color: transparent;
                                            background-clip: text;
                                            position: relative;">
                                    ${queue.currentLength}
                                </div>
                                <div style="font-size: 0.85rem; color: rgba(255, 255, 255, 0.7); margin-top: 0.25rem;">In Queue Now</div>
                            </div>
                        </div>
                        
                        <!-- Progress Bar -->
                        <div style="margin-top: 1.5rem;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                                <span style="font-size: 0.85rem; color: rgba(255, 255, 255, 0.6);">Service Progress</span>
                                <span style="font-size: 0.85rem; color: rgba(255, 255, 255, 0.8); font-weight: 600;">
                                    ${queue.completedCustomers} / ${queue.totalCustomers}
                                </span>
                            </div>
                            <div style="background: rgba(255, 255, 255, 0.1); 
                                        height: 8px; 
                                        border-radius: 4px; 
                                        overflow: hidden;
                                        position: relative;">
                                <div style="width: ${efficiency}%; 
                                            height: 100%; 
                                            background: ${gradientColors};
                                            border-radius: 4px;
                                            transition: width 1s ease-out;
                                            position: relative;
                                            overflow: hidden;">
                                    <div style="position: absolute; 
                                                top: 0; 
                                                left: 0; 
                                                right: 0; 
                                                bottom: 0;
                                                background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
                                                animation: shimmer 2s infinite;"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            container.innerHTML = html;
        }
        
        // Export data
        async function exportData(format) {
            try {
                const response = await fetch(`/api/analytics/export?format=${format}&period=${currentPeriod}`);
                
                if (format === 'json') {
                    const data = await response.json();
                    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                    downloadFile(blob, `analytics-${currentPeriod}.json`);
                } else if (format === 'csv') {
                    const csvData = await response.text();
                    const blob = new Blob([csvData], { type: 'text/csv' });
                    downloadFile(blob, `analytics-${currentPeriod}.csv`);
                }
            } catch (error) {
                console.error('Error exporting data:', error);
                alert('Error exporting data');
            }
        }
        
        // Download file helper
        function downloadFile(blob, filename) {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        }
        
        // Refresh data
        function refreshData() {
            loadAnalytics();
        }
        
        // Load merchant data
        async function loadMerchantData() {
            try {
                const response = await fetch('/api/merchant/profile');
                const result = await response.json();
                
                if (result.success && result.merchant) {
                    window.merchantData = {
                        businessHours: result.merchant.businessHours || {}
                    };
                }
            } catch (error) {
                console.error('Error loading merchant data:', error);
            }
        }
        
        // Load data on page load
        document.addEventListener('DOMContentLoaded', async function() {
            await loadMerchantData();
            loadAnalytics();
        });
    </script>
    
    <script>
        // Merchant Data for Client-Side Access
        window.merchantData = {
            businessHours: {
                monday: { start: '09:00', end: '17:00', closed: false },
                tuesday: { start: '09:00', end: '17:00', closed: false },
                wednesday: { start: '09:00', end: '17:00', closed: false },
                thursday: { start: '09:00', end: '17:00', closed: false },
                friday: { start: '09:00', end: '17:00', closed: false },
                saturday: { start: '09:00', end: '17:00', closed: false },
                sunday: { start: '09:00', end: '17:00', closed: true }
            }
        };
    </script>
</body>
</html> 