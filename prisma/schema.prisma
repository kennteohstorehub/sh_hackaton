generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_DIRECT")
}

// ===============================
// MULTI-TENANT CORE MODELS
// ===============================

model BackOfficeUser {
  id                    String                @id @default(uuid())
  email                 String                @unique
  password              String
  fullName              String
  isActive              Boolean               @default(true)
  lastLogin             DateTime?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  auditLogs             BackOfficeAuditLog[]

  @@index([email])
  @@index([isActive])
}

model Tenant {
  id                    String                @id @default(uuid())
  name                  String
  slug                  String                @unique
  domain                String?               @unique
  isActive              Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  // Tenant relationships
  users                 TenantUser[]
  merchants             Merchant[]
  subscription          TenantSubscription?
  auditLogs             BackOfficeAuditLog[]
  webChatMessages       WebChatMessage[]
  notificationLogs      NotificationLog[]
  generalAuditLogs      AuditLog[]

  @@index([slug])
  @@index([domain])
  @@index([isActive])
}

model TenantUser {
  id                    String                @id @default(uuid())
  tenantId              String
  email                 String
  password              String
  fullName              String
  role                  TenantUserRole        @default(user)
  isActive              Boolean               @default(true)
  lastLogin             DateTime?
  emailVerified         Boolean               @default(false)
  emailVerificationToken String?
  passwordResetToken    String?
  passwordResetExpires  DateTime? 
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  tenant                Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, email])
  @@index([tenantId, role])
  @@index([email])
  @@index([isActive])
}

model TenantSubscription {
  id                    String                @id @default(uuid())
  tenantId              String                @unique
  status                SubscriptionStatus    @default(active)
  priority              SubscriptionPriority  @default(standard)
  billingCycle          BillingCycle          @default(monthly)
  startDate             DateTime              @default(now())
  endDate               DateTime?
  maxMerchants          Int                   @default(1)
  maxQueuesPerMerchant  Int                   @default(3)
  maxUsersPerTenant     Int                   @default(5)
  aiFeatures            Boolean               @default(false)
  analytics             Boolean               @default(false)
  customBranding        Boolean               @default(false)
  priority_support      Boolean               @default(false)
  tenant                Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, status])
  @@index([status, endDate])
  @@index([priority])
}

model BackOfficeAuditLog {
  id              String      @id @default(uuid())
  backOfficeUserId String?
  tenantId        String?
  action          String
  resourceType    String
  resourceId      String?
  details         Json?
  ipAddress       String?
  userAgent       String?
  timestamp       DateTime    @default(now())
  backOfficeUser  BackOfficeUser? @relation(fields: [backOfficeUserId], references: [id], onDelete: SetNull)
  tenant          Tenant?     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([backOfficeUserId, timestamp])
  @@index([tenantId, timestamp])
  @@index([action, timestamp])
  @@index([resourceType, resourceId])
}

// ===============================
// MERCHANT MODELS (MODIFIED FOR MULTI-TENANCY)
// ===============================

model Merchant {
  id                     String                @id @default(uuid())
  tenantId               String?               // Optional for backward compatibility
  businessName           String
  email                  String                @unique
  password               String
  phone                  String
  businessType           BusinessType
  timezone               String                @default("UTC")
  isActive               Boolean               @default(true)
  lastLogin              DateTime?
  emailVerified          Boolean               @default(false)
  emailVerificationToken String?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  // Relationships
  tenant                 Tenant?               @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  businessHours          BusinessHours[]
  address                MerchantAddress?
  integrations           MerchantIntegrations?
  settings               MerchantSettings?
  subscription           MerchantSubscription?
  queues                 Queue[]
  serviceTypes           ServiceType[]

  @@index([email])
  @@index([businessName])
  @@index([businessType])
  @@index([tenantId, isActive])
  @@index([tenantId, businessType])
}

// ===============================
// MERCHANT RELATED MODELS
// ===============================

model MerchantAddress {
  id         String   @id @default(uuid())
  merchantId String   @unique
  street     String?
  city       String?
  state      String?
  zipCode    String?
  country    String?
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
}

model BusinessHours {
  id         String   @id @default(uuid())
  merchantId String
  dayOfWeek  String
  start      String?
  end        String?
  closed     Boolean  @default(false)
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@unique([merchantId, dayOfWeek])
  @@index([merchantId])
}

model ServiceType {
  id                String       @id @default(uuid())
  merchantId        String
  name              String
  estimatedDuration Int
  description       String?
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  queueEntries      QueueEntry[]
  merchant          Merchant     @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@index([merchantId])
}

model MerchantIntegrations {
  id         String   @id @default(uuid())
  merchantId String   @unique
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
}

model MerchantSettings {
  id                     String                 @id @default(uuid())
  merchantId             String                 @unique
  seatingCapacity        Int                    @default(50)
  avgMealDuration        Int                    @default(45)
  maxQueueSize           Int                    @default(50)
  autoPauseThreshold     Float                  @default(0.9)
  noShowTimeout          Int                    @default(15)
  gracePeriod            Int                    @default(5)
  joinCutoffTime         Int                    @default(30)
  advanceBookingHours    Int                    @default(0)
  partySizeRegularMin    Int                    @default(1)
  partySizeRegularMax    Int                    @default(8)
  partySizePeakMin       Int                    @default(1)
  partySizePeakMax       Int                    @default(4)
  firstNotification      Int                    @default(10)
  finalNotification      Int                    @default(0)
  adjustForPeakHours     Boolean                @default(true)
  sendNoShowWarning      Boolean                @default(true)
  confirmTableAcceptance Boolean                @default(true)
  peakHours              Json?
  peakMultiplier         Float                  @default(1.5)
  merchant               Merchant               @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  notificationTemplates  NotificationTemplate[]
}

model NotificationTemplate {
  id         String           @id @default(uuid())
  settingsId String
  type       String
  template   String
  settings   MerchantSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)

  @@unique([settingsId, type])
}

model MerchantSubscription {
  id                   String           @id @default(uuid())
  merchantId           String           @unique
  plan                 SubscriptionPlan @default(free)
  startDate            DateTime         @default(now())
  endDate              DateTime?
  isActive             Boolean          @default(true)
  maxQueues            Int              @default(1)
  maxCustomersPerQueue Int              @default(50)
  aiFeatures           Boolean          @default(false)
  analytics            Boolean          @default(false)
  customBranding       Boolean          @default(false)
  merchant             Merchant         @relation(fields: [merchantId], references: [id], onDelete: Cascade)
}

// ===============================
// QUEUE MANAGEMENT MODELS
// ===============================

model Queue {
  id                    String          @id @default(uuid())
  merchantId            String
  name                  String
  description           String?
  isActive              Boolean         @default(true)
  acceptingCustomers    Boolean         @default(true)
  maxCapacity           Int             @default(100)
  averageServiceTime    Int             @default(15)
  currentServing        Int             @default(0)
  autoNotifications     Boolean         @default(true)
  notificationInterval  Int             @default(5)
  allowCancellation     Boolean         @default(true)
  requireConfirmation   Boolean         @default(true)
  businessHoursStart    String          @default("09:00")
  businessHoursEnd      String          @default("17:00")
  businessHoursTimezone String          @default("UTC")
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  merchant              Merchant        @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  analytics             QueueAnalytics?
  entries               QueueEntry[]

  @@index([merchantId, isActive])
  @@index([merchantId, createdAt])
}

model QueueEntry {
  id                String              @id @default(uuid())
  queueId           String
  customerId        String
  customerName      String
  customerPhone     String
  platform          Platform
  position          Int
  estimatedWaitTime Int?
  status            QueueEntryStatus    @default(waiting)
  serviceTypeId     String?
  partySize         Int                 @default(1) @db.SmallInt
  notes             String?
  specialRequests   String?
  verificationCode  String?
  sessionId         String?
  tableNumber       String?
  joinedAt          DateTime            @default(now())
  calledAt          DateTime?
  servedAt          DateTime?
  completedAt       DateTime?
  requeuedAt        DateTime?
  lastNotified      DateTime?
  notificationCount Int                 @default(0)
  sentimentScore    Float?
  acknowledged      Boolean             @default(false)
  acknowledgedAt    DateTime?
  acknowledgmentType String?
  estimatedArrival  DateTime?
  lastActivityAt    DateTime            @default(now())
  sessionExpiresAt  DateTime?
  queue             Queue               @relation(fields: [queueId], references: [id], onDelete: Cascade)
  serviceType       ServiceType?        @relation(fields: [serviceTypeId], references: [id])
  feedback          QueueEntryFeedback?
  pushSubscriptions PushSubscription[]
  webChatSessions   WebChatSession[]
  webChatMessages   WebChatMessage[]
  notificationLogs  NotificationLog[]

  @@index([queueId, status, joinedAt])
  @@index([customerId, status])
  @@index([status, position])
  @@index([joinedAt(sort: Desc)])
  @@index([platform, joinedAt])
  @@index([sessionId])
  @@index([sessionExpiresAt])
}

model QueueEntryFeedback {
  id          String     @id @default(uuid())
  entryId     String     @unique
  rating      Int?       @db.SmallInt
  comment     String?
  submittedAt DateTime   @default(now())
  entry       QueueEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
}

model QueueAnalytics {
  id                   String   @id @default(uuid())
  queueId              String   @unique
  totalServed          Int      @default(0)
  averageWaitTime      Float?
  averageServiceTime   Float?
  customerSatisfaction Float?
  noShowRate           Float?
  lastUpdated          DateTime @default(now())
  queue                Queue    @relation(fields: [queueId], references: [id], onDelete: Cascade)
}

// ===============================
// SESSION MANAGEMENT
// ===============================

model Session {
  sid       String   @id
  sess      String
  expire    DateTime

  @@index([expire])
}

// ===============================
// ENUMS
// ===============================

enum BusinessType {
  restaurant
  retail
}

enum SubscriptionPlan {
  free
  basic
  premium
  enterprise
}

enum QueueEntryStatus {
  waiting
  called
  serving
  completed
  cancelled
  no_show
}

enum Platform {
  web
  webchat
  messenger
}

// Multi-tenant enums
enum TenantUserRole {
  admin
  manager
  user
}

enum SubscriptionStatus {
  active
  inactive
  suspended
  cancelled
}

enum BillingCycle {
  monthly
  yearly
}

enum SubscriptionPriority {
  standard
  high
  enterprise
}

// New enums for enhanced features
enum MessageSender {
  CUSTOMER
  STAFF
  SYSTEM
}

enum NotificationChannel {
  WEBCHAT
  WHATSAPP
  EMAIL
  SMS
  PUSH
}

enum NotificationStatus {
  SENT
  DELIVERED
  FAILED
  BOUNCED
}

enum UserType {
  SUPERADMIN
  MERCHANT
  CUSTOMER
  SYSTEM
}

// ===============================
// PUSH NOTIFICATION MODELS
// ===============================

model PushSubscription {
  id             String      @id @default(uuid())
  queueEntryId   String
  endpoint       String      @unique
  p256dh         String
  auth           String
  expirationTime DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  queueEntry     QueueEntry  @relation(fields: [queueEntryId], references: [id], onDelete: Cascade)

  @@index([queueEntryId])
}

// ===============================
// WEBCHAT SESSION MANAGEMENT
// ===============================

model WebChatSession {
  id               String      @id @default(uuid())
  sessionId        String      @unique
  queueEntryId     String
  browserInfo      String?
  ipAddress        String?
  lastActivityAt   DateTime    @default(now())
  sessionExpiresAt DateTime
  isActive         Boolean     @default(true)
  recoveryToken    String?     @unique
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  queueEntry       QueueEntry  @relation(fields: [queueEntryId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([recoveryToken])
  @@index([sessionExpiresAt])
  @@index([isActive, lastActivityAt])
}

// ===============================
// WEBCHAT MESSAGES
// ===============================

model WebChatMessage {
  id                String         @id @default(uuid())
  tenantId          String?
  queueEntryId      String
  sessionId         String
  sender            MessageSender
  content           String
  isRead            Boolean        @default(false)
  createdAt         DateTime       @default(now())
  
  tenant            Tenant?        @relation(fields: [tenantId], references: [id])
  queueEntry        QueueEntry     @relation(fields: [queueEntryId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@index([queueEntryId])
  @@index([sessionId])
}

// ===============================
// NOTIFICATION LOGS
// ===============================

model NotificationLog {
  id                String               @id @default(uuid())
  tenantId          String?
  queueEntryId      String
  channel           NotificationChannel
  status            NotificationStatus
  message           String
  errorMessage      String?
  sentAt            DateTime             @default(now())
  
  tenant            Tenant?              @relation(fields: [tenantId], references: [id])
  queueEntry        QueueEntry           @relation(fields: [queueEntryId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@index([queueEntryId])
  @@index([sentAt])
}

// ===============================
// AUDIT LOGS
// ===============================

model AuditLog {
  id                String    @id @default(uuid())
  tenantId          String?
  userId            String?
  userType          UserType
  action            String
  resource          String
  resourceId        String?
  details           Json?
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime  @default(now())
  
  tenant            Tenant?   @relation(fields: [tenantId], references: [id])
  
  @@index([tenantId])
  @@index([userId])
  @@index([createdAt])
  @@index([action, resource])
}

// ===============================
// SYSTEM SETTINGS
// ===============================

model SystemSettings {
  id                        String   @id @default(uuid())
  key                       String   @unique
  value                     Json
  category                  String   // 'general', 'security', 'email', 'notification'
  description               String?
  updatedAt                 DateTime @updatedAt
  updatedBy                 String?
  
  @@index([category])
  @@index([key])
}
