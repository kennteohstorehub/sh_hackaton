generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_DIRECT")
}

model Merchant {
  id                     String                @id @default(uuid())
  businessName           String
  email                  String                @unique
  password               String
  phone                  String
  businessType           BusinessType
  timezone               String                @default("UTC")
  isActive               Boolean               @default(true)
  lastLogin              DateTime?
  emailVerified          Boolean               @default(false)
  emailVerificationToken String?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  businessHours          BusinessHours[]
  address                MerchantAddress?
  integrations           MerchantIntegrations?
  settings               MerchantSettings?
  subscription           MerchantSubscription?
  queues                 Queue[]
  serviceTypes           ServiceType[]

  @@index([email])
  @@index([businessName])
  @@index([businessType])
}

model MerchantAddress {
  id         String   @id @default(uuid())
  merchantId String   @unique
  street     String?
  city       String?
  state      String?
  zipCode    String?
  country    String?
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
}

model BusinessHours {
  id         String   @id @default(uuid())
  merchantId String
  dayOfWeek  String
  start      String?
  end        String?
  closed     Boolean  @default(false)
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@unique([merchantId, dayOfWeek])
  @@index([merchantId])
}

model ServiceType {
  id                String       @id @default(uuid())
  merchantId        String
  name              String
  estimatedDuration Int
  description       String?
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  queueEntries      QueueEntry[]
  merchant          Merchant     @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@index([merchantId])
}

model MerchantIntegrations {
  id                     String    @id @default(uuid())
  merchantId             String    @unique
  whatsappEnabled        Boolean   @default(false)
  whatsappPhoneNumber    String?
  whatsappSessionData    String?
  whatsappLastConnected  DateTime?
  merchant               Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
}

model MerchantSettings {
  id                     String                 @id @default(uuid())
  merchantId             String                 @unique
  seatingCapacity        Int                    @default(50)
  avgMealDuration        Int                    @default(45)
  maxQueueSize           Int                    @default(50)
  autoPauseThreshold     Float                  @default(0.9)
  noShowTimeout          Int                    @default(15)
  gracePeriod            Int                    @default(5)
  joinCutoffTime         Int                    @default(30)
  advanceBookingHours    Int                    @default(0)
  partySizeRegularMin    Int                    @default(1)
  partySizeRegularMax    Int                    @default(8)
  partySizePeakMin       Int                    @default(1)
  partySizePeakMax       Int                    @default(4)
  firstNotification      Int                    @default(10)
  finalNotification      Int                    @default(0)
  adjustForPeakHours     Boolean                @default(true)
  sendNoShowWarning      Boolean                @default(true)
  confirmTableAcceptance Boolean                @default(true)
  peakHours              Json?
  peakMultiplier         Float                  @default(1.5)
  merchant               Merchant               @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  notificationTemplates  NotificationTemplate[]
}

model NotificationTemplate {
  id         String           @id @default(uuid())
  settingsId String
  type       String
  template   String
  settings   MerchantSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)

  @@unique([settingsId, type])
}

model MerchantSubscription {
  id                   String           @id @default(uuid())
  merchantId           String           @unique
  plan                 SubscriptionPlan @default(free)
  startDate            DateTime         @default(now())
  endDate              DateTime?
  isActive             Boolean          @default(true)
  maxQueues            Int              @default(1)
  maxCustomersPerQueue Int              @default(50)
  aiFeatures           Boolean          @default(false)
  analytics            Boolean          @default(false)
  customBranding       Boolean          @default(false)
  merchant             Merchant         @relation(fields: [merchantId], references: [id], onDelete: Cascade)
}

model Queue {
  id                    String          @id @default(uuid())
  merchantId            String
  name                  String
  description           String?
  isActive              Boolean         @default(true)
  acceptingCustomers    Boolean         @default(true)
  maxCapacity           Int             @default(100)
  averageServiceTime    Int             @default(15)
  currentServing        Int             @default(0)
  autoNotifications     Boolean         @default(true)
  notificationInterval  Int             @default(5)
  allowCancellation     Boolean         @default(true)
  requireConfirmation   Boolean         @default(true)
  businessHoursStart    String          @default("09:00")
  businessHoursEnd      String          @default("17:00")
  businessHoursTimezone String          @default("UTC")
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  merchant              Merchant        @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  analytics             QueueAnalytics?
  entries               QueueEntry[]

  @@index([merchantId, isActive])
  @@index([merchantId, createdAt])
}

model QueueEntry {
  id                String              @id @default(uuid())
  queueId           String
  customerId        String
  customerName      String
  customerPhone     String
  platform          Platform
  position          Int
  estimatedWaitTime Int?
  status            QueueEntryStatus    @default(waiting)
  serviceTypeId     String?
  partySize         Int                 @default(1) @db.SmallInt
  notes             String?
  specialRequests   String?
  verificationCode  String?
  joinedAt          DateTime            @default(now())
  calledAt          DateTime?
  servedAt          DateTime?
  completedAt       DateTime?
  requeuedAt        DateTime?
  lastNotified      DateTime?
  notificationCount Int                 @default(0)
  sentimentScore    Float?
  queue             Queue               @relation(fields: [queueId], references: [id], onDelete: Cascade)
  serviceType       ServiceType?        @relation(fields: [serviceTypeId], references: [id])
  feedback          QueueEntryFeedback?
  pushSubscriptions PushSubscription[]

  @@index([queueId, status, joinedAt])
  @@index([customerId, status])
  @@index([status, position])
  @@index([joinedAt(sort: Desc)])
  @@index([platform, joinedAt])
}

model QueueEntryFeedback {
  id          String     @id @default(uuid())
  entryId     String     @unique
  rating      Int?       @db.SmallInt
  comment     String?
  submittedAt DateTime   @default(now())
  entry       QueueEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
}

model QueueAnalytics {
  id                   String   @id @default(uuid())
  queueId              String   @unique
  totalServed          Int      @default(0)
  averageWaitTime      Float?
  averageServiceTime   Float?
  customerSatisfaction Float?
  noShowRate           Float?
  lastUpdated          DateTime @default(now())
  queue                Queue    @relation(fields: [queueId], references: [id], onDelete: Cascade)
}

model Session {
  sid       String   @id
  sess      String
  expire    DateTime

  @@index([expire])
}

enum BusinessType {
  restaurant
  retail
}

enum SubscriptionPlan {
  free
  basic
  premium
  enterprise
}

enum QueueEntryStatus {
  waiting
  called
  serving
  completed
  cancelled
  no_show
}


enum Platform {
  whatsapp
  web
}

model PushSubscription {
  id             String      @id @default(uuid())
  queueEntryId   String
  endpoint       String      @unique
  p256dh         String
  auth           String
  expirationTime DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  queueEntry     QueueEntry  @relation(fields: [queueEntryId], references: [id], onDelete: Cascade)

  @@index([queueEntryId])
}
